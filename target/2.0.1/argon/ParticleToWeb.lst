
d:/SIT210_Projects_NWS/Particle_Data_ToWeb/ParticleToWeb/target/2.0.1/argon/ParticleToWeb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d6f40  000d6f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d6f48  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e6b4  000d6f4c  0001e6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  2003e720  2003e720  0002e720  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d6fb8  000d6fb8  00026fb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d6fe0  000d6fe0  00026fe0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001492aa  00000000  00000000  00026fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001653d  00000000  00000000  0017028e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a4fa  00000000  00000000  001867cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000027d0  00000000  00000000  001b0cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007490  00000000  00000000  001b3495  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038aeb  00000000  00000000  001ba925  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003789a  00000000  00000000  001f3410  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001089e3  00000000  00000000  0022acaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006df4  00000000  00000000  00333690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fe3b 	bl	d6cac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fe43 	bl	d6cc8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e6b4 	.word	0x2003e6b4
   d404c:	000d6f4c 	.word	0x000d6f4c
   d4050:	2003e720 	.word	0x2003e720
   d4054:	2003e720 	.word	0x2003e720
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f000 fff7 	bl	d5054 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d6f10 	.word	0x000d6f10
   d4080:	000d6f34 	.word	0x000d6f34

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f82f 	bl	d40ec <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f000 bfa1 	b.w	d4fd8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bd0d 	b.w	d4ab4 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bd0b 	b.w	d4ab4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bd11 	b.w	d4ac4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
DHT dht(DHTPIN, DHTTYPE);

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  dht.begin();
   d40b4:	4801      	ldr	r0, [pc, #4]	; (d40bc <setup+0x8>)
   d40b6:	f000 b8a9 	b.w	d420c <_ZN3DHT5beginEv>
   d40ba:	bf00      	nop
   d40bc:	2003e728 	.word	0x2003e728

000d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40c0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40c2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d40c4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d40c6:	b17c      	cbz	r4, d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d40c8:	6863      	ldr	r3, [r4, #4]
   d40ca:	3b01      	subs	r3, #1
   d40cc:	6063      	str	r3, [r4, #4]
   d40ce:	b95b      	cbnz	r3, d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	4620      	mov	r0, r4
   d40d4:	689b      	ldr	r3, [r3, #8]
   d40d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40d8:	68a3      	ldr	r3, [r4, #8]
   d40da:	3b01      	subs	r3, #1
   d40dc:	60a3      	str	r3, [r4, #8]
   d40de:	b91b      	cbnz	r3, d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	68db      	ldr	r3, [r3, #12]
   d40e6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d40e8:	4628      	mov	r0, r5
   d40ea:	bd38      	pop	{r3, r4, r5, pc}

000d40ec <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d40ec:	b510      	push	{r4, lr}
  delay(2000);

  String temp = String(dht.getTempCelcius());
   d40ee:	4c1f      	ldr	r4, [pc, #124]	; (d416c <loop+0x80>)
void loop() {
   d40f0:	b090      	sub	sp, #64	; 0x40
  delay(2000);
   d40f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d40f6:	f000 ff1b 	bl	d4f30 <delay>
  String temp = String(dht.getTempCelcius());
   d40fa:	4620      	mov	r0, r4
   d40fc:	f000 fad8 	bl	d46b0 <_ZN3DHT14getTempCelciusEv>
   d4100:	2106      	movs	r1, #6
   d4102:	a804      	add	r0, sp, #16
   d4104:	f000 fe7b 	bl	d4dfe <_ZN6StringC1Efi>

  String humidity = String(dht.getHumidity());
   d4108:	4620      	mov	r0, r4
   d410a:	f000 faff 	bl	d470c <_ZN3DHT11getHumidityEv>
   d410e:	2106      	movs	r1, #6
   d4110:	a808      	add	r0, sp, #32
   d4112:	f000 fe74 	bl	d4dfe <_ZN6StringC1Efi>

  String dewp = String(dht.getDewPoint());
   d4116:	4620      	mov	r0, r4
   d4118:	4c15      	ldr	r4, [pc, #84]	; (d4170 <loop+0x84>)
   d411a:	f000 faf9 	bl	d4710 <_ZN3DHT11getDewPointEv>
   d411e:	2106      	movs	r1, #6
   d4120:	a80c      	add	r0, sp, #48	; 0x30
   d4122:	f000 fe6c 	bl	d4dfe <_ZN6StringC1Efi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4126:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4128:	9a04      	ldr	r2, [sp, #16]
   d412a:	4912      	ldr	r1, [pc, #72]	; (d4174 <loop+0x88>)
   d412c:	f88d 3000 	strb.w	r3, [sp]
   d4130:	a802      	add	r0, sp, #8
   d4132:	233c      	movs	r3, #60	; 0x3c
   d4134:	f001 f8e6 	bl	d5304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4138:	a803      	add	r0, sp, #12
   d413a:	f7ff ffc1 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d413e:	7823      	ldrb	r3, [r4, #0]
   d4140:	9a08      	ldr	r2, [sp, #32]
   d4142:	490d      	ldr	r1, [pc, #52]	; (d4178 <loop+0x8c>)
   d4144:	f88d 3000 	strb.w	r3, [sp]
   d4148:	a802      	add	r0, sp, #8
   d414a:	233c      	movs	r3, #60	; 0x3c
   d414c:	f001 f8da 	bl	d5304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4150:	a803      	add	r0, sp, #12
   d4152:	f7ff ffb5 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4156:	a80c      	add	r0, sp, #48	; 0x30
   d4158:	f000 fdf4 	bl	d4d44 <_ZN6StringD1Ev>
  String humidity = String(dht.getHumidity());
   d415c:	a808      	add	r0, sp, #32
   d415e:	f000 fdf1 	bl	d4d44 <_ZN6StringD1Ev>
  String temp = String(dht.getTempCelcius());
   d4162:	a804      	add	r0, sp, #16
   d4164:	f000 fdee 	bl	d4d44 <_ZN6StringD1Ev>

  Particle.publish("temp", temp, PRIVATE);
  Particle.publish("humidity", humidity, PRIVATE);


   d4168:	b010      	add	sp, #64	; 0x40
   d416a:	bd10      	pop	{r4, pc}
   d416c:	2003e728 	.word	0x2003e728
   d4170:	2003e724 	.word	0x2003e724
   d4174:	000d6d80 	.word	0x000d6d80
   d4178:	000d6d85 	.word	0x000d6d85

000d417c <_GLOBAL__sub_I_dht>:
        val_(val) {
   d417c:	4b04      	ldr	r3, [pc, #16]	; (d4190 <_GLOBAL__sub_I_dht+0x14>)
DHT dht(DHTPIN, DHTTYPE);
   d417e:	4805      	ldr	r0, [pc, #20]	; (d4194 <_GLOBAL__sub_I_dht+0x18>)
   d4180:	2201      	movs	r2, #1
   d4182:	701a      	strb	r2, [r3, #0]
   d4184:	2102      	movs	r1, #2
   d4186:	2306      	movs	r3, #6
   d4188:	2216      	movs	r2, #22
   d418a:	f000 b838 	b.w	d41fe <_ZN3DHTC1Ehhh>
   d418e:	bf00      	nop
   d4190:	2003e724 	.word	0x2003e724
   d4194:	2003e728 	.word	0x2003e728

000d4198 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4198:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d419a:	6803      	ldr	r3, [r0, #0]
   d419c:	2b2f      	cmp	r3, #47	; 0x2f
{
   d419e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d41a0:	d904      	bls.n	d41ac <nrf_gpio_pin_port_decode+0x14>
   d41a2:	4a07      	ldr	r2, [pc, #28]	; (d41c0 <nrf_gpio_pin_port_decode+0x28>)
   d41a4:	2100      	movs	r1, #0
   d41a6:	200a      	movs	r0, #10
   d41a8:	f000 fbe0 	bl	d496c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d41ac:	6823      	ldr	r3, [r4, #0]
   d41ae:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d41b0:	bf83      	ittte	hi
   d41b2:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d41b6:	4803      	ldrhi	r0, [pc, #12]	; (d41c4 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d41b8:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d41ba:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d41be:	bd10      	pop	{r4, pc}
   d41c0:	000d47ad 	.word	0x000d47ad
   d41c4:	50000300 	.word	0x50000300

000d41c8 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d41c8:	b507      	push	{r0, r1, r2, lr}
   d41ca:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41cc:	a801      	add	r0, sp, #4
   d41ce:	f7ff ffe3 	bl	d4198 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d41d2:	9a01      	ldr	r2, [sp, #4]
   d41d4:	2301      	movs	r3, #1
   d41d6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d41d8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d41dc:	b003      	add	sp, #12
   d41de:	f85d fb04 	ldr.w	pc, [sp], #4

000d41e2 <nrf_gpio_pin_read>:
{
   d41e2:	b507      	push	{r0, r1, r2, lr}
   d41e4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41e6:	a801      	add	r0, sp, #4
   d41e8:	f7ff ffd6 	bl	d4198 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d41ec:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d41ee:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d41f2:	40d8      	lsrs	r0, r3
}
   d41f4:	f000 0001 	and.w	r0, r0, #1
   d41f8:	b003      	add	sp, #12
   d41fa:	f85d fb04 	ldr.w	pc, [sp], #4

000d41fe <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d41fe:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4200:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4202:	2301      	movs	r3, #1
	_pin = pin;
   d4204:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4206:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4208:	7403      	strb	r3, [r0, #16]
}
   d420a:	bd10      	pop	{r4, pc}

000d420c <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d420c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4210:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4212:	4c1e      	ldr	r4, [pc, #120]	; (d428c <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4214:	7980      	ldrb	r0, [r0, #6]
   d4216:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4290 <_ZN3DHT5beginEv+0x84>
   d421a:	2100      	movs	r1, #0
   d421c:	f001 fcee 	bl	d5bfc <pinMode>
	pinSetFast(_pin);
   d4220:	79ae      	ldrb	r6, [r5, #6]
   d4222:	7823      	ldrb	r3, [r4, #0]
   d4224:	f3bf 8f5b 	dmb	ish
   d4228:	f013 0f01 	tst.w	r3, #1
   d422c:	d10a      	bne.n	d4244 <_ZN3DHT5beginEv+0x38>
   d422e:	4620      	mov	r0, r4
   d4230:	f7ff ff37 	bl	d40a2 <__cxa_guard_acquire>
   d4234:	b130      	cbz	r0, d4244 <_ZN3DHT5beginEv+0x38>
   d4236:	f000 fa91 	bl	d475c <HAL_Pin_Map>
   d423a:	f8c8 0000 	str.w	r0, [r8]
   d423e:	4620      	mov	r0, r4
   d4240:	f7ff ff34 	bl	d40ac <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4244:	f8d8 3000 	ldr.w	r3, [r8]
   d4248:	0136      	lsls	r6, r6, #4
   d424a:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d424c:	7823      	ldrb	r3, [r4, #0]
   d424e:	f3bf 8f5b 	dmb	ish
   d4252:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4254:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4258:	d40a      	bmi.n	d4270 <_ZN3DHT5beginEv+0x64>
   d425a:	480c      	ldr	r0, [pc, #48]	; (d428c <_ZN3DHT5beginEv+0x80>)
   d425c:	f7ff ff21 	bl	d40a2 <__cxa_guard_acquire>
   d4260:	b130      	cbz	r0, d4270 <_ZN3DHT5beginEv+0x64>
   d4262:	f000 fa7b 	bl	d475c <HAL_Pin_Map>
   d4266:	f8c8 0000 	str.w	r0, [r8]
   d426a:	4808      	ldr	r0, [pc, #32]	; (d428c <_ZN3DHT5beginEv+0x80>)
   d426c:	f7ff ff1e 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4270:	f8d8 3000 	ldr.w	r3, [r8]
   d4274:	4433      	add	r3, r6
   d4276:	785b      	ldrb	r3, [r3, #1]
   d4278:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d427c:	ea43 0007 	orr.w	r0, r3, r7
   d4280:	f7ff ffa2 	bl	d41c8 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4284:	2300      	movs	r3, #0
   d4286:	60eb      	str	r3, [r5, #12]
}
   d4288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d428c:	2003e73c 	.word	0x2003e73c
   d4290:	2003e740 	.word	0x2003e740
   d4294:	00000000 	.word	0x00000000

000d4298 <_ZN3DHT15computeDewPointEff>:
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
}

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
   d4298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d429c:	ee10 0a10 	vmov	r0, s0
   d42a0:	ed2d 8b02 	vpush	{d8}
   d42a4:	eeb0 8a60 	vmov.f32	s16, s1
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d42a8:	f001 fff6 	bl	d6298 <__aeabi_f2d>
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
   d42ac:	ed9f 0a28 	vldr	s0, [pc, #160]	; d4350 <_ZN3DHT15computeDewPointEff+0xb8>
   d42b0:	ee88 0a00 	vdiv.f32	s0, s16, s0
   d42b4:	4604      	mov	r4, r0
   d42b6:	460d      	mov	r5, r1
   d42b8:	f001 fcfe 	bl	d5cb8 <logf>
   d42bc:	a320      	add	r3, pc, #128	; (adr r3, d4340 <_ZN3DHT15computeDewPointEff+0xa8>)
   d42be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42c2:	4620      	mov	r0, r4
   d42c4:	4629      	mov	r1, r5
   d42c6:	ee10 6a10 	vmov	r6, s0
   d42ca:	f002 f83d 	bl	d6348 <__aeabi_dmul>
   d42ce:	a31e      	add	r3, pc, #120	; (adr r3, d4348 <_ZN3DHT15computeDewPointEff+0xb0>)
   d42d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42d4:	4680      	mov	r8, r0
   d42d6:	4689      	mov	r9, r1
   d42d8:	4620      	mov	r0, r4
   d42da:	4629      	mov	r1, r5
   d42dc:	f001 fe7e 	bl	d5fdc <__adddf3>
   d42e0:	4602      	mov	r2, r0
   d42e2:	460b      	mov	r3, r1
   d42e4:	4640      	mov	r0, r8
   d42e6:	4649      	mov	r1, r9
   d42e8:	f002 f958 	bl	d659c <__aeabi_ddiv>
   d42ec:	4604      	mov	r4, r0
   d42ee:	4630      	mov	r0, r6
   d42f0:	460d      	mov	r5, r1
   d42f2:	f001 ffd1 	bl	d6298 <__aeabi_f2d>
   d42f6:	4602      	mov	r2, r0
   d42f8:	460b      	mov	r3, r1
   d42fa:	4620      	mov	r0, r4
   d42fc:	4629      	mov	r1, r5
   d42fe:	f001 fe6d 	bl	d5fdc <__adddf3>
	double Td = (b * tC) / (a - tC);
   d4302:	a311      	add	r3, pc, #68	; (adr r3, d4348 <_ZN3DHT15computeDewPointEff+0xb0>)
   d4304:	e9d3 2300 	ldrd	r2, r3, [r3]
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d4308:	4606      	mov	r6, r0
   d430a:	460f      	mov	r7, r1
	double Td = (b * tC) / (a - tC);
   d430c:	f002 f81c 	bl	d6348 <__aeabi_dmul>
   d4310:	4632      	mov	r2, r6
   d4312:	4604      	mov	r4, r0
   d4314:	460d      	mov	r5, r1
   d4316:	463b      	mov	r3, r7
   d4318:	a109      	add	r1, pc, #36	; (adr r1, d4340 <_ZN3DHT15computeDewPointEff+0xa8>)
   d431a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d431e:	f001 fe5b 	bl	d5fd8 <__aeabi_dsub>
   d4322:	4602      	mov	r2, r0
   d4324:	460b      	mov	r3, r1
   d4326:	4620      	mov	r0, r4
   d4328:	4629      	mov	r1, r5
   d432a:	f002 f937 	bl	d659c <__aeabi_ddiv>
	return Td;
   d432e:	f002 fac5 	bl	d68bc <__aeabi_d2f>
}
   d4332:	ecbd 8b02 	vpop	{d8}
   d4336:	ee00 0a10 	vmov	s0, r0
   d433a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d433e:	bf00      	nop
   d4340:	4189374c 	.word	0x4189374c
   d4344:	40314560 	.word	0x40314560
   d4348:	66666666 	.word	0x66666666
   d434c:	406db666 	.word	0x406db666
   d4350:	42c80000 	.word	0x42c80000

000d4354 <_ZN3DHT4readEv>:

boolean DHT::read(void) {
   d4354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4358:	4604      	mov	r4, r0
   d435a:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d435c:	f000 fa2e 	bl	d47bc <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4360:	68e3      	ldr	r3, [r4, #12]
   d4362:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4364:	bf84      	itt	hi
   d4366:	2300      	movhi	r3, #0
   d4368:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d436a:	7c23      	ldrb	r3, [r4, #16]
   d436c:	b92b      	cbnz	r3, d437a <_ZN3DHT4readEv+0x26>
   d436e:	68e3      	ldr	r3, [r4, #12]
   d4370:	1ac0      	subs	r0, r0, r3
   d4372:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4376:	f0c0 8160 	bcc.w	d463a <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d437a:	2500      	movs	r5, #0
   d437c:	7425      	strb	r5, [r4, #16]
   d437e:	f000 fa1d 	bl	d47bc <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4382:	4eb0      	ldr	r6, [pc, #704]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4384:	6025      	str	r5, [r4, #0]
   d4386:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4388:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d438a:	79a7      	ldrb	r7, [r4, #6]
   d438c:	7833      	ldrb	r3, [r6, #0]
   d438e:	4dae      	ldr	r5, [pc, #696]	; (d4648 <_ZN3DHT4readEv+0x2f4>)
   d4390:	f3bf 8f5b 	dmb	ish
   d4394:	f013 0f01 	tst.w	r3, #1
   d4398:	d109      	bne.n	d43ae <_ZN3DHT4readEv+0x5a>
   d439a:	4630      	mov	r0, r6
   d439c:	f7ff fe81 	bl	d40a2 <__cxa_guard_acquire>
   d43a0:	b128      	cbz	r0, d43ae <_ZN3DHT4readEv+0x5a>
   d43a2:	f000 f9db 	bl	d475c <HAL_Pin_Map>
   d43a6:	6028      	str	r0, [r5, #0]
   d43a8:	4630      	mov	r0, r6
   d43aa:	f7ff fe7f 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43ae:	682b      	ldr	r3, [r5, #0]
   d43b0:	013f      	lsls	r7, r7, #4
   d43b2:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43b6:	7833      	ldrb	r3, [r6, #0]
   d43b8:	f3bf 8f5b 	dmb	ish
   d43bc:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43be:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43c2:	d409      	bmi.n	d43d8 <_ZN3DHT4readEv+0x84>
   d43c4:	489f      	ldr	r0, [pc, #636]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d43c6:	f7ff fe6c 	bl	d40a2 <__cxa_guard_acquire>
   d43ca:	b128      	cbz	r0, d43d8 <_ZN3DHT4readEv+0x84>
   d43cc:	f000 f9c6 	bl	d475c <HAL_Pin_Map>
   d43d0:	6028      	str	r0, [r5, #0]
   d43d2:	489c      	ldr	r0, [pc, #624]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d43d4:	f7ff fe6a 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43d8:	682b      	ldr	r3, [r5, #0]
   d43da:	441f      	add	r7, r3
   d43dc:	7878      	ldrb	r0, [r7, #1]
   d43de:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d43e2:	ea40 0008 	orr.w	r0, r0, r8
   d43e6:	f7ff feef 	bl	d41c8 <nrf_gpio_pin_set>
	delay(250);
   d43ea:	20fa      	movs	r0, #250	; 0xfa
   d43ec:	f000 fda0 	bl	d4f30 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d43f0:	79a0      	ldrb	r0, [r4, #6]
   d43f2:	2101      	movs	r1, #1
   d43f4:	f001 fc02 	bl	d5bfc <pinMode>
	pinResetFast(_pin);
   d43f8:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43fa:	7833      	ldrb	r3, [r6, #0]
   d43fc:	f3bf 8f5b 	dmb	ish
   d4400:	07da      	lsls	r2, r3, #31
   d4402:	d409      	bmi.n	d4418 <_ZN3DHT4readEv+0xc4>
   d4404:	488f      	ldr	r0, [pc, #572]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d4406:	f7ff fe4c 	bl	d40a2 <__cxa_guard_acquire>
   d440a:	b128      	cbz	r0, d4418 <_ZN3DHT4readEv+0xc4>
   d440c:	f000 f9a6 	bl	d475c <HAL_Pin_Map>
   d4410:	6028      	str	r0, [r5, #0]
   d4412:	488c      	ldr	r0, [pc, #560]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d4414:	f7ff fe4a 	bl	d40ac <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4418:	682b      	ldr	r3, [r5, #0]
   d441a:	013f      	lsls	r7, r7, #4
   d441c:	5ddb      	ldrb	r3, [r3, r7]
   d441e:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4422:	7833      	ldrb	r3, [r6, #0]
   d4424:	f3bf 8f5b 	dmb	ish
   d4428:	07db      	lsls	r3, r3, #31
   d442a:	d409      	bmi.n	d4440 <_ZN3DHT4readEv+0xec>
   d442c:	4885      	ldr	r0, [pc, #532]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d442e:	f7ff fe38 	bl	d40a2 <__cxa_guard_acquire>
   d4432:	b128      	cbz	r0, d4440 <_ZN3DHT4readEv+0xec>
   d4434:	f000 f992 	bl	d475c <HAL_Pin_Map>
   d4438:	6028      	str	r0, [r5, #0]
   d443a:	4882      	ldr	r0, [pc, #520]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d443c:	f7ff fe36 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4440:	682b      	ldr	r3, [r5, #0]
   d4442:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4444:	a803      	add	r0, sp, #12
   d4446:	787b      	ldrb	r3, [r7, #1]
   d4448:	f003 031f 	and.w	r3, r3, #31
   d444c:	ea43 0308 	orr.w	r3, r3, r8
   d4450:	9303      	str	r3, [sp, #12]
   d4452:	f7ff fea1 	bl	d4198 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4456:	9a03      	ldr	r2, [sp, #12]
   d4458:	2301      	movs	r3, #1
   d445a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d445c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4460:	2014      	movs	r0, #20
   d4462:	f000 fd65 	bl	d4f30 <delay>
	noInterrupts();
   d4466:	f001 f9b7 	bl	d57d8 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d446a:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d446c:	7833      	ldrb	r3, [r6, #0]
   d446e:	f3bf 8f5b 	dmb	ish
   d4472:	07d8      	lsls	r0, r3, #31
   d4474:	d409      	bmi.n	d448a <_ZN3DHT4readEv+0x136>
   d4476:	4873      	ldr	r0, [pc, #460]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d4478:	f7ff fe13 	bl	d40a2 <__cxa_guard_acquire>
   d447c:	b128      	cbz	r0, d448a <_ZN3DHT4readEv+0x136>
   d447e:	f000 f96d 	bl	d475c <HAL_Pin_Map>
   d4482:	6028      	str	r0, [r5, #0]
   d4484:	486f      	ldr	r0, [pc, #444]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d4486:	f7ff fe11 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d448a:	682b      	ldr	r3, [r5, #0]
   d448c:	013f      	lsls	r7, r7, #4
   d448e:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4492:	7833      	ldrb	r3, [r6, #0]
   d4494:	f3bf 8f5b 	dmb	ish
   d4498:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d449a:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d449e:	d409      	bmi.n	d44b4 <_ZN3DHT4readEv+0x160>
   d44a0:	4868      	ldr	r0, [pc, #416]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d44a2:	f7ff fdfe 	bl	d40a2 <__cxa_guard_acquire>
   d44a6:	b128      	cbz	r0, d44b4 <_ZN3DHT4readEv+0x160>
   d44a8:	f000 f958 	bl	d475c <HAL_Pin_Map>
   d44ac:	6028      	str	r0, [r5, #0]
   d44ae:	4865      	ldr	r0, [pc, #404]	; (d4644 <_ZN3DHT4readEv+0x2f0>)
   d44b0:	f7ff fdfc 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44b4:	682b      	ldr	r3, [r5, #0]
   d44b6:	441f      	add	r7, r3
   d44b8:	7878      	ldrb	r0, [r7, #1]
   d44ba:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d44be:	ea40 0008 	orr.w	r0, r0, r8
   d44c2:	f7ff fe81 	bl	d41c8 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d44c6:	2028      	movs	r0, #40	; 0x28
   d44c8:	f000 f970 	bl	d47ac <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d44cc:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44ce:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4644 <_ZN3DHT4readEv+0x2f0>
   d44d2:	2100      	movs	r1, #0
   d44d4:	f001 fb92 	bl	d5bfc <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d44d8:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d44da:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d44dc:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d44de:	9300      	str	r3, [sp, #0]
		counter = 0;
   d44e0:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d44e4:	f894 b006 	ldrb.w	fp, [r4, #6]
   d44e8:	7833      	ldrb	r3, [r6, #0]
   d44ea:	f3bf 8f5b 	dmb	ish
   d44ee:	07da      	lsls	r2, r3, #31
   d44f0:	d409      	bmi.n	d4506 <_ZN3DHT4readEv+0x1b2>
   d44f2:	4640      	mov	r0, r8
   d44f4:	f7ff fdd5 	bl	d40a2 <__cxa_guard_acquire>
   d44f8:	b128      	cbz	r0, d4506 <_ZN3DHT4readEv+0x1b2>
   d44fa:	f000 f92f 	bl	d475c <HAL_Pin_Map>
   d44fe:	6028      	str	r0, [r5, #0]
   d4500:	4640      	mov	r0, r8
   d4502:	f7ff fdd3 	bl	d40ac <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4506:	682b      	ldr	r3, [r5, #0]
   d4508:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d450c:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4510:	015b      	lsls	r3, r3, #5
   d4512:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4514:	7833      	ldrb	r3, [r6, #0]
   d4516:	f3bf 8f5b 	dmb	ish
   d451a:	07db      	lsls	r3, r3, #31
   d451c:	d409      	bmi.n	d4532 <_ZN3DHT4readEv+0x1de>
   d451e:	4640      	mov	r0, r8
   d4520:	f7ff fdbf 	bl	d40a2 <__cxa_guard_acquire>
   d4524:	b128      	cbz	r0, d4532 <_ZN3DHT4readEv+0x1de>
   d4526:	f000 f919 	bl	d475c <HAL_Pin_Map>
   d452a:	6028      	str	r0, [r5, #0]
   d452c:	4640      	mov	r0, r8
   d452e:	f7ff fdbd 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4532:	682b      	ldr	r3, [r5, #0]
   d4534:	445b      	add	r3, fp
   d4536:	f893 b001 	ldrb.w	fp, [r3, #1]
   d453a:	9b01      	ldr	r3, [sp, #4]
   d453c:	f00b 0b1f 	and.w	fp, fp, #31
   d4540:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4544:	4658      	mov	r0, fp
   d4546:	f7ff fe4c 	bl	d41e2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d454a:	4658      	mov	r0, fp
   d454c:	f7ff fe49 	bl	d41e2 <nrf_gpio_pin_read>
   d4550:	9b00      	ldr	r3, [sp, #0]
   d4552:	4283      	cmp	r3, r0
   d4554:	d109      	bne.n	d456a <_ZN3DHT4readEv+0x216>
			counter++;
   d4556:	f109 0901 	add.w	r9, r9, #1
   d455a:	fa5f f989 	uxtb.w	r9, r9
   d455e:	2001      	movs	r0, #1
   d4560:	f000 f924 	bl	d47ac <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4564:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4568:	d1bc      	bne.n	d44e4 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d456a:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d456e:	7833      	ldrb	r3, [r6, #0]
   d4570:	f3bf 8f5b 	dmb	ish
   d4574:	07d8      	lsls	r0, r3, #31
   d4576:	d409      	bmi.n	d458c <_ZN3DHT4readEv+0x238>
   d4578:	4640      	mov	r0, r8
   d457a:	f7ff fd92 	bl	d40a2 <__cxa_guard_acquire>
   d457e:	b128      	cbz	r0, d458c <_ZN3DHT4readEv+0x238>
   d4580:	f000 f8ec 	bl	d475c <HAL_Pin_Map>
   d4584:	6028      	str	r0, [r5, #0]
   d4586:	4640      	mov	r0, r8
   d4588:	f7ff fd90 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d458c:	682b      	ldr	r3, [r5, #0]
   d458e:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4592:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4596:	015b      	lsls	r3, r3, #5
   d4598:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d459a:	7833      	ldrb	r3, [r6, #0]
   d459c:	f3bf 8f5b 	dmb	ish
   d45a0:	07d9      	lsls	r1, r3, #31
   d45a2:	d409      	bmi.n	d45b8 <_ZN3DHT4readEv+0x264>
   d45a4:	4640      	mov	r0, r8
   d45a6:	f7ff fd7c 	bl	d40a2 <__cxa_guard_acquire>
   d45aa:	b128      	cbz	r0, d45b8 <_ZN3DHT4readEv+0x264>
   d45ac:	f000 f8d6 	bl	d475c <HAL_Pin_Map>
   d45b0:	6028      	str	r0, [r5, #0]
   d45b2:	4640      	mov	r0, r8
   d45b4:	f7ff fd7a 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45b8:	682b      	ldr	r3, [r5, #0]
   d45ba:	445b      	add	r3, fp
   d45bc:	f893 b001 	ldrb.w	fp, [r3, #1]
   d45c0:	9b00      	ldr	r3, [sp, #0]
   d45c2:	f00b 0b1f 	and.w	fp, fp, #31
   d45c6:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d45ca:	4658      	mov	r0, fp
   d45cc:	f7ff fe09 	bl	d41e2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d45d0:	4658      	mov	r0, fp
   d45d2:	f7ff fe06 	bl	d41e2 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d45d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d45da:	b2c3      	uxtb	r3, r0
   d45dc:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d45de:	d018      	beq.n	d4612 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d45e0:	2f03      	cmp	r7, #3
   d45e2:	d911      	bls.n	d4608 <_ZN3DHT4readEv+0x2b4>
   d45e4:	07fa      	lsls	r2, r7, #31
   d45e6:	d40f      	bmi.n	d4608 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d45e8:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d45ec:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d45f0:	5ca3      	ldrb	r3, [r4, r2]
   d45f2:	005b      	lsls	r3, r3, #1
   d45f4:	b2db      	uxtb	r3, r3
   d45f6:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d45f8:	7a21      	ldrb	r1, [r4, #8]
   d45fa:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d45fc:	bf3c      	itt	cc
   d45fe:	f043 0301 	orrcc.w	r3, r3, #1
   d4602:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4604:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4608:	3701      	adds	r7, #1
   d460a:	b2ff      	uxtb	r7, r7
   d460c:	2f55      	cmp	r7, #85	; 0x55
   d460e:	f47f af67 	bne.w	d44e0 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4612:	f001 f8e3 	bl	d57dc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d4616:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d461a:	d910      	bls.n	d463e <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d461c:	7863      	ldrb	r3, [r4, #1]
   d461e:	7820      	ldrb	r0, [r4, #0]
   d4620:	4418      	add	r0, r3
   d4622:	78a3      	ldrb	r3, [r4, #2]
   d4624:	4418      	add	r0, r3
   d4626:	78e3      	ldrb	r3, [r4, #3]
   d4628:	4418      	add	r0, r3
   d462a:	7923      	ldrb	r3, [r4, #4]
   d462c:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d462e:	1ac3      	subs	r3, r0, r3
   d4630:	4258      	negs	r0, r3
   d4632:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d4634:	b005      	add	sp, #20
   d4636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d463a:	2001      	movs	r0, #1
   d463c:	e7fa      	b.n	d4634 <_ZN3DHT4readEv+0x2e0>
	return false;
   d463e:	2000      	movs	r0, #0
   d4640:	e7f8      	b.n	d4634 <_ZN3DHT4readEv+0x2e0>
   d4642:	bf00      	nop
   d4644:	2003e73c 	.word	0x2003e73c
   d4648:	2003e740 	.word	0x2003e740

000d464c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d464c:	b510      	push	{r4, lr}
   d464e:	4604      	mov	r4, r0
	if (read()) {
   d4650:	f7ff fe80 	bl	d4354 <_ZN3DHT4readEv>
   d4654:	b320      	cbz	r0, d46a0 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4656:	79e3      	ldrb	r3, [r4, #7]
   d4658:	2b0b      	cmp	r3, #11
   d465a:	d01b      	beq.n	d4694 <_ZN3DHT15readTemperatureEv+0x48>
   d465c:	3b15      	subs	r3, #21
   d465e:	2b01      	cmp	r3, #1
   d4660:	d81e      	bhi.n	d46a0 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d4662:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4664:	eddf 6a10 	vldr	s13, [pc, #64]	; d46a8 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d466c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4670:	78e2      	ldrb	r2, [r4, #3]
   d4672:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d4676:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d467a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d467e:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4680:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4684:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4688:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d468c:	d507      	bpl.n	d469e <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d468e:	eeb1 0a40 	vneg.f32	s0, s0
   d4692:	e004      	b.n	d469e <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4694:	78a3      	ldrb	r3, [r4, #2]
   d4696:	ee00 3a10 	vmov	s0, r3
   d469a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d469e:	bd10      	pop	{r4, pc}
		switch (_type) {
   d46a0:	ed9f 0a02 	vldr	s0, [pc, #8]	; d46ac <_ZN3DHT15readTemperatureEv+0x60>
   d46a4:	e7fb      	b.n	d469e <_ZN3DHT15readTemperatureEv+0x52>
   d46a6:	bf00      	nop
   d46a8:	43800000 	.word	0x43800000
   d46ac:	7fc00000 	.word	0x7fc00000

000d46b0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d46b0:	f7ff bfcc 	b.w	d464c <_ZN3DHT15readTemperatureEv>

000d46b4 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d46b4:	b510      	push	{r4, lr}
   d46b6:	4604      	mov	r4, r0
	if (read()) {
   d46b8:	f7ff fe4c 	bl	d4354 <_ZN3DHT4readEv>
   d46bc:	b1f0      	cbz	r0, d46fc <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d46be:	79e3      	ldrb	r3, [r4, #7]
   d46c0:	2b0b      	cmp	r3, #11
   d46c2:	d015      	beq.n	d46f0 <_ZN3DHT12readHumidityEv+0x3c>
   d46c4:	3b15      	subs	r3, #21
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	d818      	bhi.n	d46fc <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d46ca:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d46cc:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4704 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d46d0:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d46d4:	7863      	ldrb	r3, [r4, #1]
   d46d6:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d46da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d46de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46e2:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d46e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d46ea:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d46ee:	bd10      	pop	{r4, pc}
				f = data[0];
   d46f0:	7823      	ldrb	r3, [r4, #0]
   d46f2:	ee00 3a10 	vmov	s0, r3
   d46f6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d46fa:	e7f8      	b.n	d46ee <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d46fc:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4708 <_ZN3DHT12readHumidityEv+0x54>
   d4700:	e7f5      	b.n	d46ee <_ZN3DHT12readHumidityEv+0x3a>
   d4702:	bf00      	nop
   d4704:	43800000 	.word	0x43800000
   d4708:	7fc00000 	.word	0x7fc00000

000d470c <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d470c:	f7ff bfd2 	b.w	d46b4 <_ZN3DHT12readHumidityEv>

000d4710 <_ZN3DHT11getDewPointEv>:
float DHT::getDewPoint() {
   d4710:	b510      	push	{r4, lr}
   d4712:	ed2d 8b02 	vpush	{d8}
   d4716:	4604      	mov	r4, r0
	return computeDewPoint(readTemperature(), readHumidity());
   d4718:	f7ff ff98 	bl	d464c <_ZN3DHT15readTemperatureEv>
   d471c:	4620      	mov	r0, r4
   d471e:	eeb0 8a40 	vmov.f32	s16, s0
   d4722:	f7ff ffc7 	bl	d46b4 <_ZN3DHT12readHumidityEv>
   d4726:	eef0 0a40 	vmov.f32	s1, s0
   d472a:	eeb0 0a48 	vmov.f32	s0, s16
}
   d472e:	ecbd 8b02 	vpop	{d8}
	return computeDewPoint(readTemperature(), readHumidity());
   d4732:	4620      	mov	r0, r4
}
   d4734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return computeDewPoint(readTemperature(), readHumidity());
   d4738:	f7ff bdae 	b.w	d4298 <_ZN3DHT15computeDewPointEff>

000d473c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <netdb_freeaddrinfo+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	689b      	ldr	r3, [r3, #8]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030268 	.word	0x00030268

000d474c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <netdb_getaddrinfo+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	68db      	ldr	r3, [r3, #12]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030268 	.word	0x00030268

000d475c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <HAL_Pin_Map+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	681b      	ldr	r3, [r3, #0]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003022c 	.word	0x0003022c

000d476c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <HAL_Pin_Mode+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	689b      	ldr	r3, [r3, #8]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003022c 	.word	0x0003022c

000d477c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <HAL_Interrupts_Enable_All+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6a1b      	ldr	r3, [r3, #32]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003022c 	.word	0x0003022c

000d478c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <HAL_Interrupts_Disable_All+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003022c 	.word	0x0003022c

000d479c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <HAL_RNG_GetRandomNumber+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	685b      	ldr	r3, [r3, #4]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030218 	.word	0x00030218

000d47ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <HAL_Delay_Microseconds+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	68db      	ldr	r3, [r3, #12]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030218 	.word	0x00030218

000d47bc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	695b      	ldr	r3, [r3, #20]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030218 	.word	0x00030218

000d47cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <os_mutex_recursive_create+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030248 	.word	0x00030248

000d47dc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <os_mutex_recursive_destroy+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030248 	.word	0x00030248

000d47ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <inet_inet_ntop+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	695b      	ldr	r3, [r3, #20]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030264 	.word	0x00030264

000d47fc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <hal_usart_init+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	681b      	ldr	r3, [r3, #0]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	0003023c 	.word	0x0003023c

000d480c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <hal_usart_write+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	68db      	ldr	r3, [r3, #12]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	0003023c 	.word	0x0003023c

000d481c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <hal_usart_available+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	691b      	ldr	r3, [r3, #16]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	0003023c 	.word	0x0003023c

000d482c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <hal_usart_read+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	695b      	ldr	r3, [r3, #20]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003023c 	.word	0x0003023c

000d483c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <hal_usart_peek+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	699b      	ldr	r3, [r3, #24]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003023c 	.word	0x0003023c

000d484c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <hal_usart_flush+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	69db      	ldr	r3, [r3, #28]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003023c 	.word	0x0003023c

000d485c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <hal_usart_is_enabled+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6a1b      	ldr	r3, [r3, #32]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003023c 	.word	0x0003023c

000d486c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <hal_usart_available_data_for_write+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003023c 	.word	0x0003023c

000d487c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <hal_i2c_write+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	6a1b      	ldr	r3, [r3, #32]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030228 	.word	0x00030228

000d488c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <hal_i2c_available+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030228 	.word	0x00030228

000d489c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <hal_i2c_read+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030228 	.word	0x00030228

000d48ac <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <hal_i2c_peek+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030228 	.word	0x00030228

000d48bc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <hal_i2c_flush+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030228 	.word	0x00030228

000d48cc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <hal_i2c_is_enabled+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030228 	.word	0x00030228

000d48dc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <hal_i2c_init+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030228 	.word	0x00030228

000d48ec <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <hal_spi_init+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	69db      	ldr	r3, [r3, #28]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030230 	.word	0x00030230

000d48fc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <hal_spi_is_enabled+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6a1b      	ldr	r3, [r3, #32]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030230 	.word	0x00030230

000d490c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_USB_USART_Init+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	681b      	ldr	r3, [r3, #0]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	0003024c 	.word	0x0003024c

000d491c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <HAL_USB_USART_Available_Data+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	691b      	ldr	r3, [r3, #16]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	0003024c 	.word	0x0003024c

000d492c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	695b      	ldr	r3, [r3, #20]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	0003024c 	.word	0x0003024c

000d493c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <HAL_USB_USART_Receive_Data+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	699b      	ldr	r3, [r3, #24]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	0003024c 	.word	0x0003024c

000d494c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <HAL_USB_USART_Send_Data+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	69db      	ldr	r3, [r3, #28]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	0003024c 	.word	0x0003024c

000d495c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <HAL_USB_USART_Flush_Data+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6a1b      	ldr	r3, [r3, #32]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	0003024c 	.word	0x0003024c

000d496c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <panic_+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030260 	.word	0x00030260

000d497c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <set_system_mode+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	685b      	ldr	r3, [r3, #4]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030220 	.word	0x00030220

000d498c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <system_delay_ms+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	695b      	ldr	r3, [r3, #20]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030220 	.word	0x00030220

000d499c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <application_thread_current+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030220 	.word	0x00030220

000d49ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <application_thread_invoke+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030220 	.word	0x00030220

000d49bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b03      	ldr	r3, [pc, #12]	; (d49cc <system_ctrl_set_app_request_handler+0x10>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49c6:	9301      	str	r3, [sp, #4]
   d49c8:	bd08      	pop	{r3, pc}
   d49ca:	0000      	.short	0x0000
   d49cc:	00030220 	.word	0x00030220

000d49d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b03      	ldr	r3, [pc, #12]	; (d49e0 <system_ctrl_set_result+0x10>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49da:	9301      	str	r3, [sp, #4]
   d49dc:	bd08      	pop	{r3, pc}
   d49de:	0000      	.short	0x0000
   d49e0:	00030220 	.word	0x00030220

000d49e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <network_connect+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	685b      	ldr	r3, [r3, #4]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030240 	.word	0x00030240

000d49f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <network_connecting+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	689b      	ldr	r3, [r3, #8]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030240 	.word	0x00030240

000d4a04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <network_disconnect+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	68db      	ldr	r3, [r3, #12]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030240 	.word	0x00030240

000d4a14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <network_ready+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	691b      	ldr	r3, [r3, #16]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030240 	.word	0x00030240

000d4a24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <network_on+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	695b      	ldr	r3, [r3, #20]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030240 	.word	0x00030240

000d4a34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <network_off+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	699b      	ldr	r3, [r3, #24]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030240 	.word	0x00030240

000d4a44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <network_listen+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	69db      	ldr	r3, [r3, #28]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030240 	.word	0x00030240

000d4a54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <network_listening+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6a1b      	ldr	r3, [r3, #32]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030240 	.word	0x00030240

000d4a64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <network_set_listen_timeout+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030240 	.word	0x00030240

000d4a74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <network_get_listen_timeout+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	00030240 	.word	0x00030240

000d4a84 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <spark_cloud_flag_connected+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030244 	.word	0x00030244

000d4a94 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <spark_send_event+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6a1b      	ldr	r3, [r3, #32]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030244 	.word	0x00030244

000d4aa4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030244 	.word	0x00030244

000d4ab4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <malloc+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	681b      	ldr	r3, [r3, #0]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003021c 	.word	0x0003021c

000d4ac4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <free+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	685b      	ldr	r3, [r3, #4]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003021c 	.word	0x0003021c

000d4ad4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <realloc+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	689b      	ldr	r3, [r3, #8]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003021c 	.word	0x0003021c

000d4ae4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <abort+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003021c 	.word	0x0003021c

000d4af4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <_malloc_r+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003021c 	.word	0x0003021c

000d4b04 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <__errno+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003021c 	.word	0x0003021c

000d4b14 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <newlib_impure_ptr_callback+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003021c 	.word	0x0003021c

000d4b24 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b24:	2200      	movs	r2, #0
   d4b26:	6840      	ldr	r0, [r0, #4]
   d4b28:	4611      	mov	r1, r2
   d4b2a:	f7ff bf93 	b.w	d4a54 <network_listening>

000d4b2e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4b2e:	2200      	movs	r2, #0
   d4b30:	6840      	ldr	r0, [r0, #4]
   d4b32:	4611      	mov	r1, r2
   d4b34:	f7ff bf9e 	b.w	d4a74 <network_get_listen_timeout>

000d4b38 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4b38:	6840      	ldr	r0, [r0, #4]
   d4b3a:	2200      	movs	r2, #0
   d4b3c:	f7ff bf92 	b.w	d4a64 <network_set_listen_timeout>

000d4b40 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	2200      	movs	r2, #0
   d4b44:	f081 0101 	eor.w	r1, r1, #1
   d4b48:	f7ff bf7c 	b.w	d4a44 <network_listen>

000d4b4c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b4c:	2300      	movs	r3, #0
   d4b4e:	6840      	ldr	r0, [r0, #4]
   d4b50:	461a      	mov	r2, r3
   d4b52:	4619      	mov	r1, r3
   d4b54:	f7ff bf6e 	b.w	d4a34 <network_off>

000d4b58 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b58:	2300      	movs	r3, #0
   d4b5a:	6840      	ldr	r0, [r0, #4]
   d4b5c:	461a      	mov	r2, r3
   d4b5e:	4619      	mov	r1, r3
   d4b60:	f7ff bf60 	b.w	d4a24 <network_on>

000d4b64 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b64:	2200      	movs	r2, #0
   d4b66:	6840      	ldr	r0, [r0, #4]
   d4b68:	4611      	mov	r1, r2
   d4b6a:	f7ff bf53 	b.w	d4a14 <network_ready>

000d4b6e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b6e:	2200      	movs	r2, #0
   d4b70:	6840      	ldr	r0, [r0, #4]
   d4b72:	4611      	mov	r1, r2
   d4b74:	f7ff bf3e 	b.w	d49f4 <network_connecting>

000d4b78 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b78:	6840      	ldr	r0, [r0, #4]
   d4b7a:	2200      	movs	r2, #0
   d4b7c:	2102      	movs	r1, #2
   d4b7e:	f7ff bf41 	b.w	d4a04 <network_disconnect>

000d4b82 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b82:	2300      	movs	r3, #0
   d4b84:	6840      	ldr	r0, [r0, #4]
   d4b86:	461a      	mov	r2, r3
   d4b88:	f7ff bf2c 	b.w	d49e4 <network_connect>

000d4b8c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b8c:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b8e:	2203      	movs	r2, #3
   d4b90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b92:	4a02      	ldr	r2, [pc, #8]	; (d4b9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b94:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b96:	4770      	bx	lr
   d4b98:	2003e744 	.word	0x2003e744
   d4b9c:	000d6d98 	.word	0x000d6d98

000d4ba0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4ba0:	b510      	push	{r4, lr}
   d4ba2:	4604      	mov	r4, r0
   d4ba4:	4608      	mov	r0, r1
{
    _spi = spi;
   d4ba6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4ba8:	f7ff fea0 	bl	d48ec <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4bac:	2300      	movs	r3, #0
   d4bae:	6063      	str	r3, [r4, #4]
}
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4bb4:	b510      	push	{r4, lr}
   d4bb6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4bb8:	6800      	ldr	r0, [r0, #0]
   d4bba:	b118      	cbz	r0, d4bc4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4bbc:	f7ff ff82 	bl	d4ac4 <free>
            wakeupSource_ = nullptr;
   d4bc0:	2300      	movs	r3, #0
   d4bc2:	6023      	str	r3, [r4, #0]
        }
    }
   d4bc4:	bd10      	pop	{r4, pc}

000d4bc6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4bc6:	b510      	push	{r4, lr}
   d4bc8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4bca:	f7ff fff3 	bl	d4bb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4bce:	4620      	mov	r0, r4
   d4bd0:	bd10      	pop	{r4, pc}
	...

000d4bd4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4bd4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4bd6:	4b09      	ldr	r3, [pc, #36]	; (d4bfc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4bd8:	4c09      	ldr	r4, [pc, #36]	; (d4c00 <_GLOBAL__sub_I_System+0x2c>)
   d4bda:	2202      	movs	r2, #2
   d4bdc:	2000      	movs	r0, #0
   d4bde:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4be0:	4b08      	ldr	r3, [pc, #32]	; (d4c04 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4be2:	6020      	str	r0, [r4, #0]
   d4be4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4be6:	71a0      	strb	r0, [r4, #6]
   d4be8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bea:	f7ff fec7 	bl	d497c <set_system_mode>
SystemClass System;
   d4bee:	4620      	mov	r0, r4
   d4bf0:	4a05      	ldr	r2, [pc, #20]	; (d4c08 <_GLOBAL__sub_I_System+0x34>)
   d4bf2:	4906      	ldr	r1, [pc, #24]	; (d4c0c <_GLOBAL__sub_I_System+0x38>)
   d4bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4bf8:	f001 b852 	b.w	d5ca0 <__aeabi_atexit>
   d4bfc:	2003e758 	.word	0x2003e758
   d4c00:	2003e74c 	.word	0x2003e74c
   d4c04:	ffff0000 	.word	0xffff0000
   d4c08:	2003e720 	.word	0x2003e720
   d4c0c:	000d4bc7 	.word	0x000d4bc7

000d4c10 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4c10:	b510      	push	{r4, lr}
   d4c12:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4c14:	f002 f8a1 	bl	d6d5a <strlen>
   d4c18:	3801      	subs	r0, #1
   d4c1a:	1823      	adds	r3, r4, r0
   d4c1c:	4620      	mov	r0, r4
	while(i<j){
   d4c1e:	4283      	cmp	r3, r0
   d4c20:	d906      	bls.n	d4c30 <_Z11str_reversePc+0x20>
		c = *i;
   d4c22:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4c24:	7819      	ldrb	r1, [r3, #0]
   d4c26:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4c2a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4c2e:	e7f6      	b.n	d4c1e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4c30:	bd10      	pop	{r4, pc}

000d4c32 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4c32:	b570      	push	{r4, r5, r6, lr}
   d4c34:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4c36:	1e91      	subs	r1, r2, #2
   d4c38:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4c3a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4c3c:	d822      	bhi.n	d4c84 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4c3e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4c40:	b16d      	cbz	r5, d4c5e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4c42:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4c46:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d4c4a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4c4c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d4c4e:	bf94      	ite	ls
   d4c50:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4c52:	3157      	addhi	r1, #87	; 0x57
   d4c54:	b2c9      	uxtb	r1, r1
   d4c56:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d4c5a:	4635      	mov	r5, r6
	while(a){
   d4c5c:	e7f0      	b.n	d4c40 <ultoa+0xe>
   d4c5e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4c60:	4423      	add	r3, r4
            *ptr++ = '0';
   d4c62:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4c64:	4293      	cmp	r3, r2
   d4c66:	d902      	bls.n	d4c6e <ultoa+0x3c>
            *ptr++ = '0';
   d4c68:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4c6c:	e7fa      	b.n	d4c64 <ultoa+0x32>
   d4c6e:	1a1a      	subs	r2, r3, r0
   d4c70:	4283      	cmp	r3, r0
   d4c72:	bf38      	it	cc
   d4c74:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4c76:	2300      	movs	r3, #0
   d4c78:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f7ff ffc8 	bl	d4c10 <_Z11str_reversePc>
	return buffer;
   d4c80:	4620      	mov	r0, r4
}
   d4c82:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4c84:	2000      	movs	r0, #0
   d4c86:	e7fc      	b.n	d4c82 <ultoa+0x50>

000d4c88 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d4c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4c8c:	ec57 6b10 	vmov	r6, r7, d0
   d4c90:	4680      	mov	r8, r0
   d4c92:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d4c94:	ee10 0a10 	vmov	r0, s0
   d4c98:	2200      	movs	r2, #0
   d4c9a:	2300      	movs	r3, #0
   d4c9c:	4639      	mov	r1, r7
   d4c9e:	f001 fdc5 	bl	d682c <__aeabi_dcmplt>
   d4ca2:	b128      	cbz	r0, d4cb0 <_Z4dtoadhPc+0x28>
        val = -val;
   d4ca4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d4ca8:	461f      	mov	r7, r3
        *sout++ = '-';
   d4caa:	232d      	movs	r3, #45	; 0x2d
   d4cac:	f804 3b01 	strb.w	r3, [r4], #1
   d4cb0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d4cb2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d4cb6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d4cb8:	b2d9      	uxtb	r1, r3
   d4cba:	4588      	cmp	r8, r1
   d4cbc:	d903      	bls.n	d4cc6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d4cbe:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d4cc2:	3301      	adds	r3, #1
   d4cc4:	e7f8      	b.n	d4cb8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d4cc6:	4648      	mov	r0, r9
   d4cc8:	f001 fad4 	bl	d6274 <__aeabi_i2d>
   d4ccc:	4632      	mov	r2, r6
   d4cce:	463b      	mov	r3, r7
   d4cd0:	f001 fb3a 	bl	d6348 <__aeabi_dmul>
   d4cd4:	4606      	mov	r6, r0
   d4cd6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d4cd8:	f001 fe58 	bl	d698c <__aeabi_d2ulz>
   d4cdc:	4605      	mov	r5, r0
   d4cde:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4ce0:	f001 fafc 	bl	d62dc <__aeabi_ul2d>
   d4ce4:	4602      	mov	r2, r0
   d4ce6:	460b      	mov	r3, r1
   d4ce8:	4630      	mov	r0, r6
   d4cea:	4639      	mov	r1, r7
   d4cec:	f001 f974 	bl	d5fd8 <__aeabi_dsub>
   d4cf0:	4b13      	ldr	r3, [pc, #76]	; (d4d40 <_Z4dtoadhPc+0xb8>)
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	f001 fdae 	bl	d6854 <__aeabi_dcmpge>
   d4cf8:	b110      	cbz	r0, d4d00 <_Z4dtoadhPc+0x78>
        fixed++;
   d4cfa:	3501      	adds	r5, #1
   d4cfc:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4d00:	464a      	mov	r2, r9
   d4d02:	4628      	mov	r0, r5
   d4d04:	17d3      	asrs	r3, r2, #31
   d4d06:	4651      	mov	r1, sl
   d4d08:	f001 fe28 	bl	d695c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4d0c:	2301      	movs	r3, #1
   d4d0e:	4615      	mov	r5, r2
   d4d10:	4621      	mov	r1, r4
   d4d12:	220a      	movs	r2, #10
   d4d14:	f7ff ff8d 	bl	d4c32 <ultoa>
    if (prec) {
   d4d18:	f1b8 0f00 	cmp.w	r8, #0
   d4d1c:	d00d      	beq.n	d4d3a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d4d1e:	4620      	mov	r0, r4
   d4d20:	f002 f81b 	bl	d6d5a <strlen>
        *sout++ = '.';
   d4d24:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d4d26:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d4d28:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d4d2a:	220a      	movs	r2, #10
   d4d2c:	4643      	mov	r3, r8
   d4d2e:	4628      	mov	r0, r5
   d4d30:	3101      	adds	r1, #1
    }
}
   d4d32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d4d36:	f7ff bf7c 	b.w	d4c32 <ultoa>
}
   d4d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4d3e:	bf00      	nop
   d4d40:	3fe00000 	.word	0x3fe00000

000d4d44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4d44:	b510      	push	{r4, lr}
   d4d46:	4604      	mov	r4, r0
{
	free(buffer);
   d4d48:	6800      	ldr	r0, [r0, #0]
   d4d4a:	f7ff febb 	bl	d4ac4 <free>
}
   d4d4e:	4620      	mov	r0, r4
   d4d50:	bd10      	pop	{r4, pc}

000d4d52 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4d52:	b510      	push	{r4, lr}
   d4d54:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4d56:	6800      	ldr	r0, [r0, #0]
   d4d58:	b108      	cbz	r0, d4d5e <_ZN6String10invalidateEv+0xc>
   d4d5a:	f7ff feb3 	bl	d4ac4 <free>
	buffer = NULL;
   d4d5e:	2300      	movs	r3, #0
	capacity = len = 0;
   d4d60:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4d64:	6023      	str	r3, [r4, #0]
}
   d4d66:	bd10      	pop	{r4, pc}

000d4d68 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4d68:	b538      	push	{r3, r4, r5, lr}
   d4d6a:	4604      	mov	r4, r0
   d4d6c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4d6e:	6800      	ldr	r0, [r0, #0]
   d4d70:	3101      	adds	r1, #1
   d4d72:	f7ff feaf 	bl	d4ad4 <realloc>
	if (newbuffer) {
   d4d76:	b110      	cbz	r0, d4d7e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4d78:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4d7c:	2001      	movs	r0, #1
	}
	return 0;
}
   d4d7e:	bd38      	pop	{r3, r4, r5, pc}

000d4d80 <_ZN6String7reserveEj>:
{
   d4d80:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4d82:	6803      	ldr	r3, [r0, #0]
{
   d4d84:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4d86:	b123      	cbz	r3, d4d92 <_ZN6String7reserveEj+0x12>
   d4d88:	6843      	ldr	r3, [r0, #4]
   d4d8a:	428b      	cmp	r3, r1
   d4d8c:	d301      	bcc.n	d4d92 <_ZN6String7reserveEj+0x12>
   d4d8e:	2001      	movs	r0, #1
}
   d4d90:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4d92:	4620      	mov	r0, r4
   d4d94:	f7ff ffe8 	bl	d4d68 <_ZN6String12changeBufferEj>
   d4d98:	2800      	cmp	r0, #0
   d4d9a:	d0f9      	beq.n	d4d90 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4d9c:	68a3      	ldr	r3, [r4, #8]
   d4d9e:	2b00      	cmp	r3, #0
   d4da0:	d1f5      	bne.n	d4d8e <_ZN6String7reserveEj+0xe>
   d4da2:	6822      	ldr	r2, [r4, #0]
   d4da4:	7013      	strb	r3, [r2, #0]
   d4da6:	e7f2      	b.n	d4d8e <_ZN6String7reserveEj+0xe>

000d4da8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4daa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4dac:	4611      	mov	r1, r2
   d4dae:	9201      	str	r2, [sp, #4]
{
   d4db0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4db2:	f7ff ffe5 	bl	d4d80 <_ZN6String7reserveEj>
   d4db6:	9a01      	ldr	r2, [sp, #4]
   d4db8:	b928      	cbnz	r0, d4dc6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4dba:	4620      	mov	r0, r4
   d4dbc:	f7ff ffc9 	bl	d4d52 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4dc0:	4620      	mov	r0, r4
   d4dc2:	b003      	add	sp, #12
   d4dc4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4dc6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4dc8:	4629      	mov	r1, r5
   d4dca:	6820      	ldr	r0, [r4, #0]
   d4dcc:	f001 ff6e 	bl	d6cac <memcpy>
	buffer[len] = 0;
   d4dd0:	6822      	ldr	r2, [r4, #0]
   d4dd2:	68a3      	ldr	r3, [r4, #8]
   d4dd4:	2100      	movs	r1, #0
   d4dd6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4dd8:	e7f2      	b.n	d4dc0 <_ZN6String4copyEPKcj+0x18>

000d4dda <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4dda:	b513      	push	{r0, r1, r4, lr}
   d4ddc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4dde:	b159      	cbz	r1, d4df8 <_ZN6StringaSEPKc+0x1e>
   d4de0:	4608      	mov	r0, r1
   d4de2:	9101      	str	r1, [sp, #4]
   d4de4:	f001 ffb9 	bl	d6d5a <strlen>
   d4de8:	9901      	ldr	r1, [sp, #4]
   d4dea:	4602      	mov	r2, r0
   d4dec:	4620      	mov	r0, r4
   d4dee:	f7ff ffdb 	bl	d4da8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4df2:	4620      	mov	r0, r4
   d4df4:	b002      	add	sp, #8
   d4df6:	bd10      	pop	{r4, pc}
	else invalidate();
   d4df8:	f7ff ffab 	bl	d4d52 <_ZN6String10invalidateEv>
   d4dfc:	e7f9      	b.n	d4df2 <_ZN6StringaSEPKc+0x18>

000d4dfe <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d4dfe:	b530      	push	{r4, r5, lr}
   d4e00:	4604      	mov	r4, r0
	buffer = NULL;
   d4e02:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d4e04:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d4e06:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4e0a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4e0c:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d4e0e:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d4e12:	b2cd      	uxtb	r5, r1
   d4e14:	f001 fa40 	bl	d6298 <__aeabi_f2d>
   d4e18:	ec41 0b10 	vmov	d0, r0, r1
   d4e1c:	a901      	add	r1, sp, #4
   d4e1e:	4628      	mov	r0, r5
   d4e20:	f7ff ff32 	bl	d4c88 <_Z4dtoadhPc>
        *this = buf;
   d4e24:	a901      	add	r1, sp, #4
   d4e26:	4620      	mov	r0, r4
   d4e28:	f7ff ffd7 	bl	d4dda <_ZN6StringaSEPKc>
}
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	b00b      	add	sp, #44	; 0x2c
   d4e30:	bd30      	pop	{r4, r5, pc}

000d4e32 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4e32:	b510      	push	{r4, lr}
   d4e34:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4e36:	6800      	ldr	r0, [r0, #0]
   d4e38:	b108      	cbz	r0, d4e3e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4e3a:	f7ff fccf 	bl	d47dc <os_mutex_recursive_destroy>
    }
   d4e3e:	4620      	mov	r0, r4
   d4e40:	bd10      	pop	{r4, pc}

000d4e42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4e42:	680b      	ldr	r3, [r1, #0]
   d4e44:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4e46:	b113      	cbz	r3, d4e4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4e48:	685a      	ldr	r2, [r3, #4]
   d4e4a:	3201      	adds	r2, #1
   d4e4c:	605a      	str	r2, [r3, #4]
      }
   d4e4e:	4770      	bx	lr

000d4e50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4e50:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4e52:	4c06      	ldr	r4, [pc, #24]	; (d4e6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4e54:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4e56:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4e58:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4e5a:	f7ff fcb7 	bl	d47cc <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4e5e:	4620      	mov	r0, r4
   d4e60:	4a03      	ldr	r2, [pc, #12]	; (d4e70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4e62:	4904      	ldr	r1, [pc, #16]	; (d4e74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4e68:	f000 bf1a 	b.w	d5ca0 <__aeabi_atexit>
   d4e6c:	2003e75c 	.word	0x2003e75c
   d4e70:	2003e720 	.word	0x2003e720
   d4e74:	000d4e33 	.word	0x000d4e33

000d4e78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e7a:	4606      	mov	r6, r0
   d4e7c:	460d      	mov	r5, r1
  size_t n = 0;
   d4e7e:	188f      	adds	r7, r1, r2
   d4e80:	2400      	movs	r4, #0
  while (size--) {
   d4e82:	42bd      	cmp	r5, r7
   d4e84:	d00c      	beq.n	d4ea0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e86:	6833      	ldr	r3, [r6, #0]
   d4e88:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e8c:	689b      	ldr	r3, [r3, #8]
   d4e8e:	4630      	mov	r0, r6
   d4e90:	4798      	blx	r3
     if (chunk>=0)
   d4e92:	1e03      	subs	r3, r0, #0
   d4e94:	db01      	blt.n	d4e9a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e96:	441c      	add	r4, r3
  while (size--) {
   d4e98:	e7f3      	b.n	d4e82 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e9a:	2c00      	cmp	r4, #0
   d4e9c:	bf08      	it	eq
   d4e9e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ea4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4ea4:	b513      	push	{r0, r1, r4, lr}
   d4ea6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4ea8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4eaa:	b159      	cbz	r1, d4ec4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4eac:	9101      	str	r1, [sp, #4]
   d4eae:	f001 ff54 	bl	d6d5a <strlen>
   d4eb2:	6823      	ldr	r3, [r4, #0]
   d4eb4:	9901      	ldr	r1, [sp, #4]
   d4eb6:	68db      	ldr	r3, [r3, #12]
   d4eb8:	4602      	mov	r2, r0
   d4eba:	4620      	mov	r0, r4
    }
   d4ebc:	b002      	add	sp, #8
   d4ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4ec2:	4718      	bx	r3
    }
   d4ec4:	b002      	add	sp, #8
   d4ec6:	bd10      	pop	{r4, pc}

000d4ec8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ec8:	6803      	ldr	r3, [r0, #0]
   d4eca:	689b      	ldr	r3, [r3, #8]
   d4ecc:	4718      	bx	r3

000d4ece <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ece:	b530      	push	{r4, r5, lr}
   d4ed0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ed2:	2300      	movs	r3, #0
   d4ed4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4ed8:	2a01      	cmp	r2, #1
   d4eda:	bf98      	it	ls
   d4edc:	220a      	movls	r2, #10
   d4ede:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4ee0:	460d      	mov	r5, r1
   d4ee2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4ee6:	fb01 5312 	mls	r3, r1, r2, r5
   d4eea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4eee:	2b09      	cmp	r3, #9
   d4ef0:	bf94      	ite	ls
   d4ef2:	3330      	addls	r3, #48	; 0x30
   d4ef4:	3337      	addhi	r3, #55	; 0x37
   d4ef6:	b2db      	uxtb	r3, r3
  } while(n);
   d4ef8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4efa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4efe:	d9ef      	bls.n	d4ee0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4f00:	4621      	mov	r1, r4
   d4f02:	f7ff ffcf 	bl	d4ea4 <_ZN5Print5writeEPKc>
}
   d4f06:	b00b      	add	sp, #44	; 0x2c
   d4f08:	bd30      	pop	{r4, r5, pc}
	...

000d4f0c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f0c:	4b01      	ldr	r3, [pc, #4]	; (d4f14 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f0e:	4a02      	ldr	r2, [pc, #8]	; (d4f18 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f10:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f12:	4770      	bx	lr
   d4f14:	2003e760 	.word	0x2003e760
   d4f18:	000d6dc4 	.word	0x000d6dc4

000d4f1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f1c:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f1e:	681a      	ldr	r2, [r3, #0]
   d4f20:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f22:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4f24:	4770      	bx	lr
   d4f26:	bf00      	nop
   d4f28:	2003e6b4 	.word	0x2003e6b4
   d4f2c:	2003e764 	.word	0x2003e764

000d4f30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f30:	2100      	movs	r1, #0
   d4f32:	f7ff bd2b 	b.w	d498c <system_delay_ms>

000d4f36 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f36:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f38:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4f3a:	4604      	mov	r4, r0
      if (_M_manager)
   d4f3c:	b113      	cbz	r3, d4f44 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f3e:	2203      	movs	r2, #3
   d4f40:	4601      	mov	r1, r0
   d4f42:	4798      	blx	r3
    }
   d4f44:	4620      	mov	r0, r4
   d4f46:	bd10      	pop	{r4, pc}

000d4f48 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f48:	b510      	push	{r4, lr}
   d4f4a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f4c:	f7ff fff3 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
   d4f50:	4620      	mov	r0, r4
   d4f52:	bd10      	pop	{r4, pc}

000d4f54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4f54:	b513      	push	{r0, r1, r4, lr}
   d4f56:	460b      	mov	r3, r1
   d4f58:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f5a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4f5e:	466c      	mov	r4, sp
   d4f60:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f64:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f68:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f6c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4f70:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4f74:	b002      	add	sp, #8
   d4f76:	bd10      	pop	{r4, pc}

000d4f78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4f78:	4803      	ldr	r0, [pc, #12]	; (d4f88 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f7a:	4a04      	ldr	r2, [pc, #16]	; (d4f8c <_GLOBAL__sub_I_RGB+0x14>)
   d4f7c:	4904      	ldr	r1, [pc, #16]	; (d4f90 <_GLOBAL__sub_I_RGB+0x18>)
   d4f7e:	2300      	movs	r3, #0
   d4f80:	6083      	str	r3, [r0, #8]
   d4f82:	f000 be8d 	b.w	d5ca0 <__aeabi_atexit>
   d4f86:	bf00      	nop
   d4f88:	2003e768 	.word	0x2003e768
   d4f8c:	2003e720 	.word	0x2003e720
   d4f90:	000d4f49 	.word	0x000d4f49

000d4f94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4f94:	4b01      	ldr	r3, [pc, #4]	; (d4f9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4f96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4f98:	4770      	bx	lr
   d4f9a:	bf00      	nop
   d4f9c:	2003e6bc 	.word	0x2003e6bc

000d4fa0 <serialEventRun>:
{
   d4fa0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4fa2:	4b0b      	ldr	r3, [pc, #44]	; (d4fd0 <serialEventRun+0x30>)
   d4fa4:	b143      	cbz	r3, d4fb8 <serialEventRun+0x18>
   d4fa6:	f000 fbed 	bl	d5784 <_Z16_fetch_usbserialv>
   d4faa:	6803      	ldr	r3, [r0, #0]
   d4fac:	691b      	ldr	r3, [r3, #16]
   d4fae:	4798      	blx	r3
   d4fb0:	2800      	cmp	r0, #0
   d4fb2:	dd01      	ble.n	d4fb8 <serialEventRun+0x18>
        serialEvent();
   d4fb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4fb8:	4b06      	ldr	r3, [pc, #24]	; (d4fd4 <serialEventRun+0x34>)
   d4fba:	b143      	cbz	r3, d4fce <serialEventRun+0x2e>
   d4fbc:	f000 fc64 	bl	d5888 <_Z22__fetch_global_Serial1v>
   d4fc0:	6803      	ldr	r3, [r0, #0]
   d4fc2:	691b      	ldr	r3, [r3, #16]
   d4fc4:	4798      	blx	r3
   d4fc6:	2800      	cmp	r0, #0
   d4fc8:	dd01      	ble.n	d4fce <serialEventRun+0x2e>
        serialEvent1();
   d4fca:	f3af 8000 	nop.w
}
   d4fce:	bd08      	pop	{r3, pc}
	...

000d4fd8 <_post_loop>:
{
   d4fd8:	b508      	push	{r3, lr}
	serialEventRun();
   d4fda:	f7ff ffe1 	bl	d4fa0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4fde:	f7ff fbed 	bl	d47bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4fe2:	4b01      	ldr	r3, [pc, #4]	; (d4fe8 <_post_loop+0x10>)
   d4fe4:	6018      	str	r0, [r3, #0]
}
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	2003e7d4 	.word	0x2003e7d4

000d4fec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4fec:	4802      	ldr	r0, [pc, #8]	; (d4ff8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4fee:	4a03      	ldr	r2, [pc, #12]	; (d4ffc <_Z33system_initialize_user_backup_ramv+0x10>)
   d4ff0:	4903      	ldr	r1, [pc, #12]	; (d5000 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4ff2:	1a12      	subs	r2, r2, r0
   d4ff4:	f001 be5a 	b.w	d6cac <memcpy>
   d4ff8:	2003f400 	.word	0x2003f400
   d4ffc:	2003f404 	.word	0x2003f404
   d5000:	000d6f48 	.word	0x000d6f48

000d5004 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5004:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5006:	2300      	movs	r3, #0
   d5008:	9300      	str	r3, [sp, #0]
   d500a:	461a      	mov	r2, r3
   d500c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5010:	f7ff fcde 	bl	d49d0 <system_ctrl_set_result>
}
   d5014:	b003      	add	sp, #12
   d5016:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d501c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d501c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d501e:	8843      	ldrh	r3, [r0, #2]
   d5020:	2b0a      	cmp	r3, #10
   d5022:	d008      	beq.n	d5036 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5024:	2b50      	cmp	r3, #80	; 0x50
   d5026:	d10b      	bne.n	d5040 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5028:	4b09      	ldr	r3, [pc, #36]	; (d5050 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d502a:	681b      	ldr	r3, [r3, #0]
   d502c:	b14b      	cbz	r3, d5042 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d502e:	b003      	add	sp, #12
   d5030:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5034:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5036:	f7ff ffe5 	bl	d5004 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d503a:	b003      	add	sp, #12
   d503c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5040:	2300      	movs	r3, #0
   d5042:	9300      	str	r3, [sp, #0]
   d5044:	461a      	mov	r2, r3
   d5046:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d504a:	f7ff fcc1 	bl	d49d0 <system_ctrl_set_result>
}
   d504e:	e7f4      	b.n	d503a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5050:	2003e77c 	.word	0x2003e77c

000d5054 <module_user_init_hook>:
{
   d5054:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5056:	4c12      	ldr	r4, [pc, #72]	; (d50a0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5058:	4812      	ldr	r0, [pc, #72]	; (d50a4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d505a:	4d13      	ldr	r5, [pc, #76]	; (d50a8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d505c:	2100      	movs	r1, #0
   d505e:	f7ff fd59 	bl	d4b14 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5062:	6823      	ldr	r3, [r4, #0]
   d5064:	42ab      	cmp	r3, r5
   d5066:	4b11      	ldr	r3, [pc, #68]	; (d50ac <module_user_init_hook+0x58>)
   d5068:	bf0c      	ite	eq
   d506a:	2201      	moveq	r2, #1
   d506c:	2200      	movne	r2, #0
   d506e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5070:	d002      	beq.n	d5078 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5072:	f7ff ffbb 	bl	d4fec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5076:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5078:	f7ff fb90 	bl	d479c <HAL_RNG_GetRandomNumber>
   d507c:	4604      	mov	r4, r0
    srand(seed);
   d507e:	f001 fe2b 	bl	d6cd8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5082:	4b0b      	ldr	r3, [pc, #44]	; (d50b0 <module_user_init_hook+0x5c>)
   d5084:	b113      	cbz	r3, d508c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5086:	4620      	mov	r0, r4
   d5088:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d508c:	2100      	movs	r1, #0
   d508e:	4808      	ldr	r0, [pc, #32]	; (d50b0 <module_user_init_hook+0x5c>)
   d5090:	f7ff fd08 	bl	d4aa4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5098:	4806      	ldr	r0, [pc, #24]	; (d50b4 <module_user_init_hook+0x60>)
   d509a:	2100      	movs	r1, #0
   d509c:	f7ff bc8e 	b.w	d49bc <system_ctrl_set_app_request_handler>
   d50a0:	2003f400 	.word	0x2003f400
   d50a4:	000d4f95 	.word	0x000d4f95
   d50a8:	9a271c1e 	.word	0x9a271c1e
   d50ac:	2003e778 	.word	0x2003e778
   d50b0:	00000000 	.word	0x00000000
   d50b4:	000d501d 	.word	0x000d501d

000d50b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50b8:	4770      	bx	lr

000d50ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d50ba:	2000      	movs	r0, #0
   d50bc:	4770      	bx	lr

000d50be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50be:	b510      	push	{r4, lr}
   d50c0:	2110      	movs	r1, #16
   d50c2:	4604      	mov	r4, r0
   d50c4:	f000 fdf1 	bl	d5caa <_ZdlPvj>
   d50c8:	4620      	mov	r0, r4
   d50ca:	bd10      	pop	{r4, pc}

000d50cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d50cc:	b508      	push	{r3, lr}
      { delete this; }
   d50ce:	f7ff fff6 	bl	d50be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d50d2:	bd08      	pop	{r3, pc}

000d50d4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d50d4:	b530      	push	{r4, r5, lr}
        type_(type) {
   d50d6:	2200      	movs	r2, #0
   d50d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d50dc:	6002      	str	r2, [r0, #0]
   d50de:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d50e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d50e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d50e4:	680c      	ldr	r4, [r1, #0]
   d50e6:	8085      	strh	r5, [r0, #4]
   d50e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d50ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d50ec:	bd30      	pop	{r4, r5, pc}

000d50ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d50ee:	b510      	push	{r4, lr}
   d50f0:	4604      	mov	r4, r0
    free((void*)msg_);
   d50f2:	6800      	ldr	r0, [r0, #0]
   d50f4:	f7ff fce6 	bl	d4ac4 <free>
}
   d50f8:	4620      	mov	r0, r4
   d50fa:	bd10      	pop	{r4, pc}

000d50fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d50fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d50fe:	68c4      	ldr	r4, [r0, #12]
   d5100:	b1f4      	cbz	r4, d5140 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5102:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5104:	2b02      	cmp	r3, #2
   d5106:	d103      	bne.n	d5110 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5108:	f104 000c 	add.w	r0, r4, #12
   d510c:	f7ff ffef 	bl	d50ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5110:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5112:	b135      	cbz	r5, d5122 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5114:	4628      	mov	r0, r5
   d5116:	f7ff ff0e 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
   d511a:	2110      	movs	r1, #16
   d511c:	4628      	mov	r0, r5
   d511e:	f000 fdc4 	bl	d5caa <_ZdlPvj>
   d5122:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5124:	b135      	cbz	r5, d5134 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5126:	4628      	mov	r0, r5
   d5128:	f7ff ff05 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
   d512c:	2110      	movs	r1, #16
   d512e:	4628      	mov	r0, r5
   d5130:	f000 fdbb 	bl	d5caa <_ZdlPvj>
   d5134:	4620      	mov	r0, r4
   d5136:	2114      	movs	r1, #20
   d5138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d513c:	f000 bdb5 	b.w	d5caa <_ZdlPvj>
   d5140:	bd38      	pop	{r3, r4, r5, pc}

000d5142 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5142:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5144:	460e      	mov	r6, r1
   d5146:	4604      	mov	r4, r0
   d5148:	f856 3b04 	ldr.w	r3, [r6], #4
   d514c:	9300      	str	r3, [sp, #0]
   d514e:	460d      	mov	r5, r1
   d5150:	a801      	add	r0, sp, #4
   d5152:	4631      	mov	r1, r6
   d5154:	f7ff fe75 	bl	d4e42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5158:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d515a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d515c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d515e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5160:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5162:	2300      	movs	r3, #0
   d5164:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5166:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5168:	f7fe ffaa 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d516c:	4630      	mov	r0, r6
   d516e:	f7fe ffa7 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5172:	4628      	mov	r0, r5
   d5174:	2108      	movs	r1, #8
   d5176:	f000 fd98 	bl	d5caa <_ZdlPvj>
        return p;
    }
   d517a:	4620      	mov	r0, r4
   d517c:	b002      	add	sp, #8
   d517e:	bd70      	pop	{r4, r5, r6, pc}

000d5180 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5180:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5182:	b510      	push	{r4, lr}
      if (_M_empty())
   d5184:	b90a      	cbnz	r2, d518a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5186:	f000 fd94 	bl	d5cb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d518a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d518e:	68c3      	ldr	r3, [r0, #12]
   d5190:	4718      	bx	r3

000d5192 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5192:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5194:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5196:	f100 0110 	add.w	r1, r0, #16
   d519a:	f7ff fff1 	bl	d5180 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d519e:	bd08      	pop	{r3, pc}

000d51a0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d51a0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d51a2:	b510      	push	{r4, lr}
      if (_M_empty())
   d51a4:	b90a      	cbnz	r2, d51aa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d51a6:	f000 fd84 	bl	d5cb2 <_ZSt25__throw_bad_function_callv>
    }
   d51aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51ae:	68c3      	ldr	r3, [r0, #12]
   d51b0:	4718      	bx	r3

000d51b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d51b2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d51b4:	6800      	ldr	r0, [r0, #0]
   d51b6:	f100 0110 	add.w	r1, r0, #16
   d51ba:	f7ff fff1 	bl	d51a0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d51be:	bd08      	pop	{r3, pc}

000d51c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d51c0:	b538      	push	{r3, r4, r5, lr}
   d51c2:	2300      	movs	r3, #0
   d51c4:	4604      	mov	r4, r0
   d51c6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51c8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d51ca:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51cc:	f7fe ff63 	bl	d4096 <_Znwj>
   d51d0:	b128      	cbz	r0, d51de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d51d2:	2301      	movs	r3, #1
   d51d4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d51d8:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d51da:	6003      	str	r3, [r0, #0]
   d51dc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51de:	6020      	str	r0, [r4, #0]
	}
   d51e0:	4620      	mov	r0, r4
   d51e2:	bd38      	pop	{r3, r4, r5, pc}
   d51e4:	000d6dec 	.word	0x000d6dec

000d51e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d51e8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d51ea:	2300      	movs	r3, #0
   d51ec:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d51ee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d51f0:	4604      	mov	r4, r0
   d51f2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d51f4:	b12b      	cbz	r3, d5202 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d51f6:	2202      	movs	r2, #2
   d51f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d51fa:	68eb      	ldr	r3, [r5, #12]
   d51fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d51fe:	68ab      	ldr	r3, [r5, #8]
   d5200:	60a3      	str	r3, [r4, #8]
    }
   d5202:	4620      	mov	r0, r4
   d5204:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5208:	b5f0      	push	{r4, r5, r6, r7, lr}
   d520a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d520c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d520e:	4668      	mov	r0, sp
   d5210:	f7ff ff60 	bl	d50d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5214:	f04f 0302 	mov.w	r3, #2
   d5218:	e8d4 2f4f 	ldrexb	r2, [r4]
   d521c:	2a00      	cmp	r2, #0
   d521e:	d103      	bne.n	d5228 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5220:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5224:	2900      	cmp	r1, #0
   d5226:	d1f7      	bne.n	d5218 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5228:	d125      	bne.n	d5276 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d522a:	f104 050c 	add.w	r5, r4, #12
   d522e:	4669      	mov	r1, sp
   d5230:	4628      	mov	r0, r5
   d5232:	f7ff ff4f 	bl	d50d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5236:	f3bf 8f5b 	dmb	ish
   d523a:	2301      	movs	r3, #1
   d523c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d523e:	2000      	movs	r0, #0
   d5240:	f104 0308 	add.w	r3, r4, #8
   d5244:	f3bf 8f5b 	dmb	ish
   d5248:	e853 6f00 	ldrex	r6, [r3]
   d524c:	e843 0200 	strex	r2, r0, [r3]
   d5250:	2a00      	cmp	r2, #0
   d5252:	d1f9      	bne.n	d5248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5254:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5258:	b16e      	cbz	r6, d5276 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d525a:	f7ff fb9f 	bl	d499c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d525e:	b178      	cbz	r0, d5280 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5260:	4629      	mov	r1, r5
   d5262:	4630      	mov	r0, r6
   d5264:	f7ff ff8c 	bl	d5180 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5268:	4630      	mov	r0, r6
   d526a:	f7ff fe64 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d526e:	2110      	movs	r1, #16
   d5270:	4630      	mov	r0, r6
   d5272:	f000 fd1a 	bl	d5caa <_ZdlPvj>
        p_->setError(std::move(error));
   d5276:	4668      	mov	r0, sp
   d5278:	f7ff ff39 	bl	d50ee <_ZN8particle5ErrorD1Ev>
    }
   d527c:	b009      	add	sp, #36	; 0x24
   d527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5280:	4631      	mov	r1, r6
   d5282:	a802      	add	r0, sp, #8
   d5284:	f7ff ffb0 	bl	d51e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5288:	68e0      	ldr	r0, [r4, #12]
   d528a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d528e:	b108      	cbz	r0, d5294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5290:	f001 fd46 	bl	d6d20 <strdup>
        type_(type) {
   d5294:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5296:	2010      	movs	r0, #16
   d5298:	f8ad 501c 	strh.w	r5, [sp, #28]
   d529c:	f7fe fefb 	bl	d4096 <_Znwj>
   d52a0:	4605      	mov	r5, r0
   d52a2:	b1e8      	cbz	r0, d52e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d52a4:	2700      	movs	r7, #0
   d52a6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52a8:	2018      	movs	r0, #24
   d52aa:	f7fe fef4 	bl	d4096 <_Znwj>
   d52ae:	4604      	mov	r4, r0
   d52b0:	b188      	cbz	r0, d52d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d52b2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d52b4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d52b6:	a802      	add	r0, sp, #8
   d52b8:	f7ff fe4c 	bl	d4f54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52be:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52c0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d52c4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52c6:	a906      	add	r1, sp, #24
   d52c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52ca:	60e3      	str	r3, [r4, #12]
   d52cc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d52d0:	9205      	str	r2, [sp, #20]
   d52d2:	f7ff feff 	bl	d50d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d52d6:	4b08      	ldr	r3, [pc, #32]	; (d52f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d52d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d52da:	4b08      	ldr	r3, [pc, #32]	; (d52fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52dc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d52de:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d52e0:	a806      	add	r0, sp, #24
   d52e2:	f7ff ff04 	bl	d50ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d52e6:	a802      	add	r0, sp, #8
   d52e8:	f7ff fe25 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d52ec:	2200      	movs	r2, #0
   d52ee:	4629      	mov	r1, r5
   d52f0:	4803      	ldr	r0, [pc, #12]	; (d5300 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d52f2:	f7ff fb5b 	bl	d49ac <application_thread_invoke>
   d52f6:	e7b7      	b.n	d5268 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d52f8:	000d5193 	.word	0x000d5193
   d52fc:	000d5429 	.word	0x000d5429
   d5300:	000d5911 	.word	0x000d5911

000d5304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5308:	b08a      	sub	sp, #40	; 0x28
   d530a:	4605      	mov	r5, r0
   d530c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5310:	460c      	mov	r4, r1
   d5312:	4617      	mov	r7, r2
   d5314:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5316:	f7ff fbb5 	bl	d4a84 <spark_cloud_flag_connected>
   d531a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d531c:	4682      	mov	sl, r0
   d531e:	bb38      	cbnz	r0, d5370 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5320:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5324:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5326:	a905      	add	r1, sp, #20
   d5328:	4630      	mov	r0, r6
   d532a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d532e:	f7ff fed1 	bl	d50d4 <_ZN8particle5ErrorC1EOS0_>
   d5332:	2014      	movs	r0, #20
   d5334:	f7fe feaf 	bl	d4096 <_Znwj>
   d5338:	4604      	mov	r4, r0
   d533a:	b148      	cbz	r0, d5350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d533c:	2302      	movs	r3, #2
   d533e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5340:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5342:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5346:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5348:	4631      	mov	r1, r6
   d534a:	300c      	adds	r0, #12
   d534c:	f7ff fec2 	bl	d50d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5350:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5352:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5354:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5358:	f7ff ff32 	bl	d51c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d535c:	4630      	mov	r0, r6
   d535e:	f7ff fec6 	bl	d50ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5362:	a805      	add	r0, sp, #20
   d5364:	f7ff fec3 	bl	d50ee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5368:	4628      	mov	r0, r5
   d536a:	b00a      	add	sp, #40	; 0x28
   d536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5370:	230c      	movs	r3, #12
   d5372:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5376:	2014      	movs	r0, #20
   d5378:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d537c:	9307      	str	r3, [sp, #28]
   d537e:	f7fe fe8a 	bl	d4096 <_Znwj>
   d5382:	4601      	mov	r1, r0
   d5384:	b128      	cbz	r0, d5392 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5386:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d538a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d538e:	f880 a001 	strb.w	sl, [r0, #1]
   d5392:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5394:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5396:	f7ff ff13 	bl	d51c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d539a:	4b22      	ldr	r3, [pc, #136]	; (d5424 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d539c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d539e:	2008      	movs	r0, #8
   d53a0:	f7fe fe79 	bl	d4096 <_Znwj>
   d53a4:	4682      	mov	sl, r0
   d53a6:	b128      	cbz	r0, d53b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53a8:	9b03      	ldr	r3, [sp, #12]
   d53aa:	f840 3b04 	str.w	r3, [r0], #4
   d53ae:	a904      	add	r1, sp, #16
   d53b0:	f7ff fd47 	bl	d4e42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d53b4:	9600      	str	r6, [sp, #0]
   d53b6:	fa5f f389 	uxtb.w	r3, r9
   d53ba:	4642      	mov	r2, r8
   d53bc:	4639      	mov	r1, r7
   d53be:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d53c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d53c4:	f7ff fb66 	bl	d4a94 <spark_send_event>
   d53c8:	b9b8      	cbnz	r0, d53fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d53ca:	9b03      	ldr	r3, [sp, #12]
   d53cc:	785b      	ldrb	r3, [r3, #1]
   d53ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d53d2:	b993      	cbnz	r3, d53fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d53d4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d53d8:	a905      	add	r1, sp, #20
   d53da:	a803      	add	r0, sp, #12
   d53dc:	9205      	str	r2, [sp, #20]
   d53de:	f8ad 3018 	strh.w	r3, [sp, #24]
   d53e2:	f7ff ff11 	bl	d5208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d53e6:	a805      	add	r0, sp, #20
   d53e8:	f7ff fe81 	bl	d50ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d53ec:	a805      	add	r0, sp, #20
   d53ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d53f0:	f7ff fea7 	bl	d5142 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d53f4:	a806      	add	r0, sp, #24
   d53f6:	f7fe fe63 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53fa:	9b03      	ldr	r3, [sp, #12]
   d53fc:	9305      	str	r3, [sp, #20]
   d53fe:	a904      	add	r1, sp, #16
   d5400:	a806      	add	r0, sp, #24
   d5402:	f7ff fd1e 	bl	d4e42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5406:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5408:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d540a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d540c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d540e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5410:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5412:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5414:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5416:	f7fe fe53 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d541a:	a804      	add	r0, sp, #16
   d541c:	f7fe fe50 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5420:	e7a2      	b.n	d5368 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5422:	bf00      	nop
   d5424:	000d54ed 	.word	0x000d54ed

000d5428 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5428:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d542a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d542c:	4605      	mov	r5, r0
	  switch (__op)
   d542e:	d007      	beq.n	d5440 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5430:	2a03      	cmp	r2, #3
   d5432:	d018      	beq.n	d5466 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5434:	2a01      	cmp	r2, #1
   d5436:	d101      	bne.n	d543c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5438:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d543a:	6003      	str	r3, [r0, #0]
	}
   d543c:	2000      	movs	r0, #0
   d543e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5440:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5442:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5444:	f7fe fe27 	bl	d4096 <_Znwj>
   d5448:	4604      	mov	r4, r0
   d544a:	b150      	cbz	r0, d5462 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d544c:	4631      	mov	r1, r6
   d544e:	f7ff fecb 	bl	d51e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5452:	6930      	ldr	r0, [r6, #16]
   d5454:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5458:	b108      	cbz	r0, d545e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d545a:	f001 fc61 	bl	d6d20 <strdup>
        type_(type) {
   d545e:	6120      	str	r0, [r4, #16]
   d5460:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5462:	602c      	str	r4, [r5, #0]
	}
   d5464:	e7ea      	b.n	d543c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5466:	6804      	ldr	r4, [r0, #0]
   d5468:	2c00      	cmp	r4, #0
   d546a:	d0e7      	beq.n	d543c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d546c:	f104 0010 	add.w	r0, r4, #16
   d5470:	f7ff fe3d 	bl	d50ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5474:	4620      	mov	r0, r4
   d5476:	f7ff fd5e 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d547a:	2118      	movs	r1, #24
   d547c:	4620      	mov	r0, r4
   d547e:	f000 fc14 	bl	d5caa <_ZdlPvj>
   d5482:	e7db      	b.n	d543c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5484 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5484:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5486:	2300      	movs	r3, #0
   d5488:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d548a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d548c:	4604      	mov	r4, r0
   d548e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5490:	b12b      	cbz	r3, d549e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5492:	2202      	movs	r2, #2
   d5494:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5496:	68eb      	ldr	r3, [r5, #12]
   d5498:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d549a:	68ab      	ldr	r3, [r5, #8]
   d549c:	60a3      	str	r3, [r4, #8]
    }
   d549e:	4620      	mov	r0, r4
   d54a0:	bd38      	pop	{r3, r4, r5, pc}

000d54a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d54a2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d54a4:	b570      	push	{r4, r5, r6, lr}
   d54a6:	4604      	mov	r4, r0
	  switch (__op)
   d54a8:	d007      	beq.n	d54ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d54aa:	2a03      	cmp	r2, #3
   d54ac:	d012      	beq.n	d54d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d54ae:	2a01      	cmp	r2, #1
   d54b0:	d101      	bne.n	d54b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d54b2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d54b4:	6003      	str	r3, [r0, #0]
	}
   d54b6:	2000      	movs	r0, #0
   d54b8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d54ba:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d54bc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d54be:	f7fe fdea 	bl	d4096 <_Znwj>
   d54c2:	4605      	mov	r5, r0
   d54c4:	b120      	cbz	r0, d54d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d54c6:	4631      	mov	r1, r6
   d54c8:	f7ff ffdc 	bl	d5484 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d54cc:	7c33      	ldrb	r3, [r6, #16]
   d54ce:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d54d0:	6025      	str	r5, [r4, #0]
	}
   d54d2:	e7f0      	b.n	d54b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d54d4:	6804      	ldr	r4, [r0, #0]
   d54d6:	2c00      	cmp	r4, #0
   d54d8:	d0ed      	beq.n	d54b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d54da:	4620      	mov	r0, r4
   d54dc:	f7ff fd2b 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d54e0:	2114      	movs	r1, #20
   d54e2:	4620      	mov	r0, r4
   d54e4:	f000 fbe1 	bl	d5caa <_ZdlPvj>
   d54e8:	e7e5      	b.n	d54b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d54ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d54ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54ee:	b089      	sub	sp, #36	; 0x24
   d54f0:	4604      	mov	r4, r0
   d54f2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d54f4:	a801      	add	r0, sp, #4
   d54f6:	4611      	mov	r1, r2
   d54f8:	f7ff fe23 	bl	d5142 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d54fc:	b1a4      	cbz	r4, d5528 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d54fe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5500:	b11d      	cbz	r5, d550a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5502:	4628      	mov	r0, r5
   d5504:	f001 fc0c 	bl	d6d20 <strdup>
   d5508:	4605      	mov	r5, r0
   d550a:	a801      	add	r0, sp, #4
   d550c:	a903      	add	r1, sp, #12
        type_(type) {
   d550e:	9503      	str	r5, [sp, #12]
   d5510:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5514:	f7ff fe78 	bl	d5208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5518:	a803      	add	r0, sp, #12
   d551a:	f7ff fde8 	bl	d50ee <_ZN8particle5ErrorD1Ev>
   d551e:	a802      	add	r0, sp, #8
   d5520:	f7fe fdce 	bl	d40c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5524:	b009      	add	sp, #36	; 0x24
   d5526:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5528:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d552a:	2301      	movs	r3, #1
   d552c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5530:	2a00      	cmp	r2, #0
   d5532:	d103      	bne.n	d553c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5534:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5538:	2900      	cmp	r1, #0
   d553a:	d1f7      	bne.n	d552c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d553c:	d1ef      	bne.n	d551e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d553e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5540:	f3bf 8f5b 	dmb	ish
   d5544:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5546:	1d2b      	adds	r3, r5, #4
   d5548:	f3bf 8f5b 	dmb	ish
   d554c:	e853 6f00 	ldrex	r6, [r3]
   d5550:	e843 4200 	strex	r2, r4, [r3]
   d5554:	2a00      	cmp	r2, #0
   d5556:	d1f9      	bne.n	d554c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5558:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d555c:	2e00      	cmp	r6, #0
   d555e:	d0de      	beq.n	d551e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5560:	4620      	mov	r0, r4
   d5562:	f7ff fa1b 	bl	d499c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5566:	4607      	mov	r7, r0
   d5568:	b160      	cbz	r0, d5584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d556a:	f105 010c 	add.w	r1, r5, #12
   d556e:	4630      	mov	r0, r6
   d5570:	f7ff fe16 	bl	d51a0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5574:	4630      	mov	r0, r6
   d5576:	f7ff fcde 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d557a:	2110      	movs	r1, #16
   d557c:	4630      	mov	r0, r6
   d557e:	f000 fb94 	bl	d5caa <_ZdlPvj>
   d5582:	e7cc      	b.n	d551e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5584:	4631      	mov	r1, r6
   d5586:	a803      	add	r0, sp, #12
   d5588:	f7ff ff7c 	bl	d5484 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d558c:	7b2b      	ldrb	r3, [r5, #12]
   d558e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5592:	2010      	movs	r0, #16
   d5594:	f7fe fd7f 	bl	d4096 <_Znwj>
   d5598:	4605      	mov	r5, r0
   d559a:	b1d0      	cbz	r0, d55d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d559c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d559e:	2014      	movs	r0, #20
   d55a0:	f7fe fd79 	bl	d4096 <_Znwj>
   d55a4:	4604      	mov	r4, r0
   d55a6:	b178      	cbz	r0, d55c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d55a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d55aa:	4601      	mov	r1, r0
   d55ac:	a803      	add	r0, sp, #12
   d55ae:	f7ff fcd1 	bl	d4f54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d55b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d55ba:	9205      	str	r2, [sp, #20]
   d55bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55be:	60e3      	str	r3, [r4, #12]
   d55c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d55c4:	9206      	str	r2, [sp, #24]
   d55c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d55c8:	4b06      	ldr	r3, [pc, #24]	; (d55e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d55ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55cc:	4b06      	ldr	r3, [pc, #24]	; (d55e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55ce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d55d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d55d2:	a803      	add	r0, sp, #12
   d55d4:	f7ff fcaf 	bl	d4f36 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55d8:	2200      	movs	r2, #0
   d55da:	4629      	mov	r1, r5
   d55dc:	4803      	ldr	r0, [pc, #12]	; (d55ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d55de:	f7ff f9e5 	bl	d49ac <application_thread_invoke>
   d55e2:	e7c7      	b.n	d5574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d55e4:	000d51b3 	.word	0x000d51b3
   d55e8:	000d54a3 	.word	0x000d54a3
   d55ec:	000d5911 	.word	0x000d5911

000d55f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d55f0:	4770      	bx	lr

000d55f2 <_ZN9IPAddressD0Ev>:
   d55f2:	b510      	push	{r4, lr}
   d55f4:	2118      	movs	r1, #24
   d55f6:	4604      	mov	r4, r0
   d55f8:	f000 fb57 	bl	d5caa <_ZdlPvj>
   d55fc:	4620      	mov	r0, r4
   d55fe:	bd10      	pop	{r4, pc}

000d5600 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5600:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5602:	7d03      	ldrb	r3, [r0, #20]
   d5604:	2b06      	cmp	r3, #6
{
   d5606:	b08d      	sub	sp, #52	; 0x34
   d5608:	460e      	mov	r6, r1
   d560a:	f100 0704 	add.w	r7, r0, #4
   d560e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5612:	d012      	beq.n	d563a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5614:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5618:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d561c:	220a      	movs	r2, #10
   d561e:	4630      	mov	r0, r6
   d5620:	f7ff fc55 	bl	d4ece <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5624:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5626:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5628:	d019      	beq.n	d565e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d562a:	2c00      	cmp	r4, #0
   d562c:	d0f4      	beq.n	d5618 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d562e:	212e      	movs	r1, #46	; 0x2e
   d5630:	4630      	mov	r0, r6
   d5632:	f7ff fc49 	bl	d4ec8 <_ZN5Print5printEc>
   d5636:	4404      	add	r4, r0
   d5638:	e7ee      	b.n	d5618 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d563a:	232f      	movs	r3, #47	; 0x2f
   d563c:	466a      	mov	r2, sp
   d563e:	4639      	mov	r1, r7
   d5640:	200a      	movs	r0, #10
		buf[0] = 0;
   d5642:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5646:	f7ff f8d1 	bl	d47ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d564a:	4668      	mov	r0, sp
   d564c:	f001 fb85 	bl	d6d5a <strlen>
   d5650:	6833      	ldr	r3, [r6, #0]
   d5652:	4602      	mov	r2, r0
   d5654:	68db      	ldr	r3, [r3, #12]
   d5656:	4669      	mov	r1, sp
   d5658:	4630      	mov	r0, r6
   d565a:	4798      	blx	r3
   d565c:	4604      	mov	r4, r0
    }
    return n;
}
   d565e:	4620      	mov	r0, r4
   d5660:	b00d      	add	sp, #52	; 0x34
   d5662:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5664 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5664:	b510      	push	{r4, lr}
   d5666:	4b05      	ldr	r3, [pc, #20]	; (d567c <_ZN9IPAddressC1Ev+0x18>)
   d5668:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d566a:	2211      	movs	r2, #17
   d566c:	f840 3b04 	str.w	r3, [r0], #4
   d5670:	2100      	movs	r1, #0
   d5672:	f001 fb29 	bl	d6cc8 <memset>
}
   d5676:	4620      	mov	r0, r4
   d5678:	bd10      	pop	{r4, pc}
   d567a:	bf00      	nop
   d567c:	000d6e08 	.word	0x000d6e08

000d5680 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5680:	4603      	mov	r3, r0
   d5682:	4a07      	ldr	r2, [pc, #28]	; (d56a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5684:	b510      	push	{r4, lr}
   d5686:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d568a:	f101 0210 	add.w	r2, r1, #16
   d568e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5692:	f843 4b04 	str.w	r4, [r3], #4
   d5696:	4291      	cmp	r1, r2
   d5698:	d1f9      	bne.n	d568e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d569a:	780a      	ldrb	r2, [r1, #0]
   d569c:	701a      	strb	r2, [r3, #0]
}
   d569e:	bd10      	pop	{r4, pc}
   d56a0:	000d6e08 	.word	0x000d6e08

000d56a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d56a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d56b6:	2304      	movs	r3, #4
   d56b8:	6041      	str	r1, [r0, #4]
   d56ba:	7503      	strb	r3, [r0, #20]
}
   d56bc:	bd10      	pop	{r4, pc}

000d56be <_ZN9IPAddressaSEPKh>:
{
   d56be:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56c0:	78cb      	ldrb	r3, [r1, #3]
   d56c2:	9300      	str	r3, [sp, #0]
   d56c4:	788b      	ldrb	r3, [r1, #2]
   d56c6:	784a      	ldrb	r2, [r1, #1]
   d56c8:	7809      	ldrb	r1, [r1, #0]
   d56ca:	f7ff ffeb 	bl	d56a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d56ce:	b002      	add	sp, #8
   d56d0:	bd10      	pop	{r4, pc}

000d56d2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56d2:	7441      	strb	r1, [r0, #17]
}
   d56d4:	4770      	bx	lr

000d56d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d56d6:	4770      	bx	lr

000d56d8 <_ZN9USBSerial4readEv>:
{
   d56d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d56da:	2100      	movs	r1, #0
   d56dc:	7c00      	ldrb	r0, [r0, #16]
   d56de:	f7ff f92d 	bl	d493c <HAL_USB_USART_Receive_Data>
}
   d56e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56e6:	bd08      	pop	{r3, pc}

000d56e8 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d56e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d56ea:	2101      	movs	r1, #1
   d56ec:	7c00      	ldrb	r0, [r0, #16]
   d56ee:	f7ff f925 	bl	d493c <HAL_USB_USART_Receive_Data>
}
   d56f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56f6:	bd08      	pop	{r3, pc}

000d56f8 <_ZN9USBSerial17availableForWriteEv>:
{
   d56f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d56fa:	7c00      	ldrb	r0, [r0, #16]
   d56fc:	f7ff f916 	bl	d492c <HAL_USB_USART_Available_Data_For_Write>
}
   d5700:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5704:	bd08      	pop	{r3, pc}

000d5706 <_ZN9USBSerial9availableEv>:
{
   d5706:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5708:	7c00      	ldrb	r0, [r0, #16]
   d570a:	f7ff f907 	bl	d491c <HAL_USB_USART_Available_Data>
}
   d570e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5712:	bd08      	pop	{r3, pc}

000d5714 <_ZN9USBSerial5writeEh>:
{
   d5714:	b513      	push	{r0, r1, r4, lr}
   d5716:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5718:	7c00      	ldrb	r0, [r0, #16]
{
   d571a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d571c:	f7ff f906 	bl	d492c <HAL_USB_USART_Available_Data_For_Write>
   d5720:	2800      	cmp	r0, #0
   d5722:	9901      	ldr	r1, [sp, #4]
   d5724:	dc01      	bgt.n	d572a <_ZN9USBSerial5writeEh+0x16>
   d5726:	7c60      	ldrb	r0, [r4, #17]
   d5728:	b120      	cbz	r0, d5734 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d572a:	7c20      	ldrb	r0, [r4, #16]
   d572c:	f7ff f90e 	bl	d494c <HAL_USB_USART_Send_Data>
   d5730:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5734:	b002      	add	sp, #8
   d5736:	bd10      	pop	{r4, pc}

000d5738 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5738:	7c00      	ldrb	r0, [r0, #16]
   d573a:	f7ff b90f 	b.w	d495c <HAL_USB_USART_Flush_Data>

000d573e <_ZN9USBSerialD0Ev>:
   d573e:	b510      	push	{r4, lr}
   d5740:	2114      	movs	r1, #20
   d5742:	4604      	mov	r4, r0
   d5744:	f000 fab1 	bl	d5caa <_ZdlPvj>
   d5748:	4620      	mov	r0, r4
   d574a:	bd10      	pop	{r4, pc}

000d574c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d574c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d574e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5752:	4604      	mov	r4, r0
   d5754:	4608      	mov	r0, r1
   d5756:	2100      	movs	r1, #0
   d5758:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d575c:	4b04      	ldr	r3, [pc, #16]	; (d5770 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d575e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5760:	2301      	movs	r3, #1
  _serial = serial;
   d5762:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5764:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5766:	4611      	mov	r1, r2
   d5768:	f7ff f8d0 	bl	d490c <HAL_USB_USART_Init>
}
   d576c:	4620      	mov	r0, r4
   d576e:	bd10      	pop	{r4, pc}
   d5770:	000d6e1c 	.word	0x000d6e1c

000d5774 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5774:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5776:	2214      	movs	r2, #20
{
   d5778:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d577a:	2100      	movs	r1, #0
   d577c:	f001 faa4 	bl	d6cc8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5780:	4620      	mov	r0, r4
   d5782:	bd10      	pop	{r4, pc}

000d5784 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5784:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5786:	4c10      	ldr	r4, [pc, #64]	; (d57c8 <_Z16_fetch_usbserialv+0x44>)
{
   d5788:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d578a:	a803      	add	r0, sp, #12
   d578c:	f7ff fff2 	bl	d5774 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5790:	7821      	ldrb	r1, [r4, #0]
   d5792:	f3bf 8f5b 	dmb	ish
   d5796:	f011 0101 	ands.w	r1, r1, #1
   d579a:	d111      	bne.n	d57c0 <_Z16_fetch_usbserialv+0x3c>
   d579c:	4620      	mov	r0, r4
   d579e:	9101      	str	r1, [sp, #4]
   d57a0:	f7fe fc7f 	bl	d40a2 <__cxa_guard_acquire>
   d57a4:	9901      	ldr	r1, [sp, #4]
   d57a6:	b158      	cbz	r0, d57c0 <_Z16_fetch_usbserialv+0x3c>
   d57a8:	aa03      	add	r2, sp, #12
   d57aa:	4808      	ldr	r0, [pc, #32]	; (d57cc <_Z16_fetch_usbserialv+0x48>)
   d57ac:	f7ff ffce 	bl	d574c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d57b0:	4620      	mov	r0, r4
   d57b2:	f7fe fc7b 	bl	d40ac <__cxa_guard_release>
   d57b6:	4a06      	ldr	r2, [pc, #24]	; (d57d0 <_Z16_fetch_usbserialv+0x4c>)
   d57b8:	4906      	ldr	r1, [pc, #24]	; (d57d4 <_Z16_fetch_usbserialv+0x50>)
   d57ba:	4804      	ldr	r0, [pc, #16]	; (d57cc <_Z16_fetch_usbserialv+0x48>)
   d57bc:	f000 fa70 	bl	d5ca0 <__aeabi_atexit>
	return _usbserial;
}
   d57c0:	4802      	ldr	r0, [pc, #8]	; (d57cc <_Z16_fetch_usbserialv+0x48>)
   d57c2:	b008      	add	sp, #32
   d57c4:	bd10      	pop	{r4, pc}
   d57c6:	bf00      	nop
   d57c8:	2003e780 	.word	0x2003e780
   d57cc:	2003e784 	.word	0x2003e784
   d57d0:	2003e720 	.word	0x2003e720
   d57d4:	000d56d7 	.word	0x000d56d7

000d57d8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d57d8:	f7fe bfd8 	b.w	d478c <HAL_Interrupts_Disable_All>

000d57dc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d57dc:	f7fe bfce 	b.w	d477c <HAL_Interrupts_Enable_All>

000d57e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d57e0:	4770      	bx	lr

000d57e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57e2:	7441      	strb	r1, [r0, #17]
}
   d57e4:	4770      	bx	lr

000d57e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d57e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d57e8:	7c00      	ldrb	r0, [r0, #16]
   d57ea:	f7ff f83f 	bl	d486c <hal_usart_available_data_for_write>
}
   d57ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57f2:	bd08      	pop	{r3, pc}

000d57f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d57f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d57f6:	7c00      	ldrb	r0, [r0, #16]
   d57f8:	f7ff f810 	bl	d481c <hal_usart_available>
}
   d57fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5800:	bd08      	pop	{r3, pc}

000d5802 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5802:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5804:	7c00      	ldrb	r0, [r0, #16]
   d5806:	f7ff f819 	bl	d483c <hal_usart_peek>
}
   d580a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d580e:	bd08      	pop	{r3, pc}

000d5810 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5810:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5812:	7c00      	ldrb	r0, [r0, #16]
   d5814:	f7ff f80a 	bl	d482c <hal_usart_read>
}
   d5818:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d581c:	bd08      	pop	{r3, pc}

000d581e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d581e:	7c00      	ldrb	r0, [r0, #16]
   d5820:	f7ff b814 	b.w	d484c <hal_usart_flush>

000d5824 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5824:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5826:	7c45      	ldrb	r5, [r0, #17]
{
   d5828:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d582a:	b12d      	cbz	r5, d5838 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d582c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d582e:	b003      	add	sp, #12
   d5830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5834:	f7fe bfea 	b.w	d480c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5838:	7c00      	ldrb	r0, [r0, #16]
   d583a:	9101      	str	r1, [sp, #4]
   d583c:	f7ff f816 	bl	d486c <hal_usart_available_data_for_write>
   d5840:	2800      	cmp	r0, #0
   d5842:	9901      	ldr	r1, [sp, #4]
   d5844:	dcf2      	bgt.n	d582c <_ZN11USARTSerial5writeEh+0x8>
}
   d5846:	4628      	mov	r0, r5
   d5848:	b003      	add	sp, #12
   d584a:	bd30      	pop	{r4, r5, pc}

000d584c <_ZN11USARTSerialD0Ev>:
   d584c:	b510      	push	{r4, lr}
   d584e:	2114      	movs	r1, #20
   d5850:	4604      	mov	r4, r0
   d5852:	f000 fa2a 	bl	d5caa <_ZdlPvj>
   d5856:	4620      	mov	r0, r4
   d5858:	bd10      	pop	{r4, pc}
	...

000d585c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d585c:	b510      	push	{r4, lr}
   d585e:	f04f 0c00 	mov.w	ip, #0
   d5862:	4604      	mov	r4, r0
   d5864:	4608      	mov	r0, r1
   d5866:	4611      	mov	r1, r2
   d5868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d586c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5870:	4a04      	ldr	r2, [pc, #16]	; (d5884 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5872:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5874:	2201      	movs	r2, #1
  _serial = serial;
   d5876:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5878:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d587a:	461a      	mov	r2, r3
   d587c:	f7fe ffbe 	bl	d47fc <hal_usart_init>
}
   d5880:	4620      	mov	r0, r4
   d5882:	bd10      	pop	{r4, pc}
   d5884:	000d6e4c 	.word	0x000d6e4c

000d5888 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d588a:	4c1b      	ldr	r4, [pc, #108]	; (d58f8 <_Z22__fetch_global_Serial1v+0x70>)
   d588c:	6826      	ldr	r6, [r4, #0]
   d588e:	b94e      	cbnz	r6, d58a4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5890:	2084      	movs	r0, #132	; 0x84
   d5892:	f7fe fc00 	bl	d4096 <_Znwj>
   d5896:	4605      	mov	r5, r0
   d5898:	b118      	cbz	r0, d58a2 <_Z22__fetch_global_Serial1v+0x1a>
   d589a:	2284      	movs	r2, #132	; 0x84
   d589c:	4631      	mov	r1, r6
   d589e:	f001 fa13 	bl	d6cc8 <memset>
   d58a2:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d58a4:	4d15      	ldr	r5, [pc, #84]	; (d58fc <_Z22__fetch_global_Serial1v+0x74>)
   d58a6:	682f      	ldr	r7, [r5, #0]
   d58a8:	b94f      	cbnz	r7, d58be <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d58aa:	2084      	movs	r0, #132	; 0x84
   d58ac:	f7fe fbf3 	bl	d4096 <_Znwj>
   d58b0:	4606      	mov	r6, r0
   d58b2:	b118      	cbz	r0, d58bc <_Z22__fetch_global_Serial1v+0x34>
   d58b4:	2284      	movs	r2, #132	; 0x84
   d58b6:	4639      	mov	r1, r7
   d58b8:	f001 fa06 	bl	d6cc8 <memset>
   d58bc:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d58be:	4e10      	ldr	r6, [pc, #64]	; (d5900 <_Z22__fetch_global_Serial1v+0x78>)
   d58c0:	7831      	ldrb	r1, [r6, #0]
   d58c2:	f3bf 8f5b 	dmb	ish
   d58c6:	f011 0101 	ands.w	r1, r1, #1
   d58ca:	d112      	bne.n	d58f2 <_Z22__fetch_global_Serial1v+0x6a>
   d58cc:	4630      	mov	r0, r6
   d58ce:	9101      	str	r1, [sp, #4]
   d58d0:	f7fe fbe7 	bl	d40a2 <__cxa_guard_acquire>
   d58d4:	9901      	ldr	r1, [sp, #4]
   d58d6:	b160      	cbz	r0, d58f2 <_Z22__fetch_global_Serial1v+0x6a>
   d58d8:	6822      	ldr	r2, [r4, #0]
   d58da:	682b      	ldr	r3, [r5, #0]
   d58dc:	4809      	ldr	r0, [pc, #36]	; (d5904 <_Z22__fetch_global_Serial1v+0x7c>)
   d58de:	f7ff ffbd 	bl	d585c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d58e2:	4630      	mov	r0, r6
   d58e4:	f7fe fbe2 	bl	d40ac <__cxa_guard_release>
   d58e8:	4a07      	ldr	r2, [pc, #28]	; (d5908 <_Z22__fetch_global_Serial1v+0x80>)
   d58ea:	4908      	ldr	r1, [pc, #32]	; (d590c <_Z22__fetch_global_Serial1v+0x84>)
   d58ec:	4805      	ldr	r0, [pc, #20]	; (d5904 <_Z22__fetch_global_Serial1v+0x7c>)
   d58ee:	f000 f9d7 	bl	d5ca0 <__aeabi_atexit>
#endif
	return serial1;
}
   d58f2:	4804      	ldr	r0, [pc, #16]	; (d5904 <_Z22__fetch_global_Serial1v+0x7c>)
   d58f4:	b003      	add	sp, #12
   d58f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58f8:	2003e79c 	.word	0x2003e79c
   d58fc:	2003e7a0 	.word	0x2003e7a0
   d5900:	2003e798 	.word	0x2003e798
   d5904:	2003e7a4 	.word	0x2003e7a4
   d5908:	2003e720 	.word	0x2003e720
   d590c:	000d57e1 	.word	0x000d57e1

000d5910 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5910:	b510      	push	{r4, lr}
      if (_M_empty())
   d5912:	6883      	ldr	r3, [r0, #8]
   d5914:	4604      	mov	r4, r0
   d5916:	b90b      	cbnz	r3, d591c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5918:	f000 f9cb 	bl	d5cb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d591c:	68c3      	ldr	r3, [r0, #12]
   d591e:	4798      	blx	r3
      if (_M_manager)
   d5920:	68a3      	ldr	r3, [r4, #8]
   d5922:	b11b      	cbz	r3, d592c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5924:	2203      	movs	r2, #3
   d5926:	4621      	mov	r1, r4
   d5928:	4620      	mov	r0, r4
   d592a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d592c:	4620      	mov	r0, r4
   d592e:	2110      	movs	r1, #16
}
   d5930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5934:	f000 b9b9 	b.w	d5caa <_ZdlPvj>

000d5938 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5938:	4770      	bx	lr

000d593a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d593a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d593c:	4606      	mov	r6, r0
   d593e:	4615      	mov	r5, r2
   d5940:	460c      	mov	r4, r1
   d5942:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5944:	42bc      	cmp	r4, r7
   d5946:	d006      	beq.n	d5956 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5948:	6833      	ldr	r3, [r6, #0]
   d594a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d594e:	689b      	ldr	r3, [r3, #8]
   d5950:	4630      	mov	r0, r6
   d5952:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5954:	e7f6      	b.n	d5944 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5956:	4628      	mov	r0, r5
   d5958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d595a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d595a:	7c00      	ldrb	r0, [r0, #16]
   d595c:	2200      	movs	r2, #0
   d595e:	f7fe bf8d 	b.w	d487c <hal_i2c_write>

000d5962 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5962:	7c00      	ldrb	r0, [r0, #16]
   d5964:	2100      	movs	r1, #0
   d5966:	f7fe bf91 	b.w	d488c <hal_i2c_available>

000d596a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d596a:	7c00      	ldrb	r0, [r0, #16]
   d596c:	2100      	movs	r1, #0
   d596e:	f7fe bf95 	b.w	d489c <hal_i2c_read>

000d5972 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5972:	7c00      	ldrb	r0, [r0, #16]
   d5974:	2100      	movs	r1, #0
   d5976:	f7fe bf99 	b.w	d48ac <hal_i2c_peek>

000d597a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d597a:	7c00      	ldrb	r0, [r0, #16]
   d597c:	2100      	movs	r1, #0
   d597e:	f7fe bf9d 	b.w	d48bc <hal_i2c_flush>

000d5982 <_ZN7TwoWireD0Ev>:
   d5982:	b510      	push	{r4, lr}
   d5984:	2114      	movs	r1, #20
   d5986:	4604      	mov	r4, r0
   d5988:	f000 f98f 	bl	d5caa <_ZdlPvj>
   d598c:	4620      	mov	r0, r4
   d598e:	bd10      	pop	{r4, pc}

000d5990 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5990:	b510      	push	{r4, lr}
   d5992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5996:	4604      	mov	r4, r0
   d5998:	4608      	mov	r0, r1
   d599a:	2100      	movs	r1, #0
   d599c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d59a0:	4b03      	ldr	r3, [pc, #12]	; (d59b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d59a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d59a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d59a6:	4611      	mov	r1, r2
   d59a8:	f7fe ff98 	bl	d48dc <hal_i2c_init>
}
   d59ac:	4620      	mov	r0, r4
   d59ae:	bd10      	pop	{r4, pc}
   d59b0:	000d6e7c 	.word	0x000d6e7c

000d59b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d59b4:	2200      	movs	r2, #0
   d59b6:	6840      	ldr	r0, [r0, #4]
   d59b8:	4611      	mov	r1, r2
   d59ba:	f7ff b82b 	b.w	d4a14 <network_ready>

000d59be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59be:	2200      	movs	r2, #0
   d59c0:	6840      	ldr	r0, [r0, #4]
   d59c2:	4611      	mov	r1, r2
   d59c4:	f7ff b846 	b.w	d4a54 <network_listening>

000d59c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d59c8:	2200      	movs	r2, #0
   d59ca:	6840      	ldr	r0, [r0, #4]
   d59cc:	4611      	mov	r1, r2
   d59ce:	f7ff b851 	b.w	d4a74 <network_get_listen_timeout>

000d59d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d59d2:	6840      	ldr	r0, [r0, #4]
   d59d4:	2200      	movs	r2, #0
   d59d6:	f7ff b845 	b.w	d4a64 <network_set_listen_timeout>

000d59da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d59da:	6840      	ldr	r0, [r0, #4]
   d59dc:	2200      	movs	r2, #0
   d59de:	f081 0101 	eor.w	r1, r1, #1
   d59e2:	f7ff b82f 	b.w	d4a44 <network_listen>

000d59e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d59e6:	2300      	movs	r3, #0
   d59e8:	6840      	ldr	r0, [r0, #4]
   d59ea:	461a      	mov	r2, r3
   d59ec:	4619      	mov	r1, r3
   d59ee:	f7ff b821 	b.w	d4a34 <network_off>

000d59f2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d59f2:	2300      	movs	r3, #0
   d59f4:	6840      	ldr	r0, [r0, #4]
   d59f6:	461a      	mov	r2, r3
   d59f8:	4619      	mov	r1, r3
   d59fa:	f7ff b813 	b.w	d4a24 <network_on>

000d59fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d59fe:	2200      	movs	r2, #0
   d5a00:	6840      	ldr	r0, [r0, #4]
   d5a02:	4611      	mov	r1, r2
   d5a04:	f7fe bff6 	b.w	d49f4 <network_connecting>

000d5a08 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a08:	6840      	ldr	r0, [r0, #4]
   d5a0a:	2200      	movs	r2, #0
   d5a0c:	2102      	movs	r1, #2
   d5a0e:	f7fe bff9 	b.w	d4a04 <network_disconnect>

000d5a12 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5a12:	2300      	movs	r3, #0
   d5a14:	6840      	ldr	r0, [r0, #4]
   d5a16:	461a      	mov	r2, r3
   d5a18:	f7fe bfe4 	b.w	d49e4 <network_connect>

000d5a1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5a1c:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5a1e:	2204      	movs	r2, #4
   d5a20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5a22:	4a02      	ldr	r2, [pc, #8]	; (d5a2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5a24:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5a26:	4770      	bx	lr
   d5a28:	2003e7b8 	.word	0x2003e7b8
   d5a2c:	000d6ea4 	.word	0x000d6ea4

000d5a30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5a30:	2300      	movs	r3, #0
   d5a32:	6840      	ldr	r0, [r0, #4]
   d5a34:	461a      	mov	r2, r3
   d5a36:	f7fe bfd5 	b.w	d49e4 <network_connect>

000d5a3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5a3a:	6840      	ldr	r0, [r0, #4]
   d5a3c:	2200      	movs	r2, #0
   d5a3e:	2102      	movs	r1, #2
   d5a40:	f7fe bfe0 	b.w	d4a04 <network_disconnect>

000d5a44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5a44:	2200      	movs	r2, #0
   d5a46:	6840      	ldr	r0, [r0, #4]
   d5a48:	4611      	mov	r1, r2
   d5a4a:	f7fe bfd3 	b.w	d49f4 <network_connecting>

000d5a4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5a4e:	2200      	movs	r2, #0
   d5a50:	6840      	ldr	r0, [r0, #4]
   d5a52:	4611      	mov	r1, r2
   d5a54:	f7fe bfde 	b.w	d4a14 <network_ready>

000d5a58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5a58:	2300      	movs	r3, #0
   d5a5a:	6840      	ldr	r0, [r0, #4]
   d5a5c:	461a      	mov	r2, r3
   d5a5e:	4619      	mov	r1, r3
   d5a60:	f7fe bfe0 	b.w	d4a24 <network_on>

000d5a64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5a64:	2300      	movs	r3, #0
   d5a66:	6840      	ldr	r0, [r0, #4]
   d5a68:	461a      	mov	r2, r3
   d5a6a:	4619      	mov	r1, r3
   d5a6c:	f7fe bfe2 	b.w	d4a34 <network_off>

000d5a70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5a70:	6840      	ldr	r0, [r0, #4]
   d5a72:	2200      	movs	r2, #0
   d5a74:	f081 0101 	eor.w	r1, r1, #1
   d5a78:	f7fe bfe4 	b.w	d4a44 <network_listen>

000d5a7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5a7c:	6840      	ldr	r0, [r0, #4]
   d5a7e:	2200      	movs	r2, #0
   d5a80:	f7fe bff0 	b.w	d4a64 <network_set_listen_timeout>

000d5a84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5a84:	2200      	movs	r2, #0
   d5a86:	6840      	ldr	r0, [r0, #4]
   d5a88:	4611      	mov	r1, r2
   d5a8a:	f7fe bff3 	b.w	d4a74 <network_get_listen_timeout>

000d5a8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a8e:	2200      	movs	r2, #0
   d5a90:	6840      	ldr	r0, [r0, #4]
   d5a92:	4611      	mov	r1, r2
   d5a94:	f7fe bfde 	b.w	d4a54 <network_listening>

000d5a98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a9c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5a9e:	b095      	sub	sp, #84	; 0x54
   d5aa0:	4616      	mov	r6, r2
   d5aa2:	460d      	mov	r5, r1
   d5aa4:	4607      	mov	r7, r0
    IPAddress addr;
   d5aa6:	f7ff fddd 	bl	d5664 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5aaa:	4621      	mov	r1, r4
   d5aac:	2218      	movs	r2, #24
   d5aae:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5ab0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5ab2:	f001 f909 	bl	d6cc8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5ab6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5ab8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5abc:	4621      	mov	r1, r4
   d5abe:	466b      	mov	r3, sp
   d5ac0:	aa0c      	add	r2, sp, #48	; 0x30
   d5ac2:	4630      	mov	r0, r6
   d5ac4:	f7fe fe42 	bl	d474c <netdb_getaddrinfo>
    if (!r) {
   d5ac8:	4604      	mov	r4, r0
   d5aca:	2800      	cmp	r0, #0
   d5acc:	d146      	bne.n	d5b5c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ace:	4602      	mov	r2, r0
   d5ad0:	2101      	movs	r1, #1
   d5ad2:	6868      	ldr	r0, [r5, #4]
   d5ad4:	f7fe ff9e 	bl	d4a14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ad8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ada:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5adc:	4622      	mov	r2, r4
   d5ade:	6868      	ldr	r0, [r5, #4]
   d5ae0:	f7fe ff98 	bl	d4a14 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ae4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ae6:	4681      	mov	r9, r0
        bool ok = false;
   d5ae8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5aea:	2e00      	cmp	r6, #0
   d5aec:	d036      	beq.n	d5b5c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5aee:	2900      	cmp	r1, #0
   d5af0:	d134      	bne.n	d5b5c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5af2:	6873      	ldr	r3, [r6, #4]
   d5af4:	2b02      	cmp	r3, #2
   d5af6:	d003      	beq.n	d5b00 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5af8:	2b0a      	cmp	r3, #10
   d5afa:	d00b      	beq.n	d5b14 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5afc:	69f6      	ldr	r6, [r6, #28]
   d5afe:	e7f4      	b.n	d5aea <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5b00:	f1b8 0f00 	cmp.w	r8, #0
   d5b04:	d004      	beq.n	d5b10 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5b06:	6971      	ldr	r1, [r6, #20]
   d5b08:	4638      	mov	r0, r7
   d5b0a:	3104      	adds	r1, #4
   d5b0c:	f7ff fdd7 	bl	d56be <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5b10:	4641      	mov	r1, r8
   d5b12:	e7f3      	b.n	d5afc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5b14:	f1b9 0f00 	cmp.w	r9, #0
   d5b18:	d101      	bne.n	d5b1e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5b1a:	4649      	mov	r1, r9
   d5b1c:	e7ee      	b.n	d5afc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5b1e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5b20:	2210      	movs	r2, #16
   d5b22:	a801      	add	r0, sp, #4
   d5b24:	f001 f8d0 	bl	d6cc8 <memset>
                    a.v = 6;
   d5b28:	2306      	movs	r3, #6
   d5b2a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b2e:	ad01      	add	r5, sp, #4
   d5b30:	f104 0308 	add.w	r3, r4, #8
   d5b34:	3418      	adds	r4, #24
   d5b36:	6818      	ldr	r0, [r3, #0]
   d5b38:	6859      	ldr	r1, [r3, #4]
   d5b3a:	462a      	mov	r2, r5
   d5b3c:	c203      	stmia	r2!, {r0, r1}
   d5b3e:	3308      	adds	r3, #8
   d5b40:	42a3      	cmp	r3, r4
   d5b42:	4615      	mov	r5, r2
   d5b44:	d1f7      	bne.n	d5b36 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5b46:	a901      	add	r1, sp, #4
   d5b48:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5b4a:	ad07      	add	r5, sp, #28
   d5b4c:	f7ff fd98 	bl	d5680 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b52:	1d3c      	adds	r4, r7, #4
   d5b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b56:	682b      	ldr	r3, [r5, #0]
   d5b58:	7023      	strb	r3, [r4, #0]
   d5b5a:	e7de      	b.n	d5b1a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5b5c:	9800      	ldr	r0, [sp, #0]
   d5b5e:	f7fe fded 	bl	d473c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5b62:	4638      	mov	r0, r7
   d5b64:	b015      	add	sp, #84	; 0x54
   d5b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5b6c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5b6c:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5b6e:	4a03      	ldr	r2, [pc, #12]	; (d5b7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5b70:	601a      	str	r2, [r3, #0]
   d5b72:	2200      	movs	r2, #0
   d5b74:	605a      	str	r2, [r3, #4]

} // spark
   d5b76:	4770      	bx	lr
   d5b78:	2003e7c0 	.word	0x2003e7c0
   d5b7c:	000d6ed8 	.word	0x000d6ed8

000d5b80 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5b80:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5b82:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5b84:	d902      	bls.n	d5b8c <pinAvailable+0xc>
    return false;
   d5b86:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5b88:	b002      	add	sp, #8
   d5b8a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5b8c:	f1a0 030b 	sub.w	r3, r0, #11
   d5b90:	2b02      	cmp	r3, #2
   d5b92:	d81a      	bhi.n	d5bca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5b94:	4c17      	ldr	r4, [pc, #92]	; (d5bf4 <pinAvailable+0x74>)
   d5b96:	7821      	ldrb	r1, [r4, #0]
   d5b98:	f3bf 8f5b 	dmb	ish
   d5b9c:	f011 0101 	ands.w	r1, r1, #1
   d5ba0:	d10b      	bne.n	d5bba <pinAvailable+0x3a>
   d5ba2:	4620      	mov	r0, r4
   d5ba4:	9101      	str	r1, [sp, #4]
   d5ba6:	f7fe fa7c 	bl	d40a2 <__cxa_guard_acquire>
   d5baa:	9901      	ldr	r1, [sp, #4]
   d5bac:	b128      	cbz	r0, d5bba <pinAvailable+0x3a>
   d5bae:	4812      	ldr	r0, [pc, #72]	; (d5bf8 <pinAvailable+0x78>)
   d5bb0:	f7fe fff6 	bl	d4ba0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	f7fe fa79 	bl	d40ac <__cxa_guard_release>
   d5bba:	4b0f      	ldr	r3, [pc, #60]	; (d5bf8 <pinAvailable+0x78>)
   d5bbc:	7818      	ldrb	r0, [r3, #0]
   d5bbe:	f7fe fe9d 	bl	d48fc <hal_spi_is_enabled>
   d5bc2:	2800      	cmp	r0, #0
   d5bc4:	d1df      	bne.n	d5b86 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5bc6:	2001      	movs	r0, #1
   d5bc8:	e7de      	b.n	d5b88 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5bca:	2801      	cmp	r0, #1
   d5bcc:	d809      	bhi.n	d5be2 <pinAvailable+0x62>
   d5bce:	f000 f83f 	bl	d5c50 <_Z19__fetch_global_Wirev>
   d5bd2:	2100      	movs	r1, #0
   d5bd4:	7c00      	ldrb	r0, [r0, #16]
   d5bd6:	f7fe fe79 	bl	d48cc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5bda:	f080 0001 	eor.w	r0, r0, #1
   d5bde:	b2c0      	uxtb	r0, r0
   d5be0:	e7d2      	b.n	d5b88 <pinAvailable+0x8>
   d5be2:	3809      	subs	r0, #9
   d5be4:	2801      	cmp	r0, #1
   d5be6:	d8ee      	bhi.n	d5bc6 <pinAvailable+0x46>
   d5be8:	f7ff fe4e 	bl	d5888 <_Z22__fetch_global_Serial1v>
   d5bec:	7c00      	ldrb	r0, [r0, #16]
   d5bee:	f7fe fe35 	bl	d485c <hal_usart_is_enabled>
   d5bf2:	e7f2      	b.n	d5bda <pinAvailable+0x5a>
   d5bf4:	2003e7c8 	.word	0x2003e7c8
   d5bf8:	2003e7cc 	.word	0x2003e7cc

000d5bfc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5bfc:	2823      	cmp	r0, #35	; 0x23
{
   d5bfe:	b538      	push	{r3, r4, r5, lr}
   d5c00:	4604      	mov	r4, r0
   d5c02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5c04:	d80a      	bhi.n	d5c1c <pinMode+0x20>
   d5c06:	29ff      	cmp	r1, #255	; 0xff
   d5c08:	d008      	beq.n	d5c1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5c0a:	f7ff ffb9 	bl	d5b80 <pinAvailable>
   d5c0e:	b128      	cbz	r0, d5c1c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5c10:	4629      	mov	r1, r5
   d5c12:	4620      	mov	r0, r4
}
   d5c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5c18:	f7fe bda8 	b.w	d476c <HAL_Pin_Mode>
}
   d5c1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c20 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5c20:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5c22:	2300      	movs	r3, #0
   d5c24:	2520      	movs	r5, #32
   d5c26:	8043      	strh	r3, [r0, #2]
   d5c28:	2314      	movs	r3, #20
{
   d5c2a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5c2c:	8003      	strh	r3, [r0, #0]
   d5c2e:	6085      	str	r5, [r0, #8]
   d5c30:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c32:	4906      	ldr	r1, [pc, #24]	; (d5c4c <_Z17acquireWireBufferv+0x2c>)
   d5c34:	4628      	mov	r0, r5
   d5c36:	f000 f83a 	bl	d5cae <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c3a:	4904      	ldr	r1, [pc, #16]	; (d5c4c <_Z17acquireWireBufferv+0x2c>)
	};
   d5c3c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c3e:	4628      	mov	r0, r5
   d5c40:	f000 f835 	bl	d5cae <_ZnajRKSt9nothrow_t>
	};
   d5c44:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5c46:	4620      	mov	r0, r4
   d5c48:	bd38      	pop	{r3, r4, r5, pc}
   d5c4a:	bf00      	nop
   d5c4c:	000d6f04 	.word	0x000d6f04

000d5c50 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5c50:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c52:	4d0f      	ldr	r5, [pc, #60]	; (d5c90 <_Z19__fetch_global_Wirev+0x40>)
   d5c54:	7829      	ldrb	r1, [r5, #0]
   d5c56:	f3bf 8f5b 	dmb	ish
   d5c5a:	f011 0401 	ands.w	r4, r1, #1
{
   d5c5e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c60:	d113      	bne.n	d5c8a <_Z19__fetch_global_Wirev+0x3a>
   d5c62:	4628      	mov	r0, r5
   d5c64:	f7fe fa1d 	bl	d40a2 <__cxa_guard_acquire>
   d5c68:	b178      	cbz	r0, d5c8a <_Z19__fetch_global_Wirev+0x3a>
   d5c6a:	a801      	add	r0, sp, #4
   d5c6c:	f7ff ffd8 	bl	d5c20 <_Z17acquireWireBufferv>
   d5c70:	aa01      	add	r2, sp, #4
   d5c72:	4621      	mov	r1, r4
   d5c74:	4807      	ldr	r0, [pc, #28]	; (d5c94 <_Z19__fetch_global_Wirev+0x44>)
   d5c76:	f7ff fe8b 	bl	d5990 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5c7a:	4628      	mov	r0, r5
   d5c7c:	f7fe fa16 	bl	d40ac <__cxa_guard_release>
   d5c80:	4a05      	ldr	r2, [pc, #20]	; (d5c98 <_Z19__fetch_global_Wirev+0x48>)
   d5c82:	4906      	ldr	r1, [pc, #24]	; (d5c9c <_Z19__fetch_global_Wirev+0x4c>)
   d5c84:	4803      	ldr	r0, [pc, #12]	; (d5c94 <_Z19__fetch_global_Wirev+0x44>)
   d5c86:	f000 f80b 	bl	d5ca0 <__aeabi_atexit>
	return wire;
}
   d5c8a:	4802      	ldr	r0, [pc, #8]	; (d5c94 <_Z19__fetch_global_Wirev+0x44>)
   d5c8c:	b007      	add	sp, #28
   d5c8e:	bd30      	pop	{r4, r5, pc}
   d5c90:	2003e7d8 	.word	0x2003e7d8
   d5c94:	2003e7dc 	.word	0x2003e7dc
   d5c98:	2003e720 	.word	0x2003e720
   d5c9c:	000d5939 	.word	0x000d5939

000d5ca0 <__aeabi_atexit>:
   d5ca0:	460b      	mov	r3, r1
   d5ca2:	4601      	mov	r1, r0
   d5ca4:	4618      	mov	r0, r3
   d5ca6:	f000 bff3 	b.w	d6c90 <__cxa_atexit>

000d5caa <_ZdlPvj>:
   d5caa:	f7fe b9f8 	b.w	d409e <_ZdlPv>

000d5cae <_ZnajRKSt9nothrow_t>:
   d5cae:	f7fe b9f4 	b.w	d409a <_Znaj>

000d5cb2 <_ZSt25__throw_bad_function_callv>:
   d5cb2:	b508      	push	{r3, lr}
   d5cb4:	f7fe ff16 	bl	d4ae4 <abort>

000d5cb8 <logf>:
   d5cb8:	b510      	push	{r4, lr}
   d5cba:	ed2d 8b02 	vpush	{d8}
   d5cbe:	b08a      	sub	sp, #40	; 0x28
   d5cc0:	eeb0 8a40 	vmov.f32	s16, s0
   d5cc4:	f000 f87a 	bl	d5dbc <__ieee754_logf>
   d5cc8:	4b37      	ldr	r3, [pc, #220]	; (d5da8 <logf+0xf0>)
   d5cca:	f993 4000 	ldrsb.w	r4, [r3]
   d5cce:	1c63      	adds	r3, r4, #1
   d5cd0:	d033      	beq.n	d5d3a <logf+0x82>
   d5cd2:	eeb4 8a48 	vcmp.f32	s16, s16
   d5cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5cda:	d62e      	bvs.n	d5d3a <logf+0x82>
   d5cdc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d5ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5ce4:	dc29      	bgt.n	d5d3a <logf+0x82>
   d5ce6:	4b31      	ldr	r3, [pc, #196]	; (d5dac <logf+0xf4>)
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	ee18 0a10 	vmov	r0, s16
   d5cee:	2300      	movs	r3, #0
   d5cf0:	9308      	str	r3, [sp, #32]
   d5cf2:	f000 fad1 	bl	d6298 <__aeabi_f2d>
   d5cf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d5cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5cfe:	b304      	cbz	r4, d5d42 <logf+0x8a>
   d5d00:	4b2b      	ldr	r3, [pc, #172]	; (d5db0 <logf+0xf8>)
   d5d02:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5d06:	2200      	movs	r2, #0
   d5d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5d0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5d10:	d141      	bne.n	d5d96 <logf+0xde>
   d5d12:	2302      	movs	r3, #2
   d5d14:	429c      	cmp	r4, r3
   d5d16:	9300      	str	r3, [sp, #0]
   d5d18:	d137      	bne.n	d5d8a <logf+0xd2>
   d5d1a:	f7fe fef3 	bl	d4b04 <__errno>
   d5d1e:	2322      	movs	r3, #34	; 0x22
   d5d20:	6003      	str	r3, [r0, #0]
   d5d22:	9b08      	ldr	r3, [sp, #32]
   d5d24:	b32b      	cbz	r3, d5d72 <logf+0xba>
   d5d26:	f7fe feed 	bl	d4b04 <__errno>
   d5d2a:	9b08      	ldr	r3, [sp, #32]
   d5d2c:	6003      	str	r3, [r0, #0]
   d5d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d5d32:	f000 fdc3 	bl	d68bc <__aeabi_d2f>
   d5d36:	ee00 0a10 	vmov	s0, r0
   d5d3a:	b00a      	add	sp, #40	; 0x28
   d5d3c:	ecbd 8b02 	vpop	{d8}
   d5d40:	bd10      	pop	{r4, pc}
   d5d42:	4b1c      	ldr	r3, [pc, #112]	; (d5db4 <logf+0xfc>)
   d5d44:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5d48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5d50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5d54:	d017      	beq.n	d5d86 <logf+0xce>
   d5d56:	2301      	movs	r3, #1
   d5d58:	9300      	str	r3, [sp, #0]
   d5d5a:	4668      	mov	r0, sp
   d5d5c:	f000 f92e 	bl	d5fbc <matherr>
   d5d60:	b1e8      	cbz	r0, d5d9e <logf+0xe6>
   d5d62:	4815      	ldr	r0, [pc, #84]	; (d5db8 <logf+0x100>)
   d5d64:	f000 f92c 	bl	d5fc0 <nan>
   d5d68:	ed8d 0b06 	vstr	d0, [sp, #24]
   d5d6c:	9b08      	ldr	r3, [sp, #32]
   d5d6e:	2b00      	cmp	r3, #0
   d5d70:	d1d9      	bne.n	d5d26 <logf+0x6e>
   d5d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d5d76:	f000 fda1 	bl	d68bc <__aeabi_d2f>
   d5d7a:	ee00 0a10 	vmov	s0, r0
   d5d7e:	b00a      	add	sp, #40	; 0x28
   d5d80:	ecbd 8b02 	vpop	{d8}
   d5d84:	bd10      	pop	{r4, pc}
   d5d86:	2302      	movs	r3, #2
   d5d88:	9300      	str	r3, [sp, #0]
   d5d8a:	4668      	mov	r0, sp
   d5d8c:	f000 f916 	bl	d5fbc <matherr>
   d5d90:	2800      	cmp	r0, #0
   d5d92:	d1eb      	bne.n	d5d6c <logf+0xb4>
   d5d94:	e7c1      	b.n	d5d1a <logf+0x62>
   d5d96:	2301      	movs	r3, #1
   d5d98:	2c02      	cmp	r4, #2
   d5d9a:	9300      	str	r3, [sp, #0]
   d5d9c:	d1dd      	bne.n	d5d5a <logf+0xa2>
   d5d9e:	f7fe feb1 	bl	d4b04 <__errno>
   d5da2:	2321      	movs	r3, #33	; 0x21
   d5da4:	6003      	str	r3, [r0, #0]
   d5da6:	e7dc      	b.n	d5d62 <logf+0xaa>
   d5da8:	2003e6b8 	.word	0x2003e6b8
   d5dac:	000d6f08 	.word	0x000d6f08
   d5db0:	fff00000 	.word	0xfff00000
   d5db4:	c7efffff 	.word	0xc7efffff
   d5db8:	000d6f0c 	.word	0x000d6f0c

000d5dbc <__ieee754_logf>:
   d5dbc:	ee10 3a10 	vmov	r3, s0
   d5dc0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   d5dc4:	d02d      	beq.n	d5e22 <__ieee754_logf+0x66>
   d5dc6:	2b00      	cmp	r3, #0
   d5dc8:	db32      	blt.n	d5e30 <__ieee754_logf+0x74>
   d5dca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d5dce:	da3f      	bge.n	d5e50 <__ieee754_logf+0x94>
   d5dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   d5dd4:	b430      	push	{r4, r5}
   d5dd6:	db32      	blt.n	d5e3e <__ieee754_logf+0x82>
   d5dd8:	2500      	movs	r5, #0
   d5dda:	4868      	ldr	r0, [pc, #416]	; (d5f7c <__ieee754_logf+0x1c0>)
   d5ddc:	4c68      	ldr	r4, [pc, #416]	; (d5f80 <__ieee754_logf+0x1c4>)
   d5dde:	f3c3 0116 	ubfx	r1, r3, #0, #23
   d5de2:	4408      	add	r0, r1
   d5de4:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   d5de8:	15db      	asrs	r3, r3, #23
   d5dea:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   d5dee:	3b7f      	subs	r3, #127	; 0x7f
   d5df0:	430a      	orrs	r2, r1
   d5df2:	442b      	add	r3, r5
   d5df4:	ee00 2a10 	vmov	s0, r2
   d5df8:	f101 050f 	add.w	r5, r1, #15
   d5dfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d5e00:	402c      	ands	r4, r5
   d5e02:	ee30 0a67 	vsub.f32	s0, s0, s15
   d5e06:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   d5e0a:	bb24      	cbnz	r4, d5e56 <__ieee754_logf+0x9a>
   d5e0c:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d5e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5e14:	d161      	bne.n	d5eda <__ieee754_logf+0x11e>
   d5e16:	2b00      	cmp	r3, #0
   d5e18:	f040 8093 	bne.w	d5f42 <__ieee754_logf+0x186>
   d5e1c:	ed9f 0a59 	vldr	s0, [pc, #356]	; d5f84 <__ieee754_logf+0x1c8>
   d5e20:	e059      	b.n	d5ed6 <__ieee754_logf+0x11a>
   d5e22:	ed9f 7a59 	vldr	s14, [pc, #356]	; d5f88 <__ieee754_logf+0x1cc>
   d5e26:	eddf 7a57 	vldr	s15, [pc, #348]	; d5f84 <__ieee754_logf+0x1c8>
   d5e2a:	ee87 0a27 	vdiv.f32	s0, s14, s15
   d5e2e:	4770      	bx	lr
   d5e30:	ee70 7a40 	vsub.f32	s15, s0, s0
   d5e34:	ed9f 7a53 	vldr	s14, [pc, #332]	; d5f84 <__ieee754_logf+0x1c8>
   d5e38:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5e3c:	4770      	bx	lr
   d5e3e:	eddf 7a53 	vldr	s15, [pc, #332]	; d5f8c <__ieee754_logf+0x1d0>
   d5e42:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5e46:	f06f 0518 	mvn.w	r5, #24
   d5e4a:	ee17 3a90 	vmov	r3, s15
   d5e4e:	e7c4      	b.n	d5dda <__ieee754_logf+0x1e>
   d5e50:	ee30 0a00 	vadd.f32	s0, s0, s0
   d5e54:	4770      	bx	lr
   d5e56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5e5a:	ee30 7a07 	vadd.f32	s14, s0, s14
   d5e5e:	ed9f 3a4c 	vldr	s6, [pc, #304]	; d5f90 <__ieee754_logf+0x1d4>
   d5e62:	eddf 4a4c 	vldr	s9, [pc, #304]	; d5f94 <__ieee754_logf+0x1d8>
   d5e66:	eddf 5a4c 	vldr	s11, [pc, #304]	; d5f98 <__ieee754_logf+0x1dc>
   d5e6a:	eddf 3a4c 	vldr	s7, [pc, #304]	; d5f9c <__ieee754_logf+0x1e0>
   d5e6e:	ed9f 5a4c 	vldr	s10, [pc, #304]	; d5fa0 <__ieee754_logf+0x1e4>
   d5e72:	eddf 7a4c 	vldr	s15, [pc, #304]	; d5fa4 <__ieee754_logf+0x1e8>
   d5e76:	eddf 6a4c 	vldr	s13, [pc, #304]	; d5fa8 <__ieee754_logf+0x1ec>
   d5e7a:	484c      	ldr	r0, [pc, #304]	; (d5fac <__ieee754_logf+0x1f0>)
   d5e7c:	ee80 4a07 	vdiv.f32	s8, s0, s14
   d5e80:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   d5e84:	4408      	add	r0, r1
   d5e86:	f502 7222 	add.w	r2, r2, #648	; 0x288
   d5e8a:	4302      	orrs	r2, r0
   d5e8c:	2a00      	cmp	r2, #0
   d5e8e:	ee07 3a10 	vmov	s14, r3
   d5e92:	ee24 6a04 	vmul.f32	s12, s8, s8
   d5e96:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   d5e9a:	ee26 7a06 	vmul.f32	s14, s12, s12
   d5e9e:	eee7 4a03 	vfma.f32	s9, s14, s6
   d5ea2:	eea7 5a23 	vfma.f32	s10, s14, s7
   d5ea6:	eee4 5a87 	vfma.f32	s11, s9, s14
   d5eaa:	eee5 6a07 	vfma.f32	s13, s10, s14
   d5eae:	eee5 7a87 	vfma.f32	s15, s11, s14
   d5eb2:	ee67 7a86 	vmul.f32	s15, s15, s12
   d5eb6:	eee6 7a87 	vfma.f32	s15, s13, s14
   d5eba:	dd2b      	ble.n	d5f14 <__ieee754_logf+0x158>
   d5ebc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d5ec0:	ee20 7a07 	vmul.f32	s14, s0, s14
   d5ec4:	ee27 7a00 	vmul.f32	s14, s14, s0
   d5ec8:	bb53      	cbnz	r3, d5f20 <__ieee754_logf+0x164>
   d5eca:	ee77 7a87 	vadd.f32	s15, s15, s14
   d5ece:	eea7 7ac4 	vfms.f32	s14, s15, s8
   d5ed2:	ee30 0a47 	vsub.f32	s0, s0, s14
   d5ed6:	bc30      	pop	{r4, r5}
   d5ed8:	4770      	bx	lr
   d5eda:	eddf 7a35 	vldr	s15, [pc, #212]	; d5fb0 <__ieee754_logf+0x1f4>
   d5ede:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d5ee2:	eea0 7a67 	vfms.f32	s14, s0, s15
   d5ee6:	eef0 7a47 	vmov.f32	s15, s14
   d5eea:	ee20 7a00 	vmul.f32	s14, s0, s0
   d5eee:	ee27 7a27 	vmul.f32	s14, s14, s15
   d5ef2:	2b00      	cmp	r3, #0
   d5ef4:	d0ed      	beq.n	d5ed2 <__ieee754_logf+0x116>
   d5ef6:	ee07 3a90 	vmov	s15, r3
   d5efa:	ed9f 6a2e 	vldr	s12, [pc, #184]	; d5fb4 <__ieee754_logf+0x1f8>
   d5efe:	eddf 6a2e 	vldr	s13, [pc, #184]	; d5fb8 <__ieee754_logf+0x1fc>
   d5f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5f06:	eea7 7ac6 	vfms.f32	s14, s15, s12
   d5f0a:	ee37 0a40 	vsub.f32	s0, s14, s0
   d5f0e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   d5f12:	e7e0      	b.n	d5ed6 <__ieee754_logf+0x11a>
   d5f14:	bb13      	cbnz	r3, d5f5c <__ieee754_logf+0x1a0>
   d5f16:	ee70 7a67 	vsub.f32	s15, s0, s15
   d5f1a:	eea7 0ac4 	vfms.f32	s0, s15, s8
   d5f1e:	e7da      	b.n	d5ed6 <__ieee754_logf+0x11a>
   d5f20:	eddf 6a24 	vldr	s13, [pc, #144]	; d5fb4 <__ieee754_logf+0x1f8>
   d5f24:	ed9f 6a24 	vldr	s12, [pc, #144]	; d5fb8 <__ieee754_logf+0x1fc>
   d5f28:	ee77 7a87 	vadd.f32	s15, s15, s14
   d5f2c:	ee62 6aa6 	vmul.f32	s13, s5, s13
   d5f30:	eee7 6a84 	vfma.f32	s13, s15, s8
   d5f34:	ee37 7a66 	vsub.f32	s14, s14, s13
   d5f38:	ee37 0a40 	vsub.f32	s0, s14, s0
   d5f3c:	ee92 0a86 	vfnms.f32	s0, s5, s12
   d5f40:	e7c9      	b.n	d5ed6 <__ieee754_logf+0x11a>
   d5f42:	ee07 3a90 	vmov	s15, r3
   d5f46:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d5fb4 <__ieee754_logf+0x1f8>
   d5f4a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d5fb8 <__ieee754_logf+0x1fc>
   d5f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5f52:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5f56:	eea7 0a87 	vfma.f32	s0, s15, s14
   d5f5a:	e7bc      	b.n	d5ed6 <__ieee754_logf+0x11a>
   d5f5c:	ed9f 7a15 	vldr	s14, [pc, #84]	; d5fb4 <__ieee754_logf+0x1f8>
   d5f60:	eddf 6a15 	vldr	s13, [pc, #84]	; d5fb8 <__ieee754_logf+0x1fc>
   d5f64:	ee70 7a67 	vsub.f32	s15, s0, s15
   d5f68:	ee27 7a62 	vnmul.f32	s14, s14, s5
   d5f6c:	eea7 7a84 	vfma.f32	s14, s15, s8
   d5f70:	ee37 0a40 	vsub.f32	s0, s14, s0
   d5f74:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   d5f78:	e7ad      	b.n	d5ed6 <__ieee754_logf+0x11a>
   d5f7a:	bf00      	nop
   d5f7c:	004afb20 	.word	0x004afb20
   d5f80:	007ffff0 	.word	0x007ffff0
   d5f84:	00000000 	.word	0x00000000
   d5f88:	cc000000 	.word	0xcc000000
   d5f8c:	4c000000 	.word	0x4c000000
   d5f90:	3e178897 	.word	0x3e178897
   d5f94:	3e3a3325 	.word	0x3e3a3325
   d5f98:	3e924925 	.word	0x3e924925
   d5f9c:	3e1cd04f 	.word	0x3e1cd04f
   d5fa0:	3e638e29 	.word	0x3e638e29
   d5fa4:	3f2aaaab 	.word	0x3f2aaaab
   d5fa8:	3ecccccd 	.word	0x3ecccccd
   d5fac:	ffcf5c30 	.word	0xffcf5c30
   d5fb0:	3eaaaaab 	.word	0x3eaaaaab
   d5fb4:	3717f7d1 	.word	0x3717f7d1
   d5fb8:	3f317180 	.word	0x3f317180

000d5fbc <matherr>:
   d5fbc:	2000      	movs	r0, #0
   d5fbe:	4770      	bx	lr

000d5fc0 <nan>:
   d5fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d5fc8 <nan+0x8>
   d5fc4:	4770      	bx	lr
   d5fc6:	bf00      	nop
   d5fc8:	00000000 	.word	0x00000000
   d5fcc:	7ff80000 	.word	0x7ff80000

000d5fd0 <__aeabi_drsub>:
   d5fd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5fd4:	e002      	b.n	d5fdc <__adddf3>
   d5fd6:	bf00      	nop

000d5fd8 <__aeabi_dsub>:
   d5fd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5fdc <__adddf3>:
   d5fdc:	b530      	push	{r4, r5, lr}
   d5fde:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5fe2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5fe6:	ea94 0f05 	teq	r4, r5
   d5fea:	bf08      	it	eq
   d5fec:	ea90 0f02 	teqeq	r0, r2
   d5ff0:	bf1f      	itttt	ne
   d5ff2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5ff6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5ffa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5ffe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6002:	f000 80e2 	beq.w	d61ca <__adddf3+0x1ee>
   d6006:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d600a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d600e:	bfb8      	it	lt
   d6010:	426d      	neglt	r5, r5
   d6012:	dd0c      	ble.n	d602e <__adddf3+0x52>
   d6014:	442c      	add	r4, r5
   d6016:	ea80 0202 	eor.w	r2, r0, r2
   d601a:	ea81 0303 	eor.w	r3, r1, r3
   d601e:	ea82 0000 	eor.w	r0, r2, r0
   d6022:	ea83 0101 	eor.w	r1, r3, r1
   d6026:	ea80 0202 	eor.w	r2, r0, r2
   d602a:	ea81 0303 	eor.w	r3, r1, r3
   d602e:	2d36      	cmp	r5, #54	; 0x36
   d6030:	bf88      	it	hi
   d6032:	bd30      	pophi	{r4, r5, pc}
   d6034:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6038:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d603c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6040:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6044:	d002      	beq.n	d604c <__adddf3+0x70>
   d6046:	4240      	negs	r0, r0
   d6048:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d604c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6050:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6054:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6058:	d002      	beq.n	d6060 <__adddf3+0x84>
   d605a:	4252      	negs	r2, r2
   d605c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6060:	ea94 0f05 	teq	r4, r5
   d6064:	f000 80a7 	beq.w	d61b6 <__adddf3+0x1da>
   d6068:	f1a4 0401 	sub.w	r4, r4, #1
   d606c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6070:	db0d      	blt.n	d608e <__adddf3+0xb2>
   d6072:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6076:	fa22 f205 	lsr.w	r2, r2, r5
   d607a:	1880      	adds	r0, r0, r2
   d607c:	f141 0100 	adc.w	r1, r1, #0
   d6080:	fa03 f20e 	lsl.w	r2, r3, lr
   d6084:	1880      	adds	r0, r0, r2
   d6086:	fa43 f305 	asr.w	r3, r3, r5
   d608a:	4159      	adcs	r1, r3
   d608c:	e00e      	b.n	d60ac <__adddf3+0xd0>
   d608e:	f1a5 0520 	sub.w	r5, r5, #32
   d6092:	f10e 0e20 	add.w	lr, lr, #32
   d6096:	2a01      	cmp	r2, #1
   d6098:	fa03 fc0e 	lsl.w	ip, r3, lr
   d609c:	bf28      	it	cs
   d609e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d60a2:	fa43 f305 	asr.w	r3, r3, r5
   d60a6:	18c0      	adds	r0, r0, r3
   d60a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d60ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60b0:	d507      	bpl.n	d60c2 <__adddf3+0xe6>
   d60b2:	f04f 0e00 	mov.w	lr, #0
   d60b6:	f1dc 0c00 	rsbs	ip, ip, #0
   d60ba:	eb7e 0000 	sbcs.w	r0, lr, r0
   d60be:	eb6e 0101 	sbc.w	r1, lr, r1
   d60c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d60c6:	d31b      	bcc.n	d6100 <__adddf3+0x124>
   d60c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d60cc:	d30c      	bcc.n	d60e8 <__adddf3+0x10c>
   d60ce:	0849      	lsrs	r1, r1, #1
   d60d0:	ea5f 0030 	movs.w	r0, r0, rrx
   d60d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d60d8:	f104 0401 	add.w	r4, r4, #1
   d60dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d60e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d60e4:	f080 809a 	bcs.w	d621c <__adddf3+0x240>
   d60e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d60ec:	bf08      	it	eq
   d60ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d60f2:	f150 0000 	adcs.w	r0, r0, #0
   d60f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60fa:	ea41 0105 	orr.w	r1, r1, r5
   d60fe:	bd30      	pop	{r4, r5, pc}
   d6100:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6104:	4140      	adcs	r0, r0
   d6106:	eb41 0101 	adc.w	r1, r1, r1
   d610a:	3c01      	subs	r4, #1
   d610c:	bf28      	it	cs
   d610e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6112:	d2e9      	bcs.n	d60e8 <__adddf3+0x10c>
   d6114:	f091 0f00 	teq	r1, #0
   d6118:	bf04      	itt	eq
   d611a:	4601      	moveq	r1, r0
   d611c:	2000      	moveq	r0, #0
   d611e:	fab1 f381 	clz	r3, r1
   d6122:	bf08      	it	eq
   d6124:	3320      	addeq	r3, #32
   d6126:	f1a3 030b 	sub.w	r3, r3, #11
   d612a:	f1b3 0220 	subs.w	r2, r3, #32
   d612e:	da0c      	bge.n	d614a <__adddf3+0x16e>
   d6130:	320c      	adds	r2, #12
   d6132:	dd08      	ble.n	d6146 <__adddf3+0x16a>
   d6134:	f102 0c14 	add.w	ip, r2, #20
   d6138:	f1c2 020c 	rsb	r2, r2, #12
   d613c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6140:	fa21 f102 	lsr.w	r1, r1, r2
   d6144:	e00c      	b.n	d6160 <__adddf3+0x184>
   d6146:	f102 0214 	add.w	r2, r2, #20
   d614a:	bfd8      	it	le
   d614c:	f1c2 0c20 	rsble	ip, r2, #32
   d6150:	fa01 f102 	lsl.w	r1, r1, r2
   d6154:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6158:	bfdc      	itt	le
   d615a:	ea41 010c 	orrle.w	r1, r1, ip
   d615e:	4090      	lslle	r0, r2
   d6160:	1ae4      	subs	r4, r4, r3
   d6162:	bfa2      	ittt	ge
   d6164:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6168:	4329      	orrge	r1, r5
   d616a:	bd30      	popge	{r4, r5, pc}
   d616c:	ea6f 0404 	mvn.w	r4, r4
   d6170:	3c1f      	subs	r4, #31
   d6172:	da1c      	bge.n	d61ae <__adddf3+0x1d2>
   d6174:	340c      	adds	r4, #12
   d6176:	dc0e      	bgt.n	d6196 <__adddf3+0x1ba>
   d6178:	f104 0414 	add.w	r4, r4, #20
   d617c:	f1c4 0220 	rsb	r2, r4, #32
   d6180:	fa20 f004 	lsr.w	r0, r0, r4
   d6184:	fa01 f302 	lsl.w	r3, r1, r2
   d6188:	ea40 0003 	orr.w	r0, r0, r3
   d618c:	fa21 f304 	lsr.w	r3, r1, r4
   d6190:	ea45 0103 	orr.w	r1, r5, r3
   d6194:	bd30      	pop	{r4, r5, pc}
   d6196:	f1c4 040c 	rsb	r4, r4, #12
   d619a:	f1c4 0220 	rsb	r2, r4, #32
   d619e:	fa20 f002 	lsr.w	r0, r0, r2
   d61a2:	fa01 f304 	lsl.w	r3, r1, r4
   d61a6:	ea40 0003 	orr.w	r0, r0, r3
   d61aa:	4629      	mov	r1, r5
   d61ac:	bd30      	pop	{r4, r5, pc}
   d61ae:	fa21 f004 	lsr.w	r0, r1, r4
   d61b2:	4629      	mov	r1, r5
   d61b4:	bd30      	pop	{r4, r5, pc}
   d61b6:	f094 0f00 	teq	r4, #0
   d61ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d61be:	bf06      	itte	eq
   d61c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d61c4:	3401      	addeq	r4, #1
   d61c6:	3d01      	subne	r5, #1
   d61c8:	e74e      	b.n	d6068 <__adddf3+0x8c>
   d61ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d61ce:	bf18      	it	ne
   d61d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d61d4:	d029      	beq.n	d622a <__adddf3+0x24e>
   d61d6:	ea94 0f05 	teq	r4, r5
   d61da:	bf08      	it	eq
   d61dc:	ea90 0f02 	teqeq	r0, r2
   d61e0:	d005      	beq.n	d61ee <__adddf3+0x212>
   d61e2:	ea54 0c00 	orrs.w	ip, r4, r0
   d61e6:	bf04      	itt	eq
   d61e8:	4619      	moveq	r1, r3
   d61ea:	4610      	moveq	r0, r2
   d61ec:	bd30      	pop	{r4, r5, pc}
   d61ee:	ea91 0f03 	teq	r1, r3
   d61f2:	bf1e      	ittt	ne
   d61f4:	2100      	movne	r1, #0
   d61f6:	2000      	movne	r0, #0
   d61f8:	bd30      	popne	{r4, r5, pc}
   d61fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d61fe:	d105      	bne.n	d620c <__adddf3+0x230>
   d6200:	0040      	lsls	r0, r0, #1
   d6202:	4149      	adcs	r1, r1
   d6204:	bf28      	it	cs
   d6206:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d620a:	bd30      	pop	{r4, r5, pc}
   d620c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6210:	bf3c      	itt	cc
   d6212:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6216:	bd30      	popcc	{r4, r5, pc}
   d6218:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d621c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6220:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6224:	f04f 0000 	mov.w	r0, #0
   d6228:	bd30      	pop	{r4, r5, pc}
   d622a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d622e:	bf1a      	itte	ne
   d6230:	4619      	movne	r1, r3
   d6232:	4610      	movne	r0, r2
   d6234:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6238:	bf1c      	itt	ne
   d623a:	460b      	movne	r3, r1
   d623c:	4602      	movne	r2, r0
   d623e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6242:	bf06      	itte	eq
   d6244:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6248:	ea91 0f03 	teqeq	r1, r3
   d624c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6250:	bd30      	pop	{r4, r5, pc}
   d6252:	bf00      	nop

000d6254 <__aeabi_ui2d>:
   d6254:	f090 0f00 	teq	r0, #0
   d6258:	bf04      	itt	eq
   d625a:	2100      	moveq	r1, #0
   d625c:	4770      	bxeq	lr
   d625e:	b530      	push	{r4, r5, lr}
   d6260:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6264:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6268:	f04f 0500 	mov.w	r5, #0
   d626c:	f04f 0100 	mov.w	r1, #0
   d6270:	e750      	b.n	d6114 <__adddf3+0x138>
   d6272:	bf00      	nop

000d6274 <__aeabi_i2d>:
   d6274:	f090 0f00 	teq	r0, #0
   d6278:	bf04      	itt	eq
   d627a:	2100      	moveq	r1, #0
   d627c:	4770      	bxeq	lr
   d627e:	b530      	push	{r4, r5, lr}
   d6280:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6284:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6288:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d628c:	bf48      	it	mi
   d628e:	4240      	negmi	r0, r0
   d6290:	f04f 0100 	mov.w	r1, #0
   d6294:	e73e      	b.n	d6114 <__adddf3+0x138>
   d6296:	bf00      	nop

000d6298 <__aeabi_f2d>:
   d6298:	0042      	lsls	r2, r0, #1
   d629a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d629e:	ea4f 0131 	mov.w	r1, r1, rrx
   d62a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d62a6:	bf1f      	itttt	ne
   d62a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d62ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d62b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d62b4:	4770      	bxne	lr
   d62b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d62ba:	bf08      	it	eq
   d62bc:	4770      	bxeq	lr
   d62be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d62c2:	bf04      	itt	eq
   d62c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d62c8:	4770      	bxeq	lr
   d62ca:	b530      	push	{r4, r5, lr}
   d62cc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d62d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d62d8:	e71c      	b.n	d6114 <__adddf3+0x138>
   d62da:	bf00      	nop

000d62dc <__aeabi_ul2d>:
   d62dc:	ea50 0201 	orrs.w	r2, r0, r1
   d62e0:	bf08      	it	eq
   d62e2:	4770      	bxeq	lr
   d62e4:	b530      	push	{r4, r5, lr}
   d62e6:	f04f 0500 	mov.w	r5, #0
   d62ea:	e00a      	b.n	d6302 <__aeabi_l2d+0x16>

000d62ec <__aeabi_l2d>:
   d62ec:	ea50 0201 	orrs.w	r2, r0, r1
   d62f0:	bf08      	it	eq
   d62f2:	4770      	bxeq	lr
   d62f4:	b530      	push	{r4, r5, lr}
   d62f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d62fa:	d502      	bpl.n	d6302 <__aeabi_l2d+0x16>
   d62fc:	4240      	negs	r0, r0
   d62fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6302:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6306:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d630a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d630e:	f43f aed8 	beq.w	d60c2 <__adddf3+0xe6>
   d6312:	f04f 0203 	mov.w	r2, #3
   d6316:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d631a:	bf18      	it	ne
   d631c:	3203      	addne	r2, #3
   d631e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6322:	bf18      	it	ne
   d6324:	3203      	addne	r2, #3
   d6326:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d632a:	f1c2 0320 	rsb	r3, r2, #32
   d632e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6332:	fa20 f002 	lsr.w	r0, r0, r2
   d6336:	fa01 fe03 	lsl.w	lr, r1, r3
   d633a:	ea40 000e 	orr.w	r0, r0, lr
   d633e:	fa21 f102 	lsr.w	r1, r1, r2
   d6342:	4414      	add	r4, r2
   d6344:	e6bd      	b.n	d60c2 <__adddf3+0xe6>
   d6346:	bf00      	nop

000d6348 <__aeabi_dmul>:
   d6348:	b570      	push	{r4, r5, r6, lr}
   d634a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d634e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6352:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6356:	bf1d      	ittte	ne
   d6358:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d635c:	ea94 0f0c 	teqne	r4, ip
   d6360:	ea95 0f0c 	teqne	r5, ip
   d6364:	f000 f8de 	bleq	d6524 <__aeabi_dmul+0x1dc>
   d6368:	442c      	add	r4, r5
   d636a:	ea81 0603 	eor.w	r6, r1, r3
   d636e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6372:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6376:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d637a:	bf18      	it	ne
   d637c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6380:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6388:	d038      	beq.n	d63fc <__aeabi_dmul+0xb4>
   d638a:	fba0 ce02 	umull	ip, lr, r0, r2
   d638e:	f04f 0500 	mov.w	r5, #0
   d6392:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6396:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d639a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d639e:	f04f 0600 	mov.w	r6, #0
   d63a2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d63a6:	f09c 0f00 	teq	ip, #0
   d63aa:	bf18      	it	ne
   d63ac:	f04e 0e01 	orrne.w	lr, lr, #1
   d63b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d63b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d63b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d63bc:	d204      	bcs.n	d63c8 <__aeabi_dmul+0x80>
   d63be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d63c2:	416d      	adcs	r5, r5
   d63c4:	eb46 0606 	adc.w	r6, r6, r6
   d63c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d63cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d63d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d63d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d63d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d63dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63e0:	bf88      	it	hi
   d63e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d63e6:	d81e      	bhi.n	d6426 <__aeabi_dmul+0xde>
   d63e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d63ec:	bf08      	it	eq
   d63ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d63f2:	f150 0000 	adcs.w	r0, r0, #0
   d63f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63fa:	bd70      	pop	{r4, r5, r6, pc}
   d63fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6400:	ea46 0101 	orr.w	r1, r6, r1
   d6404:	ea40 0002 	orr.w	r0, r0, r2
   d6408:	ea81 0103 	eor.w	r1, r1, r3
   d640c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6410:	bfc2      	ittt	gt
   d6412:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6416:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d641a:	bd70      	popgt	{r4, r5, r6, pc}
   d641c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6420:	f04f 0e00 	mov.w	lr, #0
   d6424:	3c01      	subs	r4, #1
   d6426:	f300 80ab 	bgt.w	d6580 <__aeabi_dmul+0x238>
   d642a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d642e:	bfde      	ittt	le
   d6430:	2000      	movle	r0, #0
   d6432:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6436:	bd70      	pople	{r4, r5, r6, pc}
   d6438:	f1c4 0400 	rsb	r4, r4, #0
   d643c:	3c20      	subs	r4, #32
   d643e:	da35      	bge.n	d64ac <__aeabi_dmul+0x164>
   d6440:	340c      	adds	r4, #12
   d6442:	dc1b      	bgt.n	d647c <__aeabi_dmul+0x134>
   d6444:	f104 0414 	add.w	r4, r4, #20
   d6448:	f1c4 0520 	rsb	r5, r4, #32
   d644c:	fa00 f305 	lsl.w	r3, r0, r5
   d6450:	fa20 f004 	lsr.w	r0, r0, r4
   d6454:	fa01 f205 	lsl.w	r2, r1, r5
   d6458:	ea40 0002 	orr.w	r0, r0, r2
   d645c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6464:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6468:	fa21 f604 	lsr.w	r6, r1, r4
   d646c:	eb42 0106 	adc.w	r1, r2, r6
   d6470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6474:	bf08      	it	eq
   d6476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d647a:	bd70      	pop	{r4, r5, r6, pc}
   d647c:	f1c4 040c 	rsb	r4, r4, #12
   d6480:	f1c4 0520 	rsb	r5, r4, #32
   d6484:	fa00 f304 	lsl.w	r3, r0, r4
   d6488:	fa20 f005 	lsr.w	r0, r0, r5
   d648c:	fa01 f204 	lsl.w	r2, r1, r4
   d6490:	ea40 0002 	orr.w	r0, r0, r2
   d6494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6498:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d649c:	f141 0100 	adc.w	r1, r1, #0
   d64a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64a4:	bf08      	it	eq
   d64a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64aa:	bd70      	pop	{r4, r5, r6, pc}
   d64ac:	f1c4 0520 	rsb	r5, r4, #32
   d64b0:	fa00 f205 	lsl.w	r2, r0, r5
   d64b4:	ea4e 0e02 	orr.w	lr, lr, r2
   d64b8:	fa20 f304 	lsr.w	r3, r0, r4
   d64bc:	fa01 f205 	lsl.w	r2, r1, r5
   d64c0:	ea43 0302 	orr.w	r3, r3, r2
   d64c4:	fa21 f004 	lsr.w	r0, r1, r4
   d64c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64cc:	fa21 f204 	lsr.w	r2, r1, r4
   d64d0:	ea20 0002 	bic.w	r0, r0, r2
   d64d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d64d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64dc:	bf08      	it	eq
   d64de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64e2:	bd70      	pop	{r4, r5, r6, pc}
   d64e4:	f094 0f00 	teq	r4, #0
   d64e8:	d10f      	bne.n	d650a <__aeabi_dmul+0x1c2>
   d64ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d64ee:	0040      	lsls	r0, r0, #1
   d64f0:	eb41 0101 	adc.w	r1, r1, r1
   d64f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d64f8:	bf08      	it	eq
   d64fa:	3c01      	subeq	r4, #1
   d64fc:	d0f7      	beq.n	d64ee <__aeabi_dmul+0x1a6>
   d64fe:	ea41 0106 	orr.w	r1, r1, r6
   d6502:	f095 0f00 	teq	r5, #0
   d6506:	bf18      	it	ne
   d6508:	4770      	bxne	lr
   d650a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d650e:	0052      	lsls	r2, r2, #1
   d6510:	eb43 0303 	adc.w	r3, r3, r3
   d6514:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6518:	bf08      	it	eq
   d651a:	3d01      	subeq	r5, #1
   d651c:	d0f7      	beq.n	d650e <__aeabi_dmul+0x1c6>
   d651e:	ea43 0306 	orr.w	r3, r3, r6
   d6522:	4770      	bx	lr
   d6524:	ea94 0f0c 	teq	r4, ip
   d6528:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d652c:	bf18      	it	ne
   d652e:	ea95 0f0c 	teqne	r5, ip
   d6532:	d00c      	beq.n	d654e <__aeabi_dmul+0x206>
   d6534:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6538:	bf18      	it	ne
   d653a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d653e:	d1d1      	bne.n	d64e4 <__aeabi_dmul+0x19c>
   d6540:	ea81 0103 	eor.w	r1, r1, r3
   d6544:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6548:	f04f 0000 	mov.w	r0, #0
   d654c:	bd70      	pop	{r4, r5, r6, pc}
   d654e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6552:	bf06      	itte	eq
   d6554:	4610      	moveq	r0, r2
   d6556:	4619      	moveq	r1, r3
   d6558:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d655c:	d019      	beq.n	d6592 <__aeabi_dmul+0x24a>
   d655e:	ea94 0f0c 	teq	r4, ip
   d6562:	d102      	bne.n	d656a <__aeabi_dmul+0x222>
   d6564:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6568:	d113      	bne.n	d6592 <__aeabi_dmul+0x24a>
   d656a:	ea95 0f0c 	teq	r5, ip
   d656e:	d105      	bne.n	d657c <__aeabi_dmul+0x234>
   d6570:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6574:	bf1c      	itt	ne
   d6576:	4610      	movne	r0, r2
   d6578:	4619      	movne	r1, r3
   d657a:	d10a      	bne.n	d6592 <__aeabi_dmul+0x24a>
   d657c:	ea81 0103 	eor.w	r1, r1, r3
   d6580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6584:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d658c:	f04f 0000 	mov.w	r0, #0
   d6590:	bd70      	pop	{r4, r5, r6, pc}
   d6592:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6596:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d659a:	bd70      	pop	{r4, r5, r6, pc}

000d659c <__aeabi_ddiv>:
   d659c:	b570      	push	{r4, r5, r6, lr}
   d659e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d65a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d65a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d65aa:	bf1d      	ittte	ne
   d65ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d65b0:	ea94 0f0c 	teqne	r4, ip
   d65b4:	ea95 0f0c 	teqne	r5, ip
   d65b8:	f000 f8a7 	bleq	d670a <__aeabi_ddiv+0x16e>
   d65bc:	eba4 0405 	sub.w	r4, r4, r5
   d65c0:	ea81 0e03 	eor.w	lr, r1, r3
   d65c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65cc:	f000 8088 	beq.w	d66e0 <__aeabi_ddiv+0x144>
   d65d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d65d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d65dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d65e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d65e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d65e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d65ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d65f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d65f4:	429d      	cmp	r5, r3
   d65f6:	bf08      	it	eq
   d65f8:	4296      	cmpeq	r6, r2
   d65fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d65fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6602:	d202      	bcs.n	d660a <__aeabi_ddiv+0x6e>
   d6604:	085b      	lsrs	r3, r3, #1
   d6606:	ea4f 0232 	mov.w	r2, r2, rrx
   d660a:	1ab6      	subs	r6, r6, r2
   d660c:	eb65 0503 	sbc.w	r5, r5, r3
   d6610:	085b      	lsrs	r3, r3, #1
   d6612:	ea4f 0232 	mov.w	r2, r2, rrx
   d6616:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d661a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d661e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6622:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6626:	bf22      	ittt	cs
   d6628:	1ab6      	subcs	r6, r6, r2
   d662a:	4675      	movcs	r5, lr
   d662c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6630:	085b      	lsrs	r3, r3, #1
   d6632:	ea4f 0232 	mov.w	r2, r2, rrx
   d6636:	ebb6 0e02 	subs.w	lr, r6, r2
   d663a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d663e:	bf22      	ittt	cs
   d6640:	1ab6      	subcs	r6, r6, r2
   d6642:	4675      	movcs	r5, lr
   d6644:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6648:	085b      	lsrs	r3, r3, #1
   d664a:	ea4f 0232 	mov.w	r2, r2, rrx
   d664e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6652:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6656:	bf22      	ittt	cs
   d6658:	1ab6      	subcs	r6, r6, r2
   d665a:	4675      	movcs	r5, lr
   d665c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6660:	085b      	lsrs	r3, r3, #1
   d6662:	ea4f 0232 	mov.w	r2, r2, rrx
   d6666:	ebb6 0e02 	subs.w	lr, r6, r2
   d666a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d666e:	bf22      	ittt	cs
   d6670:	1ab6      	subcs	r6, r6, r2
   d6672:	4675      	movcs	r5, lr
   d6674:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6678:	ea55 0e06 	orrs.w	lr, r5, r6
   d667c:	d018      	beq.n	d66b0 <__aeabi_ddiv+0x114>
   d667e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6682:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6686:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d668a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d668e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6692:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6696:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d669a:	d1c0      	bne.n	d661e <__aeabi_ddiv+0x82>
   d669c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66a0:	d10b      	bne.n	d66ba <__aeabi_ddiv+0x11e>
   d66a2:	ea41 0100 	orr.w	r1, r1, r0
   d66a6:	f04f 0000 	mov.w	r0, #0
   d66aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d66ae:	e7b6      	b.n	d661e <__aeabi_ddiv+0x82>
   d66b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66b4:	bf04      	itt	eq
   d66b6:	4301      	orreq	r1, r0
   d66b8:	2000      	moveq	r0, #0
   d66ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d66be:	bf88      	it	hi
   d66c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d66c4:	f63f aeaf 	bhi.w	d6426 <__aeabi_dmul+0xde>
   d66c8:	ebb5 0c03 	subs.w	ip, r5, r3
   d66cc:	bf04      	itt	eq
   d66ce:	ebb6 0c02 	subseq.w	ip, r6, r2
   d66d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d66d6:	f150 0000 	adcs.w	r0, r0, #0
   d66da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d66de:	bd70      	pop	{r4, r5, r6, pc}
   d66e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d66e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d66e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d66ec:	bfc2      	ittt	gt
   d66ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d66f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d66f6:	bd70      	popgt	{r4, r5, r6, pc}
   d66f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66fc:	f04f 0e00 	mov.w	lr, #0
   d6700:	3c01      	subs	r4, #1
   d6702:	e690      	b.n	d6426 <__aeabi_dmul+0xde>
   d6704:	ea45 0e06 	orr.w	lr, r5, r6
   d6708:	e68d      	b.n	d6426 <__aeabi_dmul+0xde>
   d670a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d670e:	ea94 0f0c 	teq	r4, ip
   d6712:	bf08      	it	eq
   d6714:	ea95 0f0c 	teqeq	r5, ip
   d6718:	f43f af3b 	beq.w	d6592 <__aeabi_dmul+0x24a>
   d671c:	ea94 0f0c 	teq	r4, ip
   d6720:	d10a      	bne.n	d6738 <__aeabi_ddiv+0x19c>
   d6722:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6726:	f47f af34 	bne.w	d6592 <__aeabi_dmul+0x24a>
   d672a:	ea95 0f0c 	teq	r5, ip
   d672e:	f47f af25 	bne.w	d657c <__aeabi_dmul+0x234>
   d6732:	4610      	mov	r0, r2
   d6734:	4619      	mov	r1, r3
   d6736:	e72c      	b.n	d6592 <__aeabi_dmul+0x24a>
   d6738:	ea95 0f0c 	teq	r5, ip
   d673c:	d106      	bne.n	d674c <__aeabi_ddiv+0x1b0>
   d673e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6742:	f43f aefd 	beq.w	d6540 <__aeabi_dmul+0x1f8>
   d6746:	4610      	mov	r0, r2
   d6748:	4619      	mov	r1, r3
   d674a:	e722      	b.n	d6592 <__aeabi_dmul+0x24a>
   d674c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6750:	bf18      	it	ne
   d6752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6756:	f47f aec5 	bne.w	d64e4 <__aeabi_dmul+0x19c>
   d675a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d675e:	f47f af0d 	bne.w	d657c <__aeabi_dmul+0x234>
   d6762:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6766:	f47f aeeb 	bne.w	d6540 <__aeabi_dmul+0x1f8>
   d676a:	e712      	b.n	d6592 <__aeabi_dmul+0x24a>

000d676c <__gedf2>:
   d676c:	f04f 3cff 	mov.w	ip, #4294967295
   d6770:	e006      	b.n	d6780 <__cmpdf2+0x4>
   d6772:	bf00      	nop

000d6774 <__ledf2>:
   d6774:	f04f 0c01 	mov.w	ip, #1
   d6778:	e002      	b.n	d6780 <__cmpdf2+0x4>
   d677a:	bf00      	nop

000d677c <__cmpdf2>:
   d677c:	f04f 0c01 	mov.w	ip, #1
   d6780:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6784:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d678c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6790:	bf18      	it	ne
   d6792:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6796:	d01b      	beq.n	d67d0 <__cmpdf2+0x54>
   d6798:	b001      	add	sp, #4
   d679a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d679e:	bf0c      	ite	eq
   d67a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d67a4:	ea91 0f03 	teqne	r1, r3
   d67a8:	bf02      	ittt	eq
   d67aa:	ea90 0f02 	teqeq	r0, r2
   d67ae:	2000      	moveq	r0, #0
   d67b0:	4770      	bxeq	lr
   d67b2:	f110 0f00 	cmn.w	r0, #0
   d67b6:	ea91 0f03 	teq	r1, r3
   d67ba:	bf58      	it	pl
   d67bc:	4299      	cmppl	r1, r3
   d67be:	bf08      	it	eq
   d67c0:	4290      	cmpeq	r0, r2
   d67c2:	bf2c      	ite	cs
   d67c4:	17d8      	asrcs	r0, r3, #31
   d67c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d67ca:	f040 0001 	orr.w	r0, r0, #1
   d67ce:	4770      	bx	lr
   d67d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d67d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67d8:	d102      	bne.n	d67e0 <__cmpdf2+0x64>
   d67da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d67de:	d107      	bne.n	d67f0 <__cmpdf2+0x74>
   d67e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d67e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67e8:	d1d6      	bne.n	d6798 <__cmpdf2+0x1c>
   d67ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d67ee:	d0d3      	beq.n	d6798 <__cmpdf2+0x1c>
   d67f0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d67f4:	4770      	bx	lr
   d67f6:	bf00      	nop

000d67f8 <__aeabi_cdrcmple>:
   d67f8:	4684      	mov	ip, r0
   d67fa:	4610      	mov	r0, r2
   d67fc:	4662      	mov	r2, ip
   d67fe:	468c      	mov	ip, r1
   d6800:	4619      	mov	r1, r3
   d6802:	4663      	mov	r3, ip
   d6804:	e000      	b.n	d6808 <__aeabi_cdcmpeq>
   d6806:	bf00      	nop

000d6808 <__aeabi_cdcmpeq>:
   d6808:	b501      	push	{r0, lr}
   d680a:	f7ff ffb7 	bl	d677c <__cmpdf2>
   d680e:	2800      	cmp	r0, #0
   d6810:	bf48      	it	mi
   d6812:	f110 0f00 	cmnmi.w	r0, #0
   d6816:	bd01      	pop	{r0, pc}

000d6818 <__aeabi_dcmpeq>:
   d6818:	f84d ed08 	str.w	lr, [sp, #-8]!
   d681c:	f7ff fff4 	bl	d6808 <__aeabi_cdcmpeq>
   d6820:	bf0c      	ite	eq
   d6822:	2001      	moveq	r0, #1
   d6824:	2000      	movne	r0, #0
   d6826:	f85d fb08 	ldr.w	pc, [sp], #8
   d682a:	bf00      	nop

000d682c <__aeabi_dcmplt>:
   d682c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6830:	f7ff ffea 	bl	d6808 <__aeabi_cdcmpeq>
   d6834:	bf34      	ite	cc
   d6836:	2001      	movcc	r0, #1
   d6838:	2000      	movcs	r0, #0
   d683a:	f85d fb08 	ldr.w	pc, [sp], #8
   d683e:	bf00      	nop

000d6840 <__aeabi_dcmple>:
   d6840:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6844:	f7ff ffe0 	bl	d6808 <__aeabi_cdcmpeq>
   d6848:	bf94      	ite	ls
   d684a:	2001      	movls	r0, #1
   d684c:	2000      	movhi	r0, #0
   d684e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6852:	bf00      	nop

000d6854 <__aeabi_dcmpge>:
   d6854:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6858:	f7ff ffce 	bl	d67f8 <__aeabi_cdrcmple>
   d685c:	bf94      	ite	ls
   d685e:	2001      	movls	r0, #1
   d6860:	2000      	movhi	r0, #0
   d6862:	f85d fb08 	ldr.w	pc, [sp], #8
   d6866:	bf00      	nop

000d6868 <__aeabi_dcmpgt>:
   d6868:	f84d ed08 	str.w	lr, [sp, #-8]!
   d686c:	f7ff ffc4 	bl	d67f8 <__aeabi_cdrcmple>
   d6870:	bf34      	ite	cc
   d6872:	2001      	movcc	r0, #1
   d6874:	2000      	movcs	r0, #0
   d6876:	f85d fb08 	ldr.w	pc, [sp], #8
   d687a:	bf00      	nop

000d687c <__aeabi_d2uiz>:
   d687c:	004a      	lsls	r2, r1, #1
   d687e:	d211      	bcs.n	d68a4 <__aeabi_d2uiz+0x28>
   d6880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6884:	d211      	bcs.n	d68aa <__aeabi_d2uiz+0x2e>
   d6886:	d50d      	bpl.n	d68a4 <__aeabi_d2uiz+0x28>
   d6888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d688c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6890:	d40e      	bmi.n	d68b0 <__aeabi_d2uiz+0x34>
   d6892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d689a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d689e:	fa23 f002 	lsr.w	r0, r3, r2
   d68a2:	4770      	bx	lr
   d68a4:	f04f 0000 	mov.w	r0, #0
   d68a8:	4770      	bx	lr
   d68aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d68ae:	d102      	bne.n	d68b6 <__aeabi_d2uiz+0x3a>
   d68b0:	f04f 30ff 	mov.w	r0, #4294967295
   d68b4:	4770      	bx	lr
   d68b6:	f04f 0000 	mov.w	r0, #0
   d68ba:	4770      	bx	lr

000d68bc <__aeabi_d2f>:
   d68bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d68c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d68c4:	bf24      	itt	cs
   d68c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d68ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d68ce:	d90d      	bls.n	d68ec <__aeabi_d2f+0x30>
   d68d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d68d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d68d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d68dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d68e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d68e4:	bf08      	it	eq
   d68e6:	f020 0001 	biceq.w	r0, r0, #1
   d68ea:	4770      	bx	lr
   d68ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d68f0:	d121      	bne.n	d6936 <__aeabi_d2f+0x7a>
   d68f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d68f6:	bfbc      	itt	lt
   d68f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d68fc:	4770      	bxlt	lr
   d68fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6902:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6906:	f1c2 0218 	rsb	r2, r2, #24
   d690a:	f1c2 0c20 	rsb	ip, r2, #32
   d690e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6912:	fa20 f002 	lsr.w	r0, r0, r2
   d6916:	bf18      	it	ne
   d6918:	f040 0001 	orrne.w	r0, r0, #1
   d691c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6920:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6924:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6928:	ea40 000c 	orr.w	r0, r0, ip
   d692c:	fa23 f302 	lsr.w	r3, r3, r2
   d6930:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6934:	e7cc      	b.n	d68d0 <__aeabi_d2f+0x14>
   d6936:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d693a:	d107      	bne.n	d694c <__aeabi_d2f+0x90>
   d693c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6940:	bf1e      	ittt	ne
   d6942:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6946:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d694a:	4770      	bxne	lr
   d694c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6950:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6954:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6958:	4770      	bx	lr
   d695a:	bf00      	nop

000d695c <__aeabi_uldivmod>:
   d695c:	b953      	cbnz	r3, d6974 <__aeabi_uldivmod+0x18>
   d695e:	b94a      	cbnz	r2, d6974 <__aeabi_uldivmod+0x18>
   d6960:	2900      	cmp	r1, #0
   d6962:	bf08      	it	eq
   d6964:	2800      	cmpeq	r0, #0
   d6966:	bf1c      	itt	ne
   d6968:	f04f 31ff 	movne.w	r1, #4294967295
   d696c:	f04f 30ff 	movne.w	r0, #4294967295
   d6970:	f000 b98c 	b.w	d6c8c <__aeabi_idiv0>
   d6974:	f1ad 0c08 	sub.w	ip, sp, #8
   d6978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d697c:	f000 f824 	bl	d69c8 <__udivmoddi4>
   d6980:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6988:	b004      	add	sp, #16
   d698a:	4770      	bx	lr

000d698c <__aeabi_d2ulz>:
   d698c:	b5d0      	push	{r4, r6, r7, lr}
   d698e:	4b0c      	ldr	r3, [pc, #48]	; (d69c0 <__aeabi_d2ulz+0x34>)
   d6990:	2200      	movs	r2, #0
   d6992:	4606      	mov	r6, r0
   d6994:	460f      	mov	r7, r1
   d6996:	f7ff fcd7 	bl	d6348 <__aeabi_dmul>
   d699a:	f7ff ff6f 	bl	d687c <__aeabi_d2uiz>
   d699e:	4604      	mov	r4, r0
   d69a0:	f7ff fc58 	bl	d6254 <__aeabi_ui2d>
   d69a4:	4b07      	ldr	r3, [pc, #28]	; (d69c4 <__aeabi_d2ulz+0x38>)
   d69a6:	2200      	movs	r2, #0
   d69a8:	f7ff fcce 	bl	d6348 <__aeabi_dmul>
   d69ac:	4602      	mov	r2, r0
   d69ae:	460b      	mov	r3, r1
   d69b0:	4630      	mov	r0, r6
   d69b2:	4639      	mov	r1, r7
   d69b4:	f7ff fb10 	bl	d5fd8 <__aeabi_dsub>
   d69b8:	f7ff ff60 	bl	d687c <__aeabi_d2uiz>
   d69bc:	4621      	mov	r1, r4
   d69be:	bdd0      	pop	{r4, r6, r7, pc}
   d69c0:	3df00000 	.word	0x3df00000
   d69c4:	41f00000 	.word	0x41f00000

000d69c8 <__udivmoddi4>:
   d69c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d69cc:	9d08      	ldr	r5, [sp, #32]
   d69ce:	4604      	mov	r4, r0
   d69d0:	468c      	mov	ip, r1
   d69d2:	2b00      	cmp	r3, #0
   d69d4:	f040 8083 	bne.w	d6ade <__udivmoddi4+0x116>
   d69d8:	428a      	cmp	r2, r1
   d69da:	4617      	mov	r7, r2
   d69dc:	d947      	bls.n	d6a6e <__udivmoddi4+0xa6>
   d69de:	fab2 f282 	clz	r2, r2
   d69e2:	b142      	cbz	r2, d69f6 <__udivmoddi4+0x2e>
   d69e4:	f1c2 0020 	rsb	r0, r2, #32
   d69e8:	fa24 f000 	lsr.w	r0, r4, r0
   d69ec:	4091      	lsls	r1, r2
   d69ee:	4097      	lsls	r7, r2
   d69f0:	ea40 0c01 	orr.w	ip, r0, r1
   d69f4:	4094      	lsls	r4, r2
   d69f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d69fa:	0c23      	lsrs	r3, r4, #16
   d69fc:	fbbc f6f8 	udiv	r6, ip, r8
   d6a00:	fa1f fe87 	uxth.w	lr, r7
   d6a04:	fb08 c116 	mls	r1, r8, r6, ip
   d6a08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6a0c:	fb06 f10e 	mul.w	r1, r6, lr
   d6a10:	4299      	cmp	r1, r3
   d6a12:	d909      	bls.n	d6a28 <__udivmoddi4+0x60>
   d6a14:	18fb      	adds	r3, r7, r3
   d6a16:	f106 30ff 	add.w	r0, r6, #4294967295
   d6a1a:	f080 8119 	bcs.w	d6c50 <__udivmoddi4+0x288>
   d6a1e:	4299      	cmp	r1, r3
   d6a20:	f240 8116 	bls.w	d6c50 <__udivmoddi4+0x288>
   d6a24:	3e02      	subs	r6, #2
   d6a26:	443b      	add	r3, r7
   d6a28:	1a5b      	subs	r3, r3, r1
   d6a2a:	b2a4      	uxth	r4, r4
   d6a2c:	fbb3 f0f8 	udiv	r0, r3, r8
   d6a30:	fb08 3310 	mls	r3, r8, r0, r3
   d6a34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d6a38:	fb00 fe0e 	mul.w	lr, r0, lr
   d6a3c:	45a6      	cmp	lr, r4
   d6a3e:	d909      	bls.n	d6a54 <__udivmoddi4+0x8c>
   d6a40:	193c      	adds	r4, r7, r4
   d6a42:	f100 33ff 	add.w	r3, r0, #4294967295
   d6a46:	f080 8105 	bcs.w	d6c54 <__udivmoddi4+0x28c>
   d6a4a:	45a6      	cmp	lr, r4
   d6a4c:	f240 8102 	bls.w	d6c54 <__udivmoddi4+0x28c>
   d6a50:	3802      	subs	r0, #2
   d6a52:	443c      	add	r4, r7
   d6a54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d6a58:	eba4 040e 	sub.w	r4, r4, lr
   d6a5c:	2600      	movs	r6, #0
   d6a5e:	b11d      	cbz	r5, d6a68 <__udivmoddi4+0xa0>
   d6a60:	40d4      	lsrs	r4, r2
   d6a62:	2300      	movs	r3, #0
   d6a64:	e9c5 4300 	strd	r4, r3, [r5]
   d6a68:	4631      	mov	r1, r6
   d6a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a6e:	b902      	cbnz	r2, d6a72 <__udivmoddi4+0xaa>
   d6a70:	deff      	udf	#255	; 0xff
   d6a72:	fab2 f282 	clz	r2, r2
   d6a76:	2a00      	cmp	r2, #0
   d6a78:	d150      	bne.n	d6b1c <__udivmoddi4+0x154>
   d6a7a:	1bcb      	subs	r3, r1, r7
   d6a7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6a80:	fa1f f887 	uxth.w	r8, r7
   d6a84:	2601      	movs	r6, #1
   d6a86:	fbb3 fcfe 	udiv	ip, r3, lr
   d6a8a:	0c21      	lsrs	r1, r4, #16
   d6a8c:	fb0e 331c 	mls	r3, lr, ip, r3
   d6a90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6a94:	fb08 f30c 	mul.w	r3, r8, ip
   d6a98:	428b      	cmp	r3, r1
   d6a9a:	d907      	bls.n	d6aac <__udivmoddi4+0xe4>
   d6a9c:	1879      	adds	r1, r7, r1
   d6a9e:	f10c 30ff 	add.w	r0, ip, #4294967295
   d6aa2:	d202      	bcs.n	d6aaa <__udivmoddi4+0xe2>
   d6aa4:	428b      	cmp	r3, r1
   d6aa6:	f200 80e9 	bhi.w	d6c7c <__udivmoddi4+0x2b4>
   d6aaa:	4684      	mov	ip, r0
   d6aac:	1ac9      	subs	r1, r1, r3
   d6aae:	b2a3      	uxth	r3, r4
   d6ab0:	fbb1 f0fe 	udiv	r0, r1, lr
   d6ab4:	fb0e 1110 	mls	r1, lr, r0, r1
   d6ab8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d6abc:	fb08 f800 	mul.w	r8, r8, r0
   d6ac0:	45a0      	cmp	r8, r4
   d6ac2:	d907      	bls.n	d6ad4 <__udivmoddi4+0x10c>
   d6ac4:	193c      	adds	r4, r7, r4
   d6ac6:	f100 33ff 	add.w	r3, r0, #4294967295
   d6aca:	d202      	bcs.n	d6ad2 <__udivmoddi4+0x10a>
   d6acc:	45a0      	cmp	r8, r4
   d6ace:	f200 80d9 	bhi.w	d6c84 <__udivmoddi4+0x2bc>
   d6ad2:	4618      	mov	r0, r3
   d6ad4:	eba4 0408 	sub.w	r4, r4, r8
   d6ad8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d6adc:	e7bf      	b.n	d6a5e <__udivmoddi4+0x96>
   d6ade:	428b      	cmp	r3, r1
   d6ae0:	d909      	bls.n	d6af6 <__udivmoddi4+0x12e>
   d6ae2:	2d00      	cmp	r5, #0
   d6ae4:	f000 80b1 	beq.w	d6c4a <__udivmoddi4+0x282>
   d6ae8:	2600      	movs	r6, #0
   d6aea:	e9c5 0100 	strd	r0, r1, [r5]
   d6aee:	4630      	mov	r0, r6
   d6af0:	4631      	mov	r1, r6
   d6af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6af6:	fab3 f683 	clz	r6, r3
   d6afa:	2e00      	cmp	r6, #0
   d6afc:	d14a      	bne.n	d6b94 <__udivmoddi4+0x1cc>
   d6afe:	428b      	cmp	r3, r1
   d6b00:	d302      	bcc.n	d6b08 <__udivmoddi4+0x140>
   d6b02:	4282      	cmp	r2, r0
   d6b04:	f200 80b8 	bhi.w	d6c78 <__udivmoddi4+0x2b0>
   d6b08:	1a84      	subs	r4, r0, r2
   d6b0a:	eb61 0103 	sbc.w	r1, r1, r3
   d6b0e:	2001      	movs	r0, #1
   d6b10:	468c      	mov	ip, r1
   d6b12:	2d00      	cmp	r5, #0
   d6b14:	d0a8      	beq.n	d6a68 <__udivmoddi4+0xa0>
   d6b16:	e9c5 4c00 	strd	r4, ip, [r5]
   d6b1a:	e7a5      	b.n	d6a68 <__udivmoddi4+0xa0>
   d6b1c:	f1c2 0320 	rsb	r3, r2, #32
   d6b20:	fa20 f603 	lsr.w	r6, r0, r3
   d6b24:	4097      	lsls	r7, r2
   d6b26:	fa01 f002 	lsl.w	r0, r1, r2
   d6b2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6b2e:	40d9      	lsrs	r1, r3
   d6b30:	4330      	orrs	r0, r6
   d6b32:	0c03      	lsrs	r3, r0, #16
   d6b34:	fbb1 f6fe 	udiv	r6, r1, lr
   d6b38:	fa1f f887 	uxth.w	r8, r7
   d6b3c:	fb0e 1116 	mls	r1, lr, r6, r1
   d6b40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6b44:	fb06 f108 	mul.w	r1, r6, r8
   d6b48:	4299      	cmp	r1, r3
   d6b4a:	fa04 f402 	lsl.w	r4, r4, r2
   d6b4e:	d909      	bls.n	d6b64 <__udivmoddi4+0x19c>
   d6b50:	18fb      	adds	r3, r7, r3
   d6b52:	f106 3cff 	add.w	ip, r6, #4294967295
   d6b56:	f080 808d 	bcs.w	d6c74 <__udivmoddi4+0x2ac>
   d6b5a:	4299      	cmp	r1, r3
   d6b5c:	f240 808a 	bls.w	d6c74 <__udivmoddi4+0x2ac>
   d6b60:	3e02      	subs	r6, #2
   d6b62:	443b      	add	r3, r7
   d6b64:	1a5b      	subs	r3, r3, r1
   d6b66:	b281      	uxth	r1, r0
   d6b68:	fbb3 f0fe 	udiv	r0, r3, lr
   d6b6c:	fb0e 3310 	mls	r3, lr, r0, r3
   d6b70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6b74:	fb00 f308 	mul.w	r3, r0, r8
   d6b78:	428b      	cmp	r3, r1
   d6b7a:	d907      	bls.n	d6b8c <__udivmoddi4+0x1c4>
   d6b7c:	1879      	adds	r1, r7, r1
   d6b7e:	f100 3cff 	add.w	ip, r0, #4294967295
   d6b82:	d273      	bcs.n	d6c6c <__udivmoddi4+0x2a4>
   d6b84:	428b      	cmp	r3, r1
   d6b86:	d971      	bls.n	d6c6c <__udivmoddi4+0x2a4>
   d6b88:	3802      	subs	r0, #2
   d6b8a:	4439      	add	r1, r7
   d6b8c:	1acb      	subs	r3, r1, r3
   d6b8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d6b92:	e778      	b.n	d6a86 <__udivmoddi4+0xbe>
   d6b94:	f1c6 0c20 	rsb	ip, r6, #32
   d6b98:	fa03 f406 	lsl.w	r4, r3, r6
   d6b9c:	fa22 f30c 	lsr.w	r3, r2, ip
   d6ba0:	431c      	orrs	r4, r3
   d6ba2:	fa20 f70c 	lsr.w	r7, r0, ip
   d6ba6:	fa01 f306 	lsl.w	r3, r1, r6
   d6baa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d6bae:	fa21 f10c 	lsr.w	r1, r1, ip
   d6bb2:	431f      	orrs	r7, r3
   d6bb4:	0c3b      	lsrs	r3, r7, #16
   d6bb6:	fbb1 f9fe 	udiv	r9, r1, lr
   d6bba:	fa1f f884 	uxth.w	r8, r4
   d6bbe:	fb0e 1119 	mls	r1, lr, r9, r1
   d6bc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d6bc6:	fb09 fa08 	mul.w	sl, r9, r8
   d6bca:	458a      	cmp	sl, r1
   d6bcc:	fa02 f206 	lsl.w	r2, r2, r6
   d6bd0:	fa00 f306 	lsl.w	r3, r0, r6
   d6bd4:	d908      	bls.n	d6be8 <__udivmoddi4+0x220>
   d6bd6:	1861      	adds	r1, r4, r1
   d6bd8:	f109 30ff 	add.w	r0, r9, #4294967295
   d6bdc:	d248      	bcs.n	d6c70 <__udivmoddi4+0x2a8>
   d6bde:	458a      	cmp	sl, r1
   d6be0:	d946      	bls.n	d6c70 <__udivmoddi4+0x2a8>
   d6be2:	f1a9 0902 	sub.w	r9, r9, #2
   d6be6:	4421      	add	r1, r4
   d6be8:	eba1 010a 	sub.w	r1, r1, sl
   d6bec:	b2bf      	uxth	r7, r7
   d6bee:	fbb1 f0fe 	udiv	r0, r1, lr
   d6bf2:	fb0e 1110 	mls	r1, lr, r0, r1
   d6bf6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d6bfa:	fb00 f808 	mul.w	r8, r0, r8
   d6bfe:	45b8      	cmp	r8, r7
   d6c00:	d907      	bls.n	d6c12 <__udivmoddi4+0x24a>
   d6c02:	19e7      	adds	r7, r4, r7
   d6c04:	f100 31ff 	add.w	r1, r0, #4294967295
   d6c08:	d22e      	bcs.n	d6c68 <__udivmoddi4+0x2a0>
   d6c0a:	45b8      	cmp	r8, r7
   d6c0c:	d92c      	bls.n	d6c68 <__udivmoddi4+0x2a0>
   d6c0e:	3802      	subs	r0, #2
   d6c10:	4427      	add	r7, r4
   d6c12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d6c16:	eba7 0708 	sub.w	r7, r7, r8
   d6c1a:	fba0 8902 	umull	r8, r9, r0, r2
   d6c1e:	454f      	cmp	r7, r9
   d6c20:	46c6      	mov	lr, r8
   d6c22:	4649      	mov	r1, r9
   d6c24:	d31a      	bcc.n	d6c5c <__udivmoddi4+0x294>
   d6c26:	d017      	beq.n	d6c58 <__udivmoddi4+0x290>
   d6c28:	b15d      	cbz	r5, d6c42 <__udivmoddi4+0x27a>
   d6c2a:	ebb3 020e 	subs.w	r2, r3, lr
   d6c2e:	eb67 0701 	sbc.w	r7, r7, r1
   d6c32:	fa07 fc0c 	lsl.w	ip, r7, ip
   d6c36:	40f2      	lsrs	r2, r6
   d6c38:	ea4c 0202 	orr.w	r2, ip, r2
   d6c3c:	40f7      	lsrs	r7, r6
   d6c3e:	e9c5 2700 	strd	r2, r7, [r5]
   d6c42:	2600      	movs	r6, #0
   d6c44:	4631      	mov	r1, r6
   d6c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c4a:	462e      	mov	r6, r5
   d6c4c:	4628      	mov	r0, r5
   d6c4e:	e70b      	b.n	d6a68 <__udivmoddi4+0xa0>
   d6c50:	4606      	mov	r6, r0
   d6c52:	e6e9      	b.n	d6a28 <__udivmoddi4+0x60>
   d6c54:	4618      	mov	r0, r3
   d6c56:	e6fd      	b.n	d6a54 <__udivmoddi4+0x8c>
   d6c58:	4543      	cmp	r3, r8
   d6c5a:	d2e5      	bcs.n	d6c28 <__udivmoddi4+0x260>
   d6c5c:	ebb8 0e02 	subs.w	lr, r8, r2
   d6c60:	eb69 0104 	sbc.w	r1, r9, r4
   d6c64:	3801      	subs	r0, #1
   d6c66:	e7df      	b.n	d6c28 <__udivmoddi4+0x260>
   d6c68:	4608      	mov	r0, r1
   d6c6a:	e7d2      	b.n	d6c12 <__udivmoddi4+0x24a>
   d6c6c:	4660      	mov	r0, ip
   d6c6e:	e78d      	b.n	d6b8c <__udivmoddi4+0x1c4>
   d6c70:	4681      	mov	r9, r0
   d6c72:	e7b9      	b.n	d6be8 <__udivmoddi4+0x220>
   d6c74:	4666      	mov	r6, ip
   d6c76:	e775      	b.n	d6b64 <__udivmoddi4+0x19c>
   d6c78:	4630      	mov	r0, r6
   d6c7a:	e74a      	b.n	d6b12 <__udivmoddi4+0x14a>
   d6c7c:	f1ac 0c02 	sub.w	ip, ip, #2
   d6c80:	4439      	add	r1, r7
   d6c82:	e713      	b.n	d6aac <__udivmoddi4+0xe4>
   d6c84:	3802      	subs	r0, #2
   d6c86:	443c      	add	r4, r7
   d6c88:	e724      	b.n	d6ad4 <__udivmoddi4+0x10c>
   d6c8a:	bf00      	nop

000d6c8c <__aeabi_idiv0>:
   d6c8c:	4770      	bx	lr
   d6c8e:	bf00      	nop

000d6c90 <__cxa_atexit>:
   d6c90:	b510      	push	{r4, lr}
   d6c92:	4c05      	ldr	r4, [pc, #20]	; (d6ca8 <__cxa_atexit+0x18>)
   d6c94:	4613      	mov	r3, r2
   d6c96:	b12c      	cbz	r4, d6ca4 <__cxa_atexit+0x14>
   d6c98:	460a      	mov	r2, r1
   d6c9a:	4601      	mov	r1, r0
   d6c9c:	2002      	movs	r0, #2
   d6c9e:	f3af 8000 	nop.w
   d6ca2:	bd10      	pop	{r4, pc}
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	e7fc      	b.n	d6ca2 <__cxa_atexit+0x12>
   d6ca8:	00000000 	.word	0x00000000

000d6cac <memcpy>:
   d6cac:	440a      	add	r2, r1
   d6cae:	4291      	cmp	r1, r2
   d6cb0:	f100 33ff 	add.w	r3, r0, #4294967295
   d6cb4:	d100      	bne.n	d6cb8 <memcpy+0xc>
   d6cb6:	4770      	bx	lr
   d6cb8:	b510      	push	{r4, lr}
   d6cba:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6cc2:	4291      	cmp	r1, r2
   d6cc4:	d1f9      	bne.n	d6cba <memcpy+0xe>
   d6cc6:	bd10      	pop	{r4, pc}

000d6cc8 <memset>:
   d6cc8:	4402      	add	r2, r0
   d6cca:	4603      	mov	r3, r0
   d6ccc:	4293      	cmp	r3, r2
   d6cce:	d100      	bne.n	d6cd2 <memset+0xa>
   d6cd0:	4770      	bx	lr
   d6cd2:	f803 1b01 	strb.w	r1, [r3], #1
   d6cd6:	e7f9      	b.n	d6ccc <memset+0x4>

000d6cd8 <srand>:
   d6cd8:	b538      	push	{r3, r4, r5, lr}
   d6cda:	4b0d      	ldr	r3, [pc, #52]	; (d6d10 <srand+0x38>)
   d6cdc:	681d      	ldr	r5, [r3, #0]
   d6cde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6ce0:	4604      	mov	r4, r0
   d6ce2:	b97b      	cbnz	r3, d6d04 <srand+0x2c>
   d6ce4:	2018      	movs	r0, #24
   d6ce6:	f7fd fee5 	bl	d4ab4 <malloc>
   d6cea:	4a0a      	ldr	r2, [pc, #40]	; (d6d14 <srand+0x3c>)
   d6cec:	4b0a      	ldr	r3, [pc, #40]	; (d6d18 <srand+0x40>)
   d6cee:	63a8      	str	r0, [r5, #56]	; 0x38
   d6cf0:	e9c0 2300 	strd	r2, r3, [r0]
   d6cf4:	4b09      	ldr	r3, [pc, #36]	; (d6d1c <srand+0x44>)
   d6cf6:	6083      	str	r3, [r0, #8]
   d6cf8:	230b      	movs	r3, #11
   d6cfa:	8183      	strh	r3, [r0, #12]
   d6cfc:	2201      	movs	r2, #1
   d6cfe:	2300      	movs	r3, #0
   d6d00:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6d04:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6d06:	2200      	movs	r2, #0
   d6d08:	611c      	str	r4, [r3, #16]
   d6d0a:	615a      	str	r2, [r3, #20]
   d6d0c:	bd38      	pop	{r3, r4, r5, pc}
   d6d0e:	bf00      	nop
   d6d10:	2003e6bc 	.word	0x2003e6bc
   d6d14:	abcd330e 	.word	0xabcd330e
   d6d18:	e66d1234 	.word	0xe66d1234
   d6d1c:	0005deec 	.word	0x0005deec

000d6d20 <strdup>:
   d6d20:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <strdup+0xc>)
   d6d22:	4601      	mov	r1, r0
   d6d24:	6818      	ldr	r0, [r3, #0]
   d6d26:	f000 b803 	b.w	d6d30 <_strdup_r>
   d6d2a:	bf00      	nop
   d6d2c:	2003e6bc 	.word	0x2003e6bc

000d6d30 <_strdup_r>:
   d6d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6d32:	4604      	mov	r4, r0
   d6d34:	4608      	mov	r0, r1
   d6d36:	460d      	mov	r5, r1
   d6d38:	f000 f80f 	bl	d6d5a <strlen>
   d6d3c:	1c42      	adds	r2, r0, #1
   d6d3e:	4611      	mov	r1, r2
   d6d40:	4620      	mov	r0, r4
   d6d42:	9201      	str	r2, [sp, #4]
   d6d44:	f7fd fed6 	bl	d4af4 <_malloc_r>
   d6d48:	4604      	mov	r4, r0
   d6d4a:	b118      	cbz	r0, d6d54 <_strdup_r+0x24>
   d6d4c:	9a01      	ldr	r2, [sp, #4]
   d6d4e:	4629      	mov	r1, r5
   d6d50:	f7ff ffac 	bl	d6cac <memcpy>
   d6d54:	4620      	mov	r0, r4
   d6d56:	b003      	add	sp, #12
   d6d58:	bd30      	pop	{r4, r5, pc}

000d6d5a <strlen>:
   d6d5a:	4603      	mov	r3, r0
   d6d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d60:	2a00      	cmp	r2, #0
   d6d62:	d1fb      	bne.n	d6d5c <strlen+0x2>
   d6d64:	1a18      	subs	r0, r3, r0
   d6d66:	3801      	subs	r0, #1
   d6d68:	4770      	bx	lr

000d6d6a <link_code_end>:
	...

000d6d6c <dynalib_user>:
   d6d6c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d6d7c:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
   d6d8c:	0079 0000                                   y...

000d6d90 <_ZTVN5spark13EthernetClassE>:
	...
   d6d98:	4b83 000d 4b79 000d 4b6f 000d 4b65 000d     .K..yK..oK..eK..
   d6da8:	4b59 000d 4b4d 000d 4b41 000d 4b39 000d     YK..MK..AK..9K..
   d6db8:	4b2f 000d 4b25 000d 5a99 000d 7061 0070     /K..%K...Z..app.
   d6dc8:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d6dd8:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d6de4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6dec:	50b9 000d 50bf 000d 50fd 000d 50cd 000d     .P...P...P...P..
   d6dfc:	50bb 000d                                   .P..

000d6e00 <_ZTV9IPAddress>:
	...
   d6e08:	5601 000d 55f1 000d 55f3 000d               .V...U...U..

000d6e14 <_ZTV9USBSerial>:
	...
   d6e1c:	56d7 000d 573f 000d 5715 000d 4e79 000d     .V..?W...W..yN..
   d6e2c:	5707 000d 56d9 000d 56e9 000d 5739 000d     .W...V...V..9W..
   d6e3c:	56f9 000d 56d3 000d                         .V...V..

000d6e44 <_ZTV11USARTSerial>:
	...
   d6e4c:	57e1 000d 584d 000d 5825 000d 4e79 000d     .W..MX..%X..yN..
   d6e5c:	57f5 000d 5811 000d 5803 000d 581f 000d     .W...X...X...X..
   d6e6c:	57e3 000d 57e7 000d                         .W...W..

000d6e74 <_ZTV7TwoWire>:
	...
   d6e7c:	5939 000d 5983 000d 595b 000d 593b 000d     9Y...Y..[Y..;Y..
   d6e8c:	5963 000d 596b 000d 5973 000d 597b 000d     cY..kY..sY..{Y..

000d6e9c <_ZTVN5spark9WiFiClassE>:
	...
   d6ea4:	5a13 000d 5a09 000d 59ff 000d 59b5 000d     .Z...Z...Y...Y..
   d6eb4:	59f3 000d 59e7 000d 59db 000d 59d3 000d     .Y...Y...Y...Y..
   d6ec4:	59c9 000d 59bf 000d 5a99 000d               .Y...Y...Z..

000d6ed0 <_ZTVN5spark12NetworkClassE>:
	...
   d6ed8:	5a31 000d 5a3b 000d 5a45 000d 5a4f 000d     1Z..;Z..EZ..OZ..
   d6ee8:	5a59 000d 5a65 000d 5a71 000d 5a7d 000d     YZ..eZ..qZ..}Z..
   d6ef8:	5a85 000d 5a8f 000d 5a99 000d               .Z...Z...Z..

000d6f04 <_ZSt7nothrow>:
   d6f04:	0000 0000 6f6c 6667                          ....logf.

000d6f0d <link_const_variable_data_end>:
   d6f0d:	00          	.byte	0x00
	...

000d6f10 <link_constructors_location>:
   d6f10:	000d417d 	.word	0x000d417d
   d6f14:	000d4b8d 	.word	0x000d4b8d
   d6f18:	000d4bd5 	.word	0x000d4bd5
   d6f1c:	000d4e51 	.word	0x000d4e51
   d6f20:	000d4f0d 	.word	0x000d4f0d
   d6f24:	000d4f1d 	.word	0x000d4f1d
   d6f28:	000d4f79 	.word	0x000d4f79
   d6f2c:	000d5a1d 	.word	0x000d5a1d
   d6f30:	000d5b6d 	.word	0x000d5b6d

000d6f34 <link_constructors_end>:
	...
