
d:/SIT210_Projects_NWS/Particle_Data_ToWeb/ParticleToWeb/target/2.0.1/photon/ParticleToWeb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000033d0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a33f0  080a33f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a33f8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080a33fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004fc  2000006c  2000006c  0003006c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a3468  080a3468  00023468  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a3490  080a3490  00023490  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00127d1f  00000000  00000000  00023494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00015bb7  00000000  00000000  0014b1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001b99d  00000000  00000000  00160d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002110  00000000  00000000  0017c707  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000053f0  00000000  00000000  0017e817  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00028906  00000000  00000000  00183c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002fe84  00000000  00000000  001ac50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b2115  00000000  00000000  001dc391  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00005904  00000000  00000000  0028e4a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f8b3 	bl	80a319c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f8bb 	bl	80a31b8 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a33fc 	.word	0x080a33fc
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	20000568 	.word	0x20000568
 80a005c:	20000568 	.word	0x20000568

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 ff2b 	bl	80a0ebc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a33c8 	.word	0x080a33c8
 80a0084:	080a33e8 	.word	0x080a33e8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b816 	b.w	80a00b8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f82f 	bl	80a00f0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 bed3 	b.w	80a0e40 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f000 bc87 	b.w	80a09ac <malloc>

080a009e <_Znaj>:
 80a009e:	f000 bc85 	b.w	80a09ac <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f000 bc8b 	b.w	80a09bc <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <setup>:
DHT dht(DHTPIN, DHTTYPE);

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  dht.begin();
 80a00b8:	4801      	ldr	r0, [pc, #4]	; (80a00c0 <setup+0x8>)
 80a00ba:	f000 b87b 	b.w	80a01b4 <_ZN3DHT5beginEv>
 80a00be:	bf00      	nop
 80a00c0:	20000074 	.word	0x20000074

080a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00c6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00c8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00ca:	b17c      	cbz	r4, 80a00ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00cc:	6863      	ldr	r3, [r4, #4]
 80a00ce:	3b01      	subs	r3, #1
 80a00d0:	6063      	str	r3, [r4, #4]
 80a00d2:	b95b      	cbnz	r3, 80a00ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00d4:	6823      	ldr	r3, [r4, #0]
 80a00d6:	4620      	mov	r0, r4
 80a00d8:	689b      	ldr	r3, [r3, #8]
 80a00da:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00dc:	68a3      	ldr	r3, [r4, #8]
 80a00de:	3b01      	subs	r3, #1
 80a00e0:	60a3      	str	r3, [r4, #8]
 80a00e2:	b91b      	cbnz	r3, 80a00ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00e4:	6823      	ldr	r3, [r4, #0]
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	68db      	ldr	r3, [r3, #12]
 80a00ea:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00ec:	4628      	mov	r0, r5
 80a00ee:	bd38      	pop	{r3, r4, r5, pc}

080a00f0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00f0:	b510      	push	{r4, lr}
  delay(2000);

  String temp = String(dht.getTempCelcius());
 80a00f2:	4c21      	ldr	r4, [pc, #132]	; (80a0178 <loop+0x88>)
void loop() {
 80a00f4:	b090      	sub	sp, #64	; 0x40
  delay(2000);
 80a00f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a00fa:	f000 fe39 	bl	80a0d70 <delay>
  String temp = String(dht.getTempCelcius());
 80a00fe:	4620      	mov	r0, r4
 80a0100:	f000 fa72 	bl	80a05e8 <_ZN3DHT14getTempCelciusEv>
 80a0104:	2206      	movs	r2, #6
 80a0106:	4601      	mov	r1, r0
 80a0108:	a804      	add	r0, sp, #16
 80a010a:	f000 fdb4 	bl	80a0c76 <_ZN6StringC1Efi>

  String humidity = String(dht.getHumidity());
 80a010e:	4620      	mov	r0, r4
 80a0110:	f000 fa94 	bl	80a063c <_ZN3DHT11getHumidityEv>
 80a0114:	2206      	movs	r2, #6
 80a0116:	4601      	mov	r1, r0
 80a0118:	a808      	add	r0, sp, #32
 80a011a:	f000 fdac 	bl	80a0c76 <_ZN6StringC1Efi>

  String dewp = String(dht.getDewPoint());
 80a011e:	4620      	mov	r0, r4
 80a0120:	f000 fa8e 	bl	80a0640 <_ZN3DHT11getDewPointEv>
 80a0124:	4c15      	ldr	r4, [pc, #84]	; (80a017c <loop+0x8c>)
 80a0126:	4601      	mov	r1, r0
 80a0128:	2206      	movs	r2, #6
 80a012a:	a80c      	add	r0, sp, #48	; 0x30
 80a012c:	f000 fda3 	bl	80a0c76 <_ZN6StringC1Efi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0130:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0132:	9a04      	ldr	r2, [sp, #16]
 80a0134:	4912      	ldr	r1, [pc, #72]	; (80a0180 <loop+0x90>)
 80a0136:	f88d 3000 	strb.w	r3, [sp]
 80a013a:	a802      	add	r0, sp, #8
 80a013c:	233c      	movs	r3, #60	; 0x3c
 80a013e:	f001 f815 	bl	80a116c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0142:	a803      	add	r0, sp, #12
 80a0144:	f7ff ffbe 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0148:	7823      	ldrb	r3, [r4, #0]
 80a014a:	9a08      	ldr	r2, [sp, #32]
 80a014c:	490d      	ldr	r1, [pc, #52]	; (80a0184 <loop+0x94>)
 80a014e:	f88d 3000 	strb.w	r3, [sp]
 80a0152:	a802      	add	r0, sp, #8
 80a0154:	233c      	movs	r3, #60	; 0x3c
 80a0156:	f001 f809 	bl	80a116c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a015a:	a803      	add	r0, sp, #12
 80a015c:	f7ff ffb2 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0160:	a80c      	add	r0, sp, #48	; 0x30
 80a0162:	f000 fd2d 	bl	80a0bc0 <_ZN6StringD1Ev>
  String humidity = String(dht.getHumidity());
 80a0166:	a808      	add	r0, sp, #32
 80a0168:	f000 fd2a 	bl	80a0bc0 <_ZN6StringD1Ev>
  String temp = String(dht.getTempCelcius());
 80a016c:	a804      	add	r0, sp, #16
 80a016e:	f000 fd27 	bl	80a0bc0 <_ZN6StringD1Ev>

  Particle.publish("temp", temp, PRIVATE);
  Particle.publish("humidity", humidity, PRIVATE);


 80a0172:	b010      	add	sp, #64	; 0x40
 80a0174:	bd10      	pop	{r4, pc}
 80a0176:	bf00      	nop
 80a0178:	20000074 	.word	0x20000074
 80a017c:	20000070 	.word	0x20000070
 80a0180:	080a326c 	.word	0x080a326c
 80a0184:	080a3271 	.word	0x080a3271

080a0188 <_GLOBAL__sub_I_dht>:
        val_(val) {
 80a0188:	2201      	movs	r2, #1
 80a018a:	4b04      	ldr	r3, [pc, #16]	; (80a019c <_GLOBAL__sub_I_dht+0x14>)
DHT dht(DHTPIN, DHTTYPE);
 80a018c:	2102      	movs	r1, #2
 80a018e:	701a      	strb	r2, [r3, #0]
 80a0190:	4803      	ldr	r0, [pc, #12]	; (80a01a0 <_GLOBAL__sub_I_dht+0x18>)
 80a0192:	2306      	movs	r3, #6
 80a0194:	2216      	movs	r2, #22
 80a0196:	f000 b805 	b.w	80a01a4 <_ZN3DHTC1Ehhh>
 80a019a:	bf00      	nop
 80a019c:	20000070 	.word	0x20000070
 80a01a0:	20000074 	.word	0x20000074

080a01a4 <_ZN3DHTC1Ehhh>:
#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
	_type = type;
	_count = count;
 80a01a4:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a01a6:	2301      	movs	r3, #1
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a01a8:	b510      	push	{r4, lr}
	_pin = pin;
 80a01aa:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a01ac:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
 80a01ae:	7403      	strb	r3, [r0, #16]
}
 80a01b0:	bd10      	pop	{r4, pc}
	...

080a01b4 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a01b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a01b8:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a01ba:	4c1a      	ldr	r4, [pc, #104]	; (80a0224 <_ZN3DHT5beginEv+0x70>)
// set up the pins!
	pinMode(_pin, INPUT);
 80a01bc:	2100      	movs	r1, #0
 80a01be:	7980      	ldrb	r0, [r0, #6]
 80a01c0:	f001 fc58 	bl	80a1a74 <pinMode>
	pinSetFast(_pin);
 80a01c4:	79ae      	ldrb	r6, [r5, #6]
 80a01c6:	7823      	ldrb	r3, [r4, #0]
 80a01c8:	4f17      	ldr	r7, [pc, #92]	; (80a0228 <_ZN3DHT5beginEv+0x74>)
 80a01ca:	f013 0f01 	tst.w	r3, #1
 80a01ce:	f3bf 8f5b 	dmb	ish
 80a01d2:	d109      	bne.n	80a01e8 <_ZN3DHT5beginEv+0x34>
 80a01d4:	4620      	mov	r0, r4
 80a01d6:	f7ff ff66 	bl	80a00a6 <__cxa_guard_acquire>
 80a01da:	b128      	cbz	r0, 80a01e8 <_ZN3DHT5beginEv+0x34>
 80a01dc:	f000 fa40 	bl	80a0660 <HAL_Pin_Map>
 80a01e0:	6038      	str	r0, [r7, #0]
 80a01e2:	4620      	mov	r0, r4
 80a01e4:	f7ff ff64 	bl	80a00b0 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a01e8:	231c      	movs	r3, #28
 80a01ea:	435e      	muls	r6, r3
 80a01ec:	683b      	ldr	r3, [r7, #0]
 80a01ee:	eb03 0806 	add.w	r8, r3, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a01f2:	7823      	ldrb	r3, [r4, #0]
 80a01f4:	f3bf 8f5b 	dmb	ish
 80a01f8:	07db      	lsls	r3, r3, #31
 80a01fa:	d409      	bmi.n	80a0210 <_ZN3DHT5beginEv+0x5c>
 80a01fc:	4809      	ldr	r0, [pc, #36]	; (80a0224 <_ZN3DHT5beginEv+0x70>)
 80a01fe:	f7ff ff52 	bl	80a00a6 <__cxa_guard_acquire>
 80a0202:	b128      	cbz	r0, 80a0210 <_ZN3DHT5beginEv+0x5c>
 80a0204:	f000 fa2c 	bl	80a0660 <HAL_Pin_Map>
 80a0208:	6038      	str	r0, [r7, #0]
 80a020a:	4806      	ldr	r0, [pc, #24]	; (80a0224 <_ZN3DHT5beginEv+0x70>)
 80a020c:	f7ff ff50 	bl	80a00b0 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0210:	683b      	ldr	r3, [r7, #0]
 80a0212:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a0216:	599b      	ldr	r3, [r3, r6]
 80a0218:	831a      	strh	r2, [r3, #24]
	_lastreadtime = 0;
 80a021a:	2300      	movs	r3, #0
 80a021c:	60eb      	str	r3, [r5, #12]
}
 80a021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0222:	bf00      	nop
 80a0224:	20000088 	.word	0x20000088
 80a0228:	2000008c 	.word	0x2000008c
 80a022c:	00000000 	.word	0x00000000

080a0230 <_ZN3DHT15computeDewPointEff>:
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
}

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
 80a0230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
 80a0234:	4608      	mov	r0, r1
float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
 80a0236:	4616      	mov	r6, r2
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
 80a0238:	f001 ffbc 	bl	80a21b4 <__aeabi_f2d>
 80a023c:	4604      	mov	r4, r0
 80a023e:	460d      	mov	r5, r1
 80a0240:	4630      	mov	r0, r6
 80a0242:	4925      	ldr	r1, [pc, #148]	; (80a02d8 <_ZN3DHT15computeDewPointEff+0xa8>)
 80a0244:	f002 fcda 	bl	80a2bfc <__aeabi_fdiv>
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 80a0248:	f001 fc8a 	bl	80a1b60 <logf>
 80a024c:	a31e      	add	r3, pc, #120	; (adr r3, 80a02c8 <_ZN3DHT15computeDewPointEff+0x98>)
 80a024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0252:	4606      	mov	r6, r0
 80a0254:	4629      	mov	r1, r5
 80a0256:	4620      	mov	r0, r4
 80a0258:	f002 f804 	bl	80a2264 <__aeabi_dmul>
 80a025c:	a31c      	add	r3, pc, #112	; (adr r3, 80a02d0 <_ZN3DHT15computeDewPointEff+0xa0>)
 80a025e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0262:	4680      	mov	r8, r0
 80a0264:	4689      	mov	r9, r1
 80a0266:	4620      	mov	r0, r4
 80a0268:	4629      	mov	r1, r5
 80a026a:	f001 fe45 	bl	80a1ef8 <__adddf3>
 80a026e:	4602      	mov	r2, r0
 80a0270:	460b      	mov	r3, r1
 80a0272:	4640      	mov	r0, r8
 80a0274:	4649      	mov	r1, r9
 80a0276:	f002 f91f 	bl	80a24b8 <__aeabi_ddiv>
 80a027a:	4604      	mov	r4, r0
 80a027c:	4630      	mov	r0, r6
 80a027e:	460d      	mov	r5, r1
 80a0280:	f001 ff98 	bl	80a21b4 <__aeabi_f2d>
 80a0284:	4602      	mov	r2, r0
 80a0286:	460b      	mov	r3, r1
 80a0288:	4620      	mov	r0, r4
 80a028a:	4629      	mov	r1, r5
 80a028c:	f001 fe34 	bl	80a1ef8 <__adddf3>
	double Td = (b * tC) / (a - tC);
 80a0290:	a30f      	add	r3, pc, #60	; (adr r3, 80a02d0 <_ZN3DHT15computeDewPointEff+0xa0>)
 80a0292:	e9d3 2300 	ldrd	r2, r3, [r3]
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
 80a0296:	4606      	mov	r6, r0
 80a0298:	460f      	mov	r7, r1
	double Td = (b * tC) / (a - tC);
 80a029a:	f001 ffe3 	bl	80a2264 <__aeabi_dmul>
 80a029e:	4632      	mov	r2, r6
 80a02a0:	4604      	mov	r4, r0
 80a02a2:	460d      	mov	r5, r1
 80a02a4:	a108      	add	r1, pc, #32	; (adr r1, 80a02c8 <_ZN3DHT15computeDewPointEff+0x98>)
 80a02a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a02aa:	463b      	mov	r3, r7
 80a02ac:	f001 fe22 	bl	80a1ef4 <__aeabi_dsub>
 80a02b0:	4602      	mov	r2, r0
 80a02b2:	460b      	mov	r3, r1
 80a02b4:	4620      	mov	r0, r4
 80a02b6:	4629      	mov	r1, r5
 80a02b8:	f002 f8fe 	bl	80a24b8 <__aeabi_ddiv>
	return Td;
 80a02bc:	f002 fa8c 	bl	80a27d8 <__aeabi_d2f>
}
 80a02c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a02c4:	f3af 8000 	nop.w
 80a02c8:	4189374c 	.word	0x4189374c
 80a02cc:	40314560 	.word	0x40314560
 80a02d0:	66666666 	.word	0x66666666
 80a02d4:	406db666 	.word	0x406db666
 80a02d8:	42c80000 	.word	0x42c80000

080a02dc <_ZN3DHT4readEv>:

boolean DHT::read(void) {
 80a02dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a02e0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a02e2:	f000 f9ed 	bl	80a06c0 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a02e6:	68e3      	ldr	r3, [r4, #12]
 80a02e8:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a02ea:	bf84      	itt	hi
 80a02ec:	2300      	movhi	r3, #0
 80a02ee:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a02f0:	7c23      	ldrb	r3, [r4, #16]
 80a02f2:	b92b      	cbnz	r3, 80a0300 <_ZN3DHT4readEv+0x24>
 80a02f4:	68e3      	ldr	r3, [r4, #12]
 80a02f6:	1ac0      	subs	r0, r0, r3
 80a02f8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a02fc:	f0c0 813e 	bcc.w	80a057c <_ZN3DHT4readEv+0x2a0>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a0300:	2500      	movs	r5, #0
 80a0302:	7425      	strb	r5, [r4, #16]
 80a0304:	f000 f9dc 	bl	80a06c0 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0308:	4e9e      	ldr	r6, [pc, #632]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a030a:	6025      	str	r5, [r4, #0]
 80a030c:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
 80a030e:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
 80a0310:	79a7      	ldrb	r7, [r4, #6]
 80a0312:	7833      	ldrb	r3, [r6, #0]
 80a0314:	4d9c      	ldr	r5, [pc, #624]	; (80a0588 <_ZN3DHT4readEv+0x2ac>)
 80a0316:	f013 0f01 	tst.w	r3, #1
 80a031a:	f3bf 8f5b 	dmb	ish
 80a031e:	d109      	bne.n	80a0334 <_ZN3DHT4readEv+0x58>
 80a0320:	4630      	mov	r0, r6
 80a0322:	f7ff fec0 	bl	80a00a6 <__cxa_guard_acquire>
 80a0326:	b128      	cbz	r0, 80a0334 <_ZN3DHT4readEv+0x58>
 80a0328:	f000 f99a 	bl	80a0660 <HAL_Pin_Map>
 80a032c:	6028      	str	r0, [r5, #0]
 80a032e:	4630      	mov	r0, r6
 80a0330:	f7ff febe 	bl	80a00b0 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0334:	231c      	movs	r3, #28
 80a0336:	435f      	muls	r7, r3
 80a0338:	682b      	ldr	r3, [r5, #0]
 80a033a:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a033e:	7833      	ldrb	r3, [r6, #0]
 80a0340:	f3bf 8f5b 	dmb	ish
 80a0344:	07d9      	lsls	r1, r3, #31
 80a0346:	d409      	bmi.n	80a035c <_ZN3DHT4readEv+0x80>
 80a0348:	488e      	ldr	r0, [pc, #568]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a034a:	f7ff feac 	bl	80a00a6 <__cxa_guard_acquire>
 80a034e:	b128      	cbz	r0, 80a035c <_ZN3DHT4readEv+0x80>
 80a0350:	f000 f986 	bl	80a0660 <HAL_Pin_Map>
 80a0354:	6028      	str	r0, [r5, #0]
 80a0356:	488b      	ldr	r0, [pc, #556]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a0358:	f7ff feaa 	bl	80a00b0 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a035c:	682b      	ldr	r3, [r5, #0]
 80a035e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a0362:	59db      	ldr	r3, [r3, r7]
	delay(250);
 80a0364:	20fa      	movs	r0, #250	; 0xfa
 80a0366:	831a      	strh	r2, [r3, #24]
 80a0368:	f000 fd02 	bl	80a0d70 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a036c:	2101      	movs	r1, #1
 80a036e:	79a0      	ldrb	r0, [r4, #6]
 80a0370:	f001 fb80 	bl	80a1a74 <pinMode>
	pinResetFast(_pin);
 80a0374:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0376:	7833      	ldrb	r3, [r6, #0]
 80a0378:	f3bf 8f5b 	dmb	ish
 80a037c:	07da      	lsls	r2, r3, #31
 80a037e:	d409      	bmi.n	80a0394 <_ZN3DHT4readEv+0xb8>
 80a0380:	4880      	ldr	r0, [pc, #512]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a0382:	f7ff fe90 	bl	80a00a6 <__cxa_guard_acquire>
 80a0386:	b128      	cbz	r0, 80a0394 <_ZN3DHT4readEv+0xb8>
 80a0388:	f000 f96a 	bl	80a0660 <HAL_Pin_Map>
 80a038c:	6028      	str	r0, [r5, #0]
 80a038e:	487d      	ldr	r0, [pc, #500]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a0390:	f7ff fe8e 	bl	80a00b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a0394:	231c      	movs	r3, #28
 80a0396:	435f      	muls	r7, r3
 80a0398:	682b      	ldr	r3, [r5, #0]
 80a039a:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a039e:	7833      	ldrb	r3, [r6, #0]
 80a03a0:	f3bf 8f5b 	dmb	ish
 80a03a4:	07db      	lsls	r3, r3, #31
 80a03a6:	d409      	bmi.n	80a03bc <_ZN3DHT4readEv+0xe0>
 80a03a8:	4876      	ldr	r0, [pc, #472]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a03aa:	f7ff fe7c 	bl	80a00a6 <__cxa_guard_acquire>
 80a03ae:	b128      	cbz	r0, 80a03bc <_ZN3DHT4readEv+0xe0>
 80a03b0:	f000 f956 	bl	80a0660 <HAL_Pin_Map>
 80a03b4:	6028      	str	r0, [r5, #0]
 80a03b6:	4873      	ldr	r0, [pc, #460]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a03b8:	f7ff fe7a 	bl	80a00b0 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a03bc:	682b      	ldr	r3, [r5, #0]
 80a03be:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a03c2:	59db      	ldr	r3, [r3, r7]
	delay(20);
 80a03c4:	2014      	movs	r0, #20
 80a03c6:	835a      	strh	r2, [r3, #26]
 80a03c8:	f000 fcd2 	bl	80a0d70 <delay>
	noInterrupts();
 80a03cc:	f001 f974 	bl	80a16b8 <_Z12noInterruptsv>
	pinSetFast(_pin);
 80a03d0:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a03d2:	7833      	ldrb	r3, [r6, #0]
 80a03d4:	f3bf 8f5b 	dmb	ish
 80a03d8:	07d8      	lsls	r0, r3, #31
 80a03da:	d409      	bmi.n	80a03f0 <_ZN3DHT4readEv+0x114>
 80a03dc:	4869      	ldr	r0, [pc, #420]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a03de:	f7ff fe62 	bl	80a00a6 <__cxa_guard_acquire>
 80a03e2:	b128      	cbz	r0, 80a03f0 <_ZN3DHT4readEv+0x114>
 80a03e4:	f000 f93c 	bl	80a0660 <HAL_Pin_Map>
 80a03e8:	6028      	str	r0, [r5, #0]
 80a03ea:	4866      	ldr	r0, [pc, #408]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a03ec:	f7ff fe60 	bl	80a00b0 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a03f0:	231c      	movs	r3, #28
 80a03f2:	435f      	muls	r7, r3
 80a03f4:	682b      	ldr	r3, [r5, #0]
 80a03f6:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a03fa:	7833      	ldrb	r3, [r6, #0]
 80a03fc:	f3bf 8f5b 	dmb	ish
 80a0400:	07d9      	lsls	r1, r3, #31
 80a0402:	d409      	bmi.n	80a0418 <_ZN3DHT4readEv+0x13c>
 80a0404:	485f      	ldr	r0, [pc, #380]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a0406:	f7ff fe4e 	bl	80a00a6 <__cxa_guard_acquire>
 80a040a:	b128      	cbz	r0, 80a0418 <_ZN3DHT4readEv+0x13c>
 80a040c:	f000 f928 	bl	80a0660 <HAL_Pin_Map>
 80a0410:	6028      	str	r0, [r5, #0]
 80a0412:	485c      	ldr	r0, [pc, #368]	; (80a0584 <_ZN3DHT4readEv+0x2a8>)
 80a0414:	f7ff fe4c 	bl	80a00b0 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0418:	682b      	ldr	r3, [r5, #0]
 80a041a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a041e:	59db      	ldr	r3, [r3, r7]
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a0420:	2700      	movs	r7, #0
 80a0422:	831a      	strh	r2, [r3, #24]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0424:	2028      	movs	r0, #40	; 0x28
 80a0426:	f000 f943 	bl	80a06b0 <HAL_Delay_Microseconds>
	pinMode(_pin, INPUT);
 80a042a:	2100      	movs	r1, #0
 80a042c:	79a0      	ldrb	r0, [r4, #6]
 80a042e:	f001 fb21 	bl	80a1a74 <pinMode>
	uint8_t laststate = HIGH;
 80a0432:	2301      	movs	r3, #1
	uint8_t j = 0, i;
 80a0434:	46ba      	mov	sl, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0436:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80a0584 <_ZN3DHT4readEv+0x2a8>
	uint8_t laststate = HIGH;
 80a043a:	9300      	str	r3, [sp, #0]
		counter = 0;
 80a043c:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
 80a0440:	f894 b006 	ldrb.w	fp, [r4, #6]
 80a0444:	7833      	ldrb	r3, [r6, #0]
 80a0446:	f3bf 8f5b 	dmb	ish
 80a044a:	07da      	lsls	r2, r3, #31
 80a044c:	d409      	bmi.n	80a0462 <_ZN3DHT4readEv+0x186>
 80a044e:	4640      	mov	r0, r8
 80a0450:	f7ff fe29 	bl	80a00a6 <__cxa_guard_acquire>
 80a0454:	b128      	cbz	r0, 80a0462 <_ZN3DHT4readEv+0x186>
 80a0456:	f000 f903 	bl	80a0660 <HAL_Pin_Map>
 80a045a:	6028      	str	r0, [r5, #0]
 80a045c:	4640      	mov	r0, r8
 80a045e:	f7ff fe27 	bl	80a00b0 <__cxa_guard_release>
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0462:	231c      	movs	r3, #28
 80a0464:	fb03 fb0b 	mul.w	fp, r3, fp
 80a0468:	682b      	ldr	r3, [r5, #0]
 80a046a:	f853 300b 	ldr.w	r3, [r3, fp]
 80a046e:	691b      	ldr	r3, [r3, #16]
 80a0470:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0472:	7833      	ldrb	r3, [r6, #0]
 80a0474:	f3bf 8f5b 	dmb	ish
 80a0478:	07db      	lsls	r3, r3, #31
 80a047a:	d409      	bmi.n	80a0490 <_ZN3DHT4readEv+0x1b4>
 80a047c:	4640      	mov	r0, r8
 80a047e:	f7ff fe12 	bl	80a00a6 <__cxa_guard_acquire>
 80a0482:	b128      	cbz	r0, 80a0490 <_ZN3DHT4readEv+0x1b4>
 80a0484:	f000 f8ec 	bl	80a0660 <HAL_Pin_Map>
 80a0488:	6028      	str	r0, [r5, #0]
 80a048a:	4640      	mov	r0, r8
 80a048c:	f7ff fe10 	bl	80a00b0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0490:	682b      	ldr	r3, [r5, #0]
 80a0492:	9a01      	ldr	r2, [sp, #4]
 80a0494:	445b      	add	r3, fp
 80a0496:	889b      	ldrh	r3, [r3, #4]
 80a0498:	4213      	tst	r3, r2
 80a049a:	bf14      	ite	ne
 80a049c:	2301      	movne	r3, #1
 80a049e:	2300      	moveq	r3, #0
 80a04a0:	9a00      	ldr	r2, [sp, #0]
 80a04a2:	4293      	cmp	r3, r2
 80a04a4:	d109      	bne.n	80a04ba <_ZN3DHT4readEv+0x1de>
			counter++;
 80a04a6:	f109 0901 	add.w	r9, r9, #1
 80a04aa:	2001      	movs	r0, #1
 80a04ac:	fa5f f989 	uxtb.w	r9, r9
 80a04b0:	f000 f8fe 	bl	80a06b0 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
 80a04b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80a04b8:	d1c2      	bne.n	80a0440 <_ZN3DHT4readEv+0x164>
				break;
			}
		}
		laststate = pinReadFast(_pin);
 80a04ba:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a04be:	7833      	ldrb	r3, [r6, #0]
 80a04c0:	f3bf 8f5b 	dmb	ish
 80a04c4:	07d8      	lsls	r0, r3, #31
 80a04c6:	d409      	bmi.n	80a04dc <_ZN3DHT4readEv+0x200>
 80a04c8:	4640      	mov	r0, r8
 80a04ca:	f7ff fdec 	bl	80a00a6 <__cxa_guard_acquire>
 80a04ce:	b128      	cbz	r0, 80a04dc <_ZN3DHT4readEv+0x200>
 80a04d0:	f000 f8c6 	bl	80a0660 <HAL_Pin_Map>
 80a04d4:	6028      	str	r0, [r5, #0]
 80a04d6:	4640      	mov	r0, r8
 80a04d8:	f7ff fdea 	bl	80a00b0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a04dc:	231c      	movs	r3, #28
 80a04de:	fb03 fb0b 	mul.w	fp, r3, fp
 80a04e2:	682b      	ldr	r3, [r5, #0]
 80a04e4:	f853 300b 	ldr.w	r3, [r3, fp]
 80a04e8:	691b      	ldr	r3, [r3, #16]
 80a04ea:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a04ec:	7833      	ldrb	r3, [r6, #0]
 80a04ee:	f3bf 8f5b 	dmb	ish
 80a04f2:	07d9      	lsls	r1, r3, #31
 80a04f4:	d409      	bmi.n	80a050a <_ZN3DHT4readEv+0x22e>
 80a04f6:	4640      	mov	r0, r8
 80a04f8:	f7ff fdd5 	bl	80a00a6 <__cxa_guard_acquire>
 80a04fc:	b128      	cbz	r0, 80a050a <_ZN3DHT4readEv+0x22e>
 80a04fe:	f000 f8af 	bl	80a0660 <HAL_Pin_Map>
 80a0502:	6028      	str	r0, [r5, #0]
 80a0504:	4640      	mov	r0, r8
 80a0506:	f7ff fdd3 	bl	80a00b0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a050a:	682b      	ldr	r3, [r5, #0]
 80a050c:	9a00      	ldr	r2, [sp, #0]
 80a050e:	445b      	add	r3, fp
 80a0510:	889b      	ldrh	r3, [r3, #4]
 80a0512:	4213      	tst	r3, r2
 80a0514:	bf14      	ite	ne
 80a0516:	2301      	movne	r3, #1
 80a0518:	2300      	moveq	r3, #0

		if (counter == 255) break;
 80a051a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
 80a051e:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
 80a0520:	d018      	beq.n	80a0554 <_ZN3DHT4readEv+0x278>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a0522:	2f03      	cmp	r7, #3
 80a0524:	d911      	bls.n	80a054a <_ZN3DHT4readEv+0x26e>
 80a0526:	07fa      	lsls	r2, r7, #31
 80a0528:	d40f      	bmi.n	80a054a <_ZN3DHT4readEv+0x26e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a052a:	ea4f 02da 	mov.w	r2, sl, lsr #3
 80a052e:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a0530:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
 80a0534:	005b      	lsls	r3, r3, #1
 80a0536:	b2db      	uxtb	r3, r3
 80a0538:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a053a:	7a21      	ldrb	r1, [r4, #8]
			j++;
 80a053c:	fa5f fa8a 	uxtb.w	sl, sl
			if (counter > _count)
 80a0540:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a0542:	bf3c      	itt	cc
 80a0544:	f043 0301 	orrcc.w	r3, r3, #1
 80a0548:	54a3      	strbcc	r3, [r4, r2]
	for ( i=0; i< MAXTIMINGS; i++) {
 80a054a:	3701      	adds	r7, #1
 80a054c:	b2ff      	uxtb	r7, r7
 80a054e:	2f55      	cmp	r7, #85	; 0x55
 80a0550:	f47f af74 	bne.w	80a043c <_ZN3DHT4readEv+0x160>
		}
	}

	interrupts();
 80a0554:	f001 f8b2 	bl	80a16bc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 80a0558:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
 80a055c:	d910      	bls.n	80a0580 <_ZN3DHT4readEv+0x2a4>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
 80a055e:	7863      	ldrb	r3, [r4, #1]
 80a0560:	7820      	ldrb	r0, [r4, #0]
 80a0562:	4418      	add	r0, r3
 80a0564:	78a3      	ldrb	r3, [r4, #2]
 80a0566:	4418      	add	r0, r3
 80a0568:	78e3      	ldrb	r3, [r4, #3]
 80a056a:	4418      	add	r0, r3
 80a056c:	7923      	ldrb	r3, [r4, #4]
 80a056e:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
 80a0570:	1ac3      	subs	r3, r0, r3
 80a0572:	4258      	negs	r0, r3
 80a0574:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
 80a0576:	b003      	add	sp, #12
 80a0578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
 80a057c:	2001      	movs	r0, #1
 80a057e:	e7fa      	b.n	80a0576 <_ZN3DHT4readEv+0x29a>
	return false;
 80a0580:	2000      	movs	r0, #0
 80a0582:	e7f8      	b.n	80a0576 <_ZN3DHT4readEv+0x29a>
 80a0584:	20000088 	.word	0x20000088
 80a0588:	2000008c 	.word	0x2000008c

080a058c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
 80a058c:	b570      	push	{r4, r5, r6, lr}
 80a058e:	4604      	mov	r4, r0
	if (read()) {
 80a0590:	f7ff fea4 	bl	80a02dc <_ZN3DHT4readEv>
 80a0594:	b308      	cbz	r0, 80a05da <_ZN3DHT15readTemperatureEv+0x4e>
		switch (_type) {
 80a0596:	79e3      	ldrb	r3, [r4, #7]
 80a0598:	2b0b      	cmp	r3, #11
 80a059a:	d01a      	beq.n	80a05d2 <_ZN3DHT15readTemperatureEv+0x46>
 80a059c:	3b15      	subs	r3, #21
 80a059e:	2b01      	cmp	r3, #1
 80a05a0:	d81b      	bhi.n	80a05da <_ZN3DHT15readTemperatureEv+0x4e>
				f = data[2] & 0x7F;
 80a05a2:	78a6      	ldrb	r6, [r4, #2]
 80a05a4:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80a05a8:	f002 fa20 	bl	80a29ec <__aeabi_i2f>
				f *= 256;
 80a05ac:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a05b0:	f002 fa70 	bl	80a2a94 <__aeabi_fmul>
 80a05b4:	4605      	mov	r5, r0
				f += data[3];
 80a05b6:	78e0      	ldrb	r0, [r4, #3]
 80a05b8:	f002 fa18 	bl	80a29ec <__aeabi_i2f>
 80a05bc:	4629      	mov	r1, r5
 80a05be:	f002 f961 	bl	80a2884 <__addsf3>
				f /= 10;
 80a05c2:	4907      	ldr	r1, [pc, #28]	; (80a05e0 <_ZN3DHT15readTemperatureEv+0x54>)
 80a05c4:	f002 fb1a 	bl	80a2bfc <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a05c8:	0633      	lsls	r3, r6, #24
 80a05ca:	d505      	bpl.n	80a05d8 <_ZN3DHT15readTemperatureEv+0x4c>
					f *= -1;
 80a05cc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a05d0:	e002      	b.n	80a05d8 <_ZN3DHT15readTemperatureEv+0x4c>
				f = data[2];
 80a05d2:	78a0      	ldrb	r0, [r4, #2]
 80a05d4:	f002 fa06 	bl	80a29e4 <__aeabi_ui2f>
}
 80a05d8:	bd70      	pop	{r4, r5, r6, pc}
		switch (_type) {
 80a05da:	4802      	ldr	r0, [pc, #8]	; (80a05e4 <_ZN3DHT15readTemperatureEv+0x58>)
 80a05dc:	e7fc      	b.n	80a05d8 <_ZN3DHT15readTemperatureEv+0x4c>
 80a05de:	bf00      	nop
 80a05e0:	41200000 	.word	0x41200000
 80a05e4:	7fc00000 	.word	0x7fc00000

080a05e8 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
 80a05e8:	f7ff bfd0 	b.w	80a058c <_ZN3DHT15readTemperatureEv>

080a05ec <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
 80a05ec:	b538      	push	{r3, r4, r5, lr}
 80a05ee:	4604      	mov	r4, r0
	if (read()) {
 80a05f0:	f7ff fe74 	bl	80a02dc <_ZN3DHT4readEv>
 80a05f4:	b1d8      	cbz	r0, 80a062e <_ZN3DHT12readHumidityEv+0x42>
		switch (_type) {
 80a05f6:	79e3      	ldrb	r3, [r4, #7]
 80a05f8:	2b0b      	cmp	r3, #11
 80a05fa:	d014      	beq.n	80a0626 <_ZN3DHT12readHumidityEv+0x3a>
 80a05fc:	3b15      	subs	r3, #21
 80a05fe:	2b01      	cmp	r3, #1
 80a0600:	d815      	bhi.n	80a062e <_ZN3DHT12readHumidityEv+0x42>
				f = data[0];
 80a0602:	7820      	ldrb	r0, [r4, #0]
 80a0604:	f002 f9ee 	bl	80a29e4 <__aeabi_ui2f>
				f *= 256;
 80a0608:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a060c:	f002 fa42 	bl	80a2a94 <__aeabi_fmul>
 80a0610:	4605      	mov	r5, r0
				f += data[1];
 80a0612:	7860      	ldrb	r0, [r4, #1]
 80a0614:	f002 f9ea 	bl	80a29ec <__aeabi_i2f>
 80a0618:	4629      	mov	r1, r5
 80a061a:	f002 f933 	bl	80a2884 <__addsf3>
				f /= 10;
 80a061e:	4905      	ldr	r1, [pc, #20]	; (80a0634 <_ZN3DHT12readHumidityEv+0x48>)
 80a0620:	f002 faec 	bl	80a2bfc <__aeabi_fdiv>
}
 80a0624:	bd38      	pop	{r3, r4, r5, pc}
				f = data[0];
 80a0626:	7820      	ldrb	r0, [r4, #0]
 80a0628:	f002 f9dc 	bl	80a29e4 <__aeabi_ui2f>
				return f;
 80a062c:	e7fa      	b.n	80a0624 <_ZN3DHT12readHumidityEv+0x38>
		switch (_type) {
 80a062e:	4802      	ldr	r0, [pc, #8]	; (80a0638 <_ZN3DHT12readHumidityEv+0x4c>)
 80a0630:	e7f8      	b.n	80a0624 <_ZN3DHT12readHumidityEv+0x38>
 80a0632:	bf00      	nop
 80a0634:	41200000 	.word	0x41200000
 80a0638:	7fc00000 	.word	0x7fc00000

080a063c <_ZN3DHT11getHumidityEv>:
	return readHumidity();
 80a063c:	f7ff bfd6 	b.w	80a05ec <_ZN3DHT12readHumidityEv>

080a0640 <_ZN3DHT11getDewPointEv>:
float DHT::getDewPoint() {
 80a0640:	b538      	push	{r3, r4, r5, lr}
 80a0642:	4604      	mov	r4, r0
	return computeDewPoint(readTemperature(), readHumidity());
 80a0644:	f7ff ffa2 	bl	80a058c <_ZN3DHT15readTemperatureEv>
 80a0648:	4605      	mov	r5, r0
 80a064a:	4620      	mov	r0, r4
 80a064c:	f7ff ffce 	bl	80a05ec <_ZN3DHT12readHumidityEv>
 80a0650:	4629      	mov	r1, r5
 80a0652:	4602      	mov	r2, r0
 80a0654:	4620      	mov	r0, r4
}
 80a0656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return computeDewPoint(readTemperature(), readHumidity());
 80a065a:	f7ff bde9 	b.w	80a0230 <_ZN3DHT15computeDewPointEff>
	...

080a0660 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <HAL_Pin_Map+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	681b      	ldr	r3, [r3, #0]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601b0 	.word	0x080601b0

080a0670 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <HAL_Pin_Mode+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	689b      	ldr	r3, [r3, #8]
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	080601b0 	.word	0x080601b0

080a0680 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <HAL_Interrupts_Enable_All+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	6a1b      	ldr	r3, [r3, #32]
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	080601b0 	.word	0x080601b0

080a0690 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <HAL_Interrupts_Disable_All+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601b0 	.word	0x080601b0

080a06a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <HAL_RNG_GetRandomNumber+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	685b      	ldr	r3, [r3, #4]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	0806019c 	.word	0x0806019c

080a06b0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <HAL_Delay_Microseconds+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	68db      	ldr	r3, [r3, #12]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	0806019c 	.word	0x0806019c

080a06c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	695b      	ldr	r3, [r3, #20]
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	0806019c 	.word	0x0806019c

080a06d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <os_mutex_recursive_create+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601d0 	.word	0x080601d0

080a06e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <os_mutex_recursive_destroy+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601d0 	.word	0x080601d0

080a06f0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <hal_usart_init+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	699b      	ldr	r3, [r3, #24]
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601c4 	.word	0x080601c4

080a0700 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <hal_usart_write+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601c4 	.word	0x080601c4

080a0710 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <hal_usart_available+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601c4 	.word	0x080601c4

080a0720 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <hal_usart_read+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601c4 	.word	0x080601c4

080a0730 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <hal_usart_peek+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601c4 	.word	0x080601c4

080a0740 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <hal_usart_flush+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601c4 	.word	0x080601c4

080a0750 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <hal_usart_is_enabled+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601c4 	.word	0x080601c4

080a0760 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <hal_usart_available_data_for_write+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601c4 	.word	0x080601c4

080a0770 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <hal_i2c_write+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601ac 	.word	0x080601ac

080a0780 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <hal_i2c_available+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601ac 	.word	0x080601ac

080a0790 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <hal_i2c_read+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601ac 	.word	0x080601ac

080a07a0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <hal_i2c_peek+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601ac 	.word	0x080601ac

080a07b0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <hal_i2c_flush+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601ac 	.word	0x080601ac

080a07c0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <hal_i2c_is_enabled+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601ac 	.word	0x080601ac

080a07d0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b03      	ldr	r3, [pc, #12]	; (80a07e0 <hal_i2c_init+0x10>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a07da:	9301      	str	r3, [sp, #4]
 80a07dc:	bd08      	pop	{r3, pc}
 80a07de:	0000      	.short	0x0000
 80a07e0:	080601ac 	.word	0x080601ac

080a07e4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a07e4:	b508      	push	{r3, lr}
 80a07e6:	4b02      	ldr	r3, [pc, #8]	; (80a07f0 <hal_spi_init+0xc>)
 80a07e8:	681b      	ldr	r3, [r3, #0]
 80a07ea:	69db      	ldr	r3, [r3, #28]
 80a07ec:	9301      	str	r3, [sp, #4]
 80a07ee:	bd08      	pop	{r3, pc}
 80a07f0:	080601b4 	.word	0x080601b4

080a07f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	4b02      	ldr	r3, [pc, #8]	; (80a0800 <hal_spi_is_enabled+0xc>)
 80a07f8:	681b      	ldr	r3, [r3, #0]
 80a07fa:	6a1b      	ldr	r3, [r3, #32]
 80a07fc:	9301      	str	r3, [sp, #4]
 80a07fe:	bd08      	pop	{r3, pc}
 80a0800:	080601b4 	.word	0x080601b4

080a0804 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b02      	ldr	r3, [pc, #8]	; (80a0810 <HAL_USB_USART_Init+0xc>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	681b      	ldr	r3, [r3, #0]
 80a080c:	9301      	str	r3, [sp, #4]
 80a080e:	bd08      	pop	{r3, pc}
 80a0810:	080601d8 	.word	0x080601d8

080a0814 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0814:	b508      	push	{r3, lr}
 80a0816:	4b02      	ldr	r3, [pc, #8]	; (80a0820 <HAL_USB_USART_Available_Data+0xc>)
 80a0818:	681b      	ldr	r3, [r3, #0]
 80a081a:	691b      	ldr	r3, [r3, #16]
 80a081c:	9301      	str	r3, [sp, #4]
 80a081e:	bd08      	pop	{r3, pc}
 80a0820:	080601d8 	.word	0x080601d8

080a0824 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0824:	b508      	push	{r3, lr}
 80a0826:	4b02      	ldr	r3, [pc, #8]	; (80a0830 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0828:	681b      	ldr	r3, [r3, #0]
 80a082a:	695b      	ldr	r3, [r3, #20]
 80a082c:	9301      	str	r3, [sp, #4]
 80a082e:	bd08      	pop	{r3, pc}
 80a0830:	080601d8 	.word	0x080601d8

080a0834 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0834:	b508      	push	{r3, lr}
 80a0836:	4b02      	ldr	r3, [pc, #8]	; (80a0840 <HAL_USB_USART_Receive_Data+0xc>)
 80a0838:	681b      	ldr	r3, [r3, #0]
 80a083a:	699b      	ldr	r3, [r3, #24]
 80a083c:	9301      	str	r3, [sp, #4]
 80a083e:	bd08      	pop	{r3, pc}
 80a0840:	080601d8 	.word	0x080601d8

080a0844 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0844:	b508      	push	{r3, lr}
 80a0846:	4b02      	ldr	r3, [pc, #8]	; (80a0850 <HAL_USB_USART_Send_Data+0xc>)
 80a0848:	681b      	ldr	r3, [r3, #0]
 80a084a:	69db      	ldr	r3, [r3, #28]
 80a084c:	9301      	str	r3, [sp, #4]
 80a084e:	bd08      	pop	{r3, pc}
 80a0850:	080601d8 	.word	0x080601d8

080a0854 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0854:	b508      	push	{r3, lr}
 80a0856:	4b02      	ldr	r3, [pc, #8]	; (80a0860 <HAL_USB_USART_Flush_Data+0xc>)
 80a0858:	681b      	ldr	r3, [r3, #0]
 80a085a:	6a1b      	ldr	r3, [r3, #32]
 80a085c:	9301      	str	r3, [sp, #4]
 80a085e:	bd08      	pop	{r3, pc}
 80a0860:	080601d8 	.word	0x080601d8

080a0864 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0864:	b508      	push	{r3, lr}
 80a0866:	4b02      	ldr	r3, [pc, #8]	; (80a0870 <inet_gethostbyname+0xc>)
 80a0868:	681b      	ldr	r3, [r3, #0]
 80a086a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a086c:	9301      	str	r3, [sp, #4]
 80a086e:	bd08      	pop	{r3, pc}
 80a0870:	080601c0 	.word	0x080601c0

080a0874 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0874:	b508      	push	{r3, lr}
 80a0876:	4b02      	ldr	r3, [pc, #8]	; (80a0880 <set_system_mode+0xc>)
 80a0878:	681b      	ldr	r3, [r3, #0]
 80a087a:	685b      	ldr	r3, [r3, #4]
 80a087c:	9301      	str	r3, [sp, #4]
 80a087e:	bd08      	pop	{r3, pc}
 80a0880:	080601a4 	.word	0x080601a4

080a0884 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0884:	b508      	push	{r3, lr}
 80a0886:	4b02      	ldr	r3, [pc, #8]	; (80a0890 <system_delay_ms+0xc>)
 80a0888:	681b      	ldr	r3, [r3, #0]
 80a088a:	695b      	ldr	r3, [r3, #20]
 80a088c:	9301      	str	r3, [sp, #4]
 80a088e:	bd08      	pop	{r3, pc}
 80a0890:	080601a4 	.word	0x080601a4

080a0894 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0894:	b508      	push	{r3, lr}
 80a0896:	4b02      	ldr	r3, [pc, #8]	; (80a08a0 <application_thread_current+0xc>)
 80a0898:	681b      	ldr	r3, [r3, #0]
 80a089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a089c:	9301      	str	r3, [sp, #4]
 80a089e:	bd08      	pop	{r3, pc}
 80a08a0:	080601a4 	.word	0x080601a4

080a08a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a08a4:	b508      	push	{r3, lr}
 80a08a6:	4b02      	ldr	r3, [pc, #8]	; (80a08b0 <application_thread_invoke+0xc>)
 80a08a8:	681b      	ldr	r3, [r3, #0]
 80a08aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08ac:	9301      	str	r3, [sp, #4]
 80a08ae:	bd08      	pop	{r3, pc}
 80a08b0:	080601a4 	.word	0x080601a4

080a08b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b03      	ldr	r3, [pc, #12]	; (80a08c4 <system_ctrl_set_app_request_handler+0x10>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a08be:	9301      	str	r3, [sp, #4]
 80a08c0:	bd08      	pop	{r3, pc}
 80a08c2:	0000      	.short	0x0000
 80a08c4:	080601a4 	.word	0x080601a4

080a08c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b03      	ldr	r3, [pc, #12]	; (80a08d8 <system_ctrl_set_result+0x10>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a08d2:	9301      	str	r3, [sp, #4]
 80a08d4:	bd08      	pop	{r3, pc}
 80a08d6:	0000      	.short	0x0000
 80a08d8:	080601a4 	.word	0x080601a4

080a08dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <network_connect+0xc>)
 80a08e0:	681b      	ldr	r3, [r3, #0]
 80a08e2:	685b      	ldr	r3, [r3, #4]
 80a08e4:	9301      	str	r3, [sp, #4]
 80a08e6:	bd08      	pop	{r3, pc}
 80a08e8:	080601c8 	.word	0x080601c8

080a08ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a08ec:	b508      	push	{r3, lr}
 80a08ee:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <network_connecting+0xc>)
 80a08f0:	681b      	ldr	r3, [r3, #0]
 80a08f2:	689b      	ldr	r3, [r3, #8]
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	bd08      	pop	{r3, pc}
 80a08f8:	080601c8 	.word	0x080601c8

080a08fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a08fc:	b508      	push	{r3, lr}
 80a08fe:	4b02      	ldr	r3, [pc, #8]	; (80a0908 <network_disconnect+0xc>)
 80a0900:	681b      	ldr	r3, [r3, #0]
 80a0902:	68db      	ldr	r3, [r3, #12]
 80a0904:	9301      	str	r3, [sp, #4]
 80a0906:	bd08      	pop	{r3, pc}
 80a0908:	080601c8 	.word	0x080601c8

080a090c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <network_ready+0xc>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	691b      	ldr	r3, [r3, #16]
 80a0914:	9301      	str	r3, [sp, #4]
 80a0916:	bd08      	pop	{r3, pc}
 80a0918:	080601c8 	.word	0x080601c8

080a091c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <network_on+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	695b      	ldr	r3, [r3, #20]
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601c8 	.word	0x080601c8

080a092c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <network_off+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	699b      	ldr	r3, [r3, #24]
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601c8 	.word	0x080601c8

080a093c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b02      	ldr	r3, [pc, #8]	; (80a0948 <network_listen+0xc>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	69db      	ldr	r3, [r3, #28]
 80a0944:	9301      	str	r3, [sp, #4]
 80a0946:	bd08      	pop	{r3, pc}
 80a0948:	080601c8 	.word	0x080601c8

080a094c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a094c:	b508      	push	{r3, lr}
 80a094e:	4b02      	ldr	r3, [pc, #8]	; (80a0958 <network_listening+0xc>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	6a1b      	ldr	r3, [r3, #32]
 80a0954:	9301      	str	r3, [sp, #4]
 80a0956:	bd08      	pop	{r3, pc}
 80a0958:	080601c8 	.word	0x080601c8

080a095c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a095c:	b508      	push	{r3, lr}
 80a095e:	4b02      	ldr	r3, [pc, #8]	; (80a0968 <network_set_listen_timeout+0xc>)
 80a0960:	681b      	ldr	r3, [r3, #0]
 80a0962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0964:	9301      	str	r3, [sp, #4]
 80a0966:	bd08      	pop	{r3, pc}
 80a0968:	080601c8 	.word	0x080601c8

080a096c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b02      	ldr	r3, [pc, #8]	; (80a0978 <network_get_listen_timeout+0xc>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0974:	9301      	str	r3, [sp, #4]
 80a0976:	bd08      	pop	{r3, pc}
 80a0978:	080601c8 	.word	0x080601c8

080a097c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a097c:	b508      	push	{r3, lr}
 80a097e:	4b02      	ldr	r3, [pc, #8]	; (80a0988 <spark_cloud_flag_connected+0xc>)
 80a0980:	681b      	ldr	r3, [r3, #0]
 80a0982:	695b      	ldr	r3, [r3, #20]
 80a0984:	9301      	str	r3, [sp, #4]
 80a0986:	bd08      	pop	{r3, pc}
 80a0988:	080601cc 	.word	0x080601cc

080a098c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a098c:	b508      	push	{r3, lr}
 80a098e:	4b02      	ldr	r3, [pc, #8]	; (80a0998 <spark_send_event+0xc>)
 80a0990:	681b      	ldr	r3, [r3, #0]
 80a0992:	6a1b      	ldr	r3, [r3, #32]
 80a0994:	9301      	str	r3, [sp, #4]
 80a0996:	bd08      	pop	{r3, pc}
 80a0998:	080601cc 	.word	0x080601cc

080a099c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a099c:	b508      	push	{r3, lr}
 80a099e:	4b02      	ldr	r3, [pc, #8]	; (80a09a8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a09a0:	681b      	ldr	r3, [r3, #0]
 80a09a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a09a4:	9301      	str	r3, [sp, #4]
 80a09a6:	bd08      	pop	{r3, pc}
 80a09a8:	080601cc 	.word	0x080601cc

080a09ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09ac:	b508      	push	{r3, lr}
 80a09ae:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <malloc+0xc>)
 80a09b0:	681b      	ldr	r3, [r3, #0]
 80a09b2:	681b      	ldr	r3, [r3, #0]
 80a09b4:	9301      	str	r3, [sp, #4]
 80a09b6:	bd08      	pop	{r3, pc}
 80a09b8:	080601a0 	.word	0x080601a0

080a09bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a09bc:	b508      	push	{r3, lr}
 80a09be:	4b02      	ldr	r3, [pc, #8]	; (80a09c8 <free+0xc>)
 80a09c0:	681b      	ldr	r3, [r3, #0]
 80a09c2:	685b      	ldr	r3, [r3, #4]
 80a09c4:	9301      	str	r3, [sp, #4]
 80a09c6:	bd08      	pop	{r3, pc}
 80a09c8:	080601a0 	.word	0x080601a0

080a09cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a09cc:	b508      	push	{r3, lr}
 80a09ce:	4b02      	ldr	r3, [pc, #8]	; (80a09d8 <realloc+0xc>)
 80a09d0:	681b      	ldr	r3, [r3, #0]
 80a09d2:	689b      	ldr	r3, [r3, #8]
 80a09d4:	9301      	str	r3, [sp, #4]
 80a09d6:	bd08      	pop	{r3, pc}
 80a09d8:	080601a0 	.word	0x080601a0

080a09dc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b02      	ldr	r3, [pc, #8]	; (80a09e8 <abort+0xc>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a09e4:	9301      	str	r3, [sp, #4]
 80a09e6:	bd08      	pop	{r3, pc}
 80a09e8:	080601a0 	.word	0x080601a0

080a09ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a09ec:	b508      	push	{r3, lr}
 80a09ee:	4b02      	ldr	r3, [pc, #8]	; (80a09f8 <_malloc_r+0xc>)
 80a09f0:	681b      	ldr	r3, [r3, #0]
 80a09f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09f4:	9301      	str	r3, [sp, #4]
 80a09f6:	bd08      	pop	{r3, pc}
 80a09f8:	080601a0 	.word	0x080601a0

080a09fc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <__errno+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601a0 	.word	0x080601a0

080a0a0c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <newlib_impure_ptr_callback+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	080601a0 	.word	0x080601a0

080a0a1c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0a1c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0a1e:	2600      	movs	r6, #0
 80a0a20:	4604      	mov	r4, r0
 80a0a22:	460d      	mov	r5, r1
 80a0a24:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0a28:	f7ff fe52 	bl	80a06d0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0a2c:	4628      	mov	r0, r5
    _spi = spi;
 80a0a2e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0a30:	f7ff fed8 	bl	80a07e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0a34:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0a36:	6066      	str	r6, [r4, #4]
}
 80a0a38:	bd70      	pop	{r4, r5, r6, pc}

080a0a3a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0a3a:	b510      	push	{r4, lr}
 80a0a3c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0a3e:	6800      	ldr	r0, [r0, #0]
 80a0a40:	b118      	cbz	r0, 80a0a4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0a42:	f7ff ffbb 	bl	80a09bc <free>
            wakeupSource_ = nullptr;
 80a0a46:	2300      	movs	r3, #0
 80a0a48:	6023      	str	r3, [r4, #0]
        }
    }
 80a0a4a:	bd10      	pop	{r4, pc}

080a0a4c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0a4c:	b510      	push	{r4, lr}
 80a0a4e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0a50:	f7ff fff3 	bl	80a0a3a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0a54:	4620      	mov	r0, r4
 80a0a56:	bd10      	pop	{r4, pc}

080a0a58 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0a58:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0a5a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0a5c:	b510      	push	{r4, lr}
 80a0a5e:	4b08      	ldr	r3, [pc, #32]	; (80a0a80 <_GLOBAL__sub_I_System+0x28>)
 80a0a60:	4c08      	ldr	r4, [pc, #32]	; (80a0a84 <_GLOBAL__sub_I_System+0x2c>)
 80a0a62:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0a64:	4b08      	ldr	r3, [pc, #32]	; (80a0a88 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0a66:	6020      	str	r0, [r4, #0]
 80a0a68:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0a6a:	71a0      	strb	r0, [r4, #6]
 80a0a6c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0a6e:	f7ff ff01 	bl	80a0874 <set_system_mode>
SystemClass System;
 80a0a72:	4620      	mov	r0, r4
 80a0a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0a78:	4a04      	ldr	r2, [pc, #16]	; (80a0a8c <_GLOBAL__sub_I_System+0x34>)
 80a0a7a:	4905      	ldr	r1, [pc, #20]	; (80a0a90 <_GLOBAL__sub_I_System+0x38>)
 80a0a7c:	f001 b864 	b.w	80a1b48 <__aeabi_atexit>
 80a0a80:	2000009c 	.word	0x2000009c
 80a0a84:	20000090 	.word	0x20000090
 80a0a88:	ffff0000 	.word	0xffff0000
 80a0a8c:	2000006c 	.word	0x2000006c
 80a0a90:	080a0a4d 	.word	0x080a0a4d

080a0a94 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a0a94:	b510      	push	{r4, lr}
 80a0a96:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a0a98:	f002 fbd5 	bl	80a3246 <strlen>
 80a0a9c:	1e43      	subs	r3, r0, #1
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	4423      	add	r3, r4
	while(i<j){
 80a0aa2:	4283      	cmp	r3, r0
 80a0aa4:	d906      	bls.n	80a0ab4 <_Z11str_reversePc+0x20>
		c = *i;
 80a0aa6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0aa8:	7819      	ldrb	r1, [r3, #0]
 80a0aaa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0aae:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a0ab2:	e7f6      	b.n	80a0aa2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a0ab4:	bd10      	pop	{r4, pc}

080a0ab6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a0ab6:	b570      	push	{r4, r5, r6, lr}
 80a0ab8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0aba:	1e91      	subs	r1, r2, #2
 80a0abc:	2922      	cmp	r1, #34	; 0x22
 80a0abe:	d822      	bhi.n	80a0b06 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a0ac0:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a0ac2:	b168      	cbz	r0, 80a0ae0 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a0ac4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0ac8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a0acc:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a0ace:	2809      	cmp	r0, #9
                *ptr += '0';
 80a0ad0:	bf94      	ite	ls
 80a0ad2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a0ad4:	3157      	addhi	r1, #87	; 0x57
 80a0ad6:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a0ad8:	4630      	mov	r0, r6
 80a0ada:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a0ade:	e7f0      	b.n	80a0ac2 <ultoa+0xc>
 80a0ae0:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a0ae2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a0ae4:	4423      	add	r3, r4
 80a0ae6:	4293      	cmp	r3, r2
 80a0ae8:	d902      	bls.n	80a0af0 <ultoa+0x3a>
            *ptr++ = '0';
 80a0aea:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a0aee:	e7fa      	b.n	80a0ae6 <ultoa+0x30>
 80a0af0:	1b5a      	subs	r2, r3, r5
 80a0af2:	42ab      	cmp	r3, r5
 80a0af4:	bf38      	it	cc
 80a0af6:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a0af8:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a0afa:	4620      	mov	r0, r4
	*ptr = '\0';
 80a0afc:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a0afe:	f7ff ffc9 	bl	80a0a94 <_Z11str_reversePc>
	return buffer;
 80a0b02:	4620      	mov	r0, r4
}
 80a0b04:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a0b06:	2000      	movs	r0, #0
 80a0b08:	e7fc      	b.n	80a0b04 <ultoa+0x4e>
	...

080a0b0c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a0b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0b10:	4607      	mov	r7, r0
 80a0b12:	460d      	mov	r5, r1
 80a0b14:	4616      	mov	r6, r2
 80a0b16:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a0b18:	2200      	movs	r2, #0
 80a0b1a:	2300      	movs	r3, #0
 80a0b1c:	4638      	mov	r0, r7
 80a0b1e:	4629      	mov	r1, r5
 80a0b20:	f001 fe12 	bl	80a2748 <__aeabi_dcmplt>
 80a0b24:	b120      	cbz	r0, 80a0b30 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a0b26:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a0b28:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a0b2c:	f804 3b01 	strb.w	r3, [r4], #1
 80a0b30:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a0b32:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a0b36:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a0b38:	b2d9      	uxtb	r1, r3
 80a0b3a:	428e      	cmp	r6, r1
 80a0b3c:	d903      	bls.n	80a0b46 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a0b3e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a0b42:	3301      	adds	r3, #1
 80a0b44:	e7f8      	b.n	80a0b38 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a0b46:	4650      	mov	r0, sl
 80a0b48:	f001 fb22 	bl	80a2190 <__aeabi_i2d>
 80a0b4c:	463a      	mov	r2, r7
 80a0b4e:	462b      	mov	r3, r5
 80a0b50:	f001 fb88 	bl	80a2264 <__aeabi_dmul>
 80a0b54:	4680      	mov	r8, r0
 80a0b56:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a0b58:	f002 f990 	bl	80a2e7c <__aeabi_d2ulz>
 80a0b5c:	4605      	mov	r5, r0
 80a0b5e:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a0b60:	f001 fb4a 	bl	80a21f8 <__aeabi_ul2d>
 80a0b64:	4602      	mov	r2, r0
 80a0b66:	460b      	mov	r3, r1
 80a0b68:	4640      	mov	r0, r8
 80a0b6a:	4649      	mov	r1, r9
 80a0b6c:	f001 f9c2 	bl	80a1ef4 <__aeabi_dsub>
 80a0b70:	2200      	movs	r2, #0
 80a0b72:	4b12      	ldr	r3, [pc, #72]	; (80a0bbc <_Z4dtoadhPc+0xb0>)
 80a0b74:	f001 fdfc 	bl	80a2770 <__aeabi_dcmpge>
 80a0b78:	b110      	cbz	r0, 80a0b80 <_Z4dtoadhPc+0x74>
        fixed++;
 80a0b7a:	3501      	adds	r5, #1
 80a0b7c:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a0b80:	4652      	mov	r2, sl
 80a0b82:	4628      	mov	r0, r5
 80a0b84:	4639      	mov	r1, r7
 80a0b86:	17d3      	asrs	r3, r2, #31
 80a0b88:	f002 f960 	bl	80a2e4c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a0b8c:	2301      	movs	r3, #1
 80a0b8e:	4615      	mov	r5, r2
 80a0b90:	4621      	mov	r1, r4
 80a0b92:	220a      	movs	r2, #10
 80a0b94:	f7ff ff8f 	bl	80a0ab6 <ultoa>
    if (prec) {
 80a0b98:	b16e      	cbz	r6, 80a0bb6 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a0b9a:	4620      	mov	r0, r4
 80a0b9c:	f002 fb53 	bl	80a3246 <strlen>
        *sout++ = '.';
 80a0ba0:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a0ba2:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a0ba4:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a0ba6:	220a      	movs	r2, #10
 80a0ba8:	4633      	mov	r3, r6
 80a0baa:	4628      	mov	r0, r5
    }
}
 80a0bac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a0bb0:	3101      	adds	r1, #1
 80a0bb2:	f7ff bf80 	b.w	80a0ab6 <ultoa>
}
 80a0bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0bba:	bf00      	nop
 80a0bbc:	3fe00000 	.word	0x3fe00000

080a0bc0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0bc0:	b510      	push	{r4, lr}
 80a0bc2:	4604      	mov	r4, r0
{
	free(buffer);
 80a0bc4:	6800      	ldr	r0, [r0, #0]
 80a0bc6:	f7ff fef9 	bl	80a09bc <free>
}
 80a0bca:	4620      	mov	r0, r4
 80a0bcc:	bd10      	pop	{r4, pc}

080a0bce <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0bce:	b510      	push	{r4, lr}
 80a0bd0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0bd2:	6800      	ldr	r0, [r0, #0]
 80a0bd4:	b108      	cbz	r0, 80a0bda <_ZN6String10invalidateEv+0xc>
 80a0bd6:	f7ff fef1 	bl	80a09bc <free>
	buffer = NULL;
 80a0bda:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0bdc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0be0:	6023      	str	r3, [r4, #0]
}
 80a0be2:	bd10      	pop	{r4, pc}

080a0be4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0be4:	b538      	push	{r3, r4, r5, lr}
 80a0be6:	4604      	mov	r4, r0
 80a0be8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0bea:	6800      	ldr	r0, [r0, #0]
 80a0bec:	3101      	adds	r1, #1
 80a0bee:	f7ff feed 	bl	80a09cc <realloc>
	if (newbuffer) {
 80a0bf2:	b110      	cbz	r0, 80a0bfa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0bf4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0bf8:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0bfa:	bd38      	pop	{r3, r4, r5, pc}

080a0bfc <_ZN6String7reserveEj>:
{
 80a0bfc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0bfe:	6803      	ldr	r3, [r0, #0]
{
 80a0c00:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0c02:	b123      	cbz	r3, 80a0c0e <_ZN6String7reserveEj+0x12>
 80a0c04:	6843      	ldr	r3, [r0, #4]
 80a0c06:	428b      	cmp	r3, r1
 80a0c08:	d301      	bcc.n	80a0c0e <_ZN6String7reserveEj+0x12>
 80a0c0a:	2001      	movs	r0, #1
}
 80a0c0c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0c0e:	4620      	mov	r0, r4
 80a0c10:	f7ff ffe8 	bl	80a0be4 <_ZN6String12changeBufferEj>
 80a0c14:	2800      	cmp	r0, #0
 80a0c16:	d0f9      	beq.n	80a0c0c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0c18:	68a3      	ldr	r3, [r4, #8]
 80a0c1a:	2b00      	cmp	r3, #0
 80a0c1c:	d1f5      	bne.n	80a0c0a <_ZN6String7reserveEj+0xe>
 80a0c1e:	6822      	ldr	r2, [r4, #0]
 80a0c20:	7013      	strb	r3, [r2, #0]
 80a0c22:	e7f2      	b.n	80a0c0a <_ZN6String7reserveEj+0xe>

080a0c24 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c24:	b570      	push	{r4, r5, r6, lr}
 80a0c26:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0c28:	4611      	mov	r1, r2
{
 80a0c2a:	4604      	mov	r4, r0
 80a0c2c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0c2e:	f7ff ffe5 	bl	80a0bfc <_ZN6String7reserveEj>
 80a0c32:	b920      	cbnz	r0, 80a0c3e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0c34:	4620      	mov	r0, r4
 80a0c36:	f7ff ffca 	bl	80a0bce <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0c3a:	4620      	mov	r0, r4
 80a0c3c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0c3e:	462a      	mov	r2, r5
 80a0c40:	4631      	mov	r1, r6
 80a0c42:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0c44:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0c46:	f002 faa9 	bl	80a319c <memcpy>
	buffer[len] = 0;
 80a0c4a:	2100      	movs	r1, #0
 80a0c4c:	6822      	ldr	r2, [r4, #0]
 80a0c4e:	68a3      	ldr	r3, [r4, #8]
 80a0c50:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0c52:	e7f2      	b.n	80a0c3a <_ZN6String4copyEPKcj+0x16>

080a0c54 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0c54:	b538      	push	{r3, r4, r5, lr}
 80a0c56:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0c58:	460c      	mov	r4, r1
 80a0c5a:	b149      	cbz	r1, 80a0c70 <_ZN6StringaSEPKc+0x1c>
 80a0c5c:	4608      	mov	r0, r1
 80a0c5e:	f002 faf2 	bl	80a3246 <strlen>
 80a0c62:	4621      	mov	r1, r4
 80a0c64:	4602      	mov	r2, r0
 80a0c66:	4628      	mov	r0, r5
 80a0c68:	f7ff ffdc 	bl	80a0c24 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0c6c:	4628      	mov	r0, r5
 80a0c6e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a0c70:	f7ff ffad 	bl	80a0bce <_ZN6String10invalidateEv>
 80a0c74:	e7fa      	b.n	80a0c6c <_ZN6StringaSEPKc+0x18>

080a0c76 <_ZN6StringC1Efi>:
	buffer = NULL;
 80a0c76:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a0c78:	b530      	push	{r4, r5, lr}
 80a0c7a:	4604      	mov	r4, r0
 80a0c7c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a0c7e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0c82:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0c84:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a0c86:	b2d5      	uxtb	r5, r2
 80a0c88:	4608      	mov	r0, r1
 80a0c8a:	f001 fa93 	bl	80a21b4 <__aeabi_f2d>
 80a0c8e:	462a      	mov	r2, r5
 80a0c90:	ab01      	add	r3, sp, #4
 80a0c92:	f7ff ff3b 	bl	80a0b0c <_Z4dtoadhPc>
        *this = buf;
 80a0c96:	4620      	mov	r0, r4
 80a0c98:	a901      	add	r1, sp, #4
 80a0c9a:	f7ff ffdb 	bl	80a0c54 <_ZN6StringaSEPKc>
}
 80a0c9e:	4620      	mov	r0, r4
 80a0ca0:	b00b      	add	sp, #44	; 0x2c
 80a0ca2:	bd30      	pop	{r4, r5, pc}

080a0ca4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ca6:	4606      	mov	r6, r0
 80a0ca8:	460d      	mov	r5, r1
  size_t n = 0;
 80a0caa:	2400      	movs	r4, #0
 80a0cac:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0cae:	42bd      	cmp	r5, r7
 80a0cb0:	d00c      	beq.n	80a0ccc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0cb2:	6833      	ldr	r3, [r6, #0]
 80a0cb4:	4630      	mov	r0, r6
 80a0cb6:	689b      	ldr	r3, [r3, #8]
 80a0cb8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0cbc:	4798      	blx	r3
     if (chunk>=0)
 80a0cbe:	1e03      	subs	r3, r0, #0
 80a0cc0:	db01      	blt.n	80a0cc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0cc2:	441c      	add	r4, r3
  while (size--) {
 80a0cc4:	e7f3      	b.n	80a0cae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0cc6:	2c00      	cmp	r4, #0
 80a0cc8:	bf08      	it	eq
 80a0cca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0cd0:	b570      	push	{r4, r5, r6, lr}
 80a0cd2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0cd4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0cd6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0cd8:	b149      	cbz	r1, 80a0cee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0cda:	f002 fab4 	bl	80a3246 <strlen>
 80a0cde:	682b      	ldr	r3, [r5, #0]
 80a0ce0:	4602      	mov	r2, r0
 80a0ce2:	4621      	mov	r1, r4
 80a0ce4:	4628      	mov	r0, r5
    }
 80a0ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0cea:	68db      	ldr	r3, [r3, #12]
 80a0cec:	4718      	bx	r3
    }
 80a0cee:	bd70      	pop	{r4, r5, r6, pc}

080a0cf0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0cf0:	6803      	ldr	r3, [r0, #0]
 80a0cf2:	689b      	ldr	r3, [r3, #8]
 80a0cf4:	4718      	bx	r3

080a0cf6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0cf6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0cf8:	2a01      	cmp	r2, #1
 80a0cfa:	bf98      	it	ls
 80a0cfc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0cfe:	b530      	push	{r4, r5, lr}
 80a0d00:	b08b      	sub	sp, #44	; 0x2c
 80a0d02:	460c      	mov	r4, r1
  *str = '\0';
 80a0d04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0d08:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0d0a:	4625      	mov	r5, r4
 80a0d0c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0d10:	fb04 5312 	mls	r3, r4, r2, r5
 80a0d14:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0d16:	2b09      	cmp	r3, #9
 80a0d18:	bf94      	ite	ls
 80a0d1a:	3330      	addls	r3, #48	; 0x30
 80a0d1c:	3337      	addhi	r3, #55	; 0x37
 80a0d1e:	b2db      	uxtb	r3, r3
  } while(n);
 80a0d20:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0d22:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0d26:	d9f0      	bls.n	80a0d0a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0d28:	f7ff ffd2 	bl	80a0cd0 <_ZN5Print5writeEPKc>
}
 80a0d2c:	b00b      	add	sp, #44	; 0x2c
 80a0d2e:	bd30      	pop	{r4, r5, pc}

080a0d30 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0d30:	2300      	movs	r3, #0
 80a0d32:	6840      	ldr	r0, [r0, #4]
 80a0d34:	461a      	mov	r2, r3
 80a0d36:	4619      	mov	r1, r3
 80a0d38:	f7ff bdf0 	b.w	80a091c <network_on>

080a0d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a0d3c:	680b      	ldr	r3, [r1, #0]
 80a0d3e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a0d40:	b113      	cbz	r3, 80a0d48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0d42:	685a      	ldr	r2, [r3, #4]
 80a0d44:	3201      	adds	r2, #1
 80a0d46:	605a      	str	r2, [r3, #4]
      }
 80a0d48:	4770      	bx	lr
	...

080a0d4c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0d4c:	4b01      	ldr	r3, [pc, #4]	; (80a0d54 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0d4e:	4a02      	ldr	r2, [pc, #8]	; (80a0d58 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0d50:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0d52:	4770      	bx	lr
 80a0d54:	200000a0 	.word	0x200000a0
 80a0d58:	080a327a 	.word	0x080a327a

080a0d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0d5c:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0d5e:	681a      	ldr	r2, [r3, #0]
 80a0d60:	4b02      	ldr	r3, [pc, #8]	; (80a0d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0d62:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0d64:	4770      	bx	lr
 80a0d66:	bf00      	nop
 80a0d68:	20000000 	.word	0x20000000
 80a0d6c:	200000a4 	.word	0x200000a4

080a0d70 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0d70:	2100      	movs	r1, #0
 80a0d72:	f7ff bd87 	b.w	80a0884 <system_delay_ms>

080a0d76 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0d76:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0d78:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0d7a:	4604      	mov	r4, r0
      if (_M_manager)
 80a0d7c:	b113      	cbz	r3, 80a0d84 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0d7e:	2203      	movs	r2, #3
 80a0d80:	4601      	mov	r1, r0
 80a0d82:	4798      	blx	r3
    }
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	bd10      	pop	{r4, pc}

080a0d88 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0d88:	b510      	push	{r4, lr}
 80a0d8a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d8c:	f7ff fff3 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	bd10      	pop	{r4, pc}

080a0d94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a0d94:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d96:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0d98:	460b      	mov	r3, r1
 80a0d9a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d9c:	c803      	ldmia	r0, {r0, r1}
 80a0d9e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0da2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0da6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0dae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0db2:	b002      	add	sp, #8
 80a0db4:	bd10      	pop	{r4, pc}
	...

080a0db8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0db8:	2300      	movs	r3, #0
 80a0dba:	4803      	ldr	r0, [pc, #12]	; (80a0dc8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0dbc:	4a03      	ldr	r2, [pc, #12]	; (80a0dcc <_GLOBAL__sub_I_RGB+0x14>)
 80a0dbe:	4904      	ldr	r1, [pc, #16]	; (80a0dd0 <_GLOBAL__sub_I_RGB+0x18>)
 80a0dc0:	6083      	str	r3, [r0, #8]
 80a0dc2:	f000 bec1 	b.w	80a1b48 <__aeabi_atexit>
 80a0dc6:	bf00      	nop
 80a0dc8:	200000a8 	.word	0x200000a8
 80a0dcc:	2000006c 	.word	0x2000006c
 80a0dd0:	080a0d89 	.word	0x080a0d89

080a0dd4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0dd4:	4b01      	ldr	r3, [pc, #4]	; (80a0ddc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0dd6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0dd8:	4770      	bx	lr
 80a0dda:	bf00      	nop
 80a0ddc:	20000008 	.word	0x20000008

080a0de0 <serialEventRun>:
{
 80a0de0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0de2:	4b13      	ldr	r3, [pc, #76]	; (80a0e30 <serialEventRun+0x50>)
 80a0de4:	b143      	cbz	r3, 80a0df8 <serialEventRun+0x18>
 80a0de6:	f000 fc01 	bl	80a15ec <_Z16_fetch_usbserialv>
 80a0dea:	6803      	ldr	r3, [r0, #0]
 80a0dec:	691b      	ldr	r3, [r3, #16]
 80a0dee:	4798      	blx	r3
 80a0df0:	2800      	cmp	r0, #0
 80a0df2:	dd01      	ble.n	80a0df8 <serialEventRun+0x18>
        serialEvent();
 80a0df4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0df8:	4b0e      	ldr	r3, [pc, #56]	; (80a0e34 <serialEventRun+0x54>)
 80a0dfa:	b143      	cbz	r3, 80a0e0e <serialEventRun+0x2e>
 80a0dfc:	f000 fcb2 	bl	80a1764 <_Z22__fetch_global_Serial1v>
 80a0e00:	6803      	ldr	r3, [r0, #0]
 80a0e02:	691b      	ldr	r3, [r3, #16]
 80a0e04:	4798      	blx	r3
 80a0e06:	2800      	cmp	r0, #0
 80a0e08:	dd01      	ble.n	80a0e0e <serialEventRun+0x2e>
        serialEvent1();
 80a0e0a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0e0e:	4b0a      	ldr	r3, [pc, #40]	; (80a0e38 <serialEventRun+0x58>)
 80a0e10:	b10b      	cbz	r3, 80a0e16 <serialEventRun+0x36>
 80a0e12:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0e16:	4b09      	ldr	r3, [pc, #36]	; (80a0e3c <serialEventRun+0x5c>)
 80a0e18:	b143      	cbz	r3, 80a0e2c <serialEventRun+0x4c>
 80a0e1a:	f000 fc25 	bl	80a1668 <_Z17_fetch_usbserial1v>
 80a0e1e:	6803      	ldr	r3, [r0, #0]
 80a0e20:	691b      	ldr	r3, [r3, #16]
 80a0e22:	4798      	blx	r3
 80a0e24:	2800      	cmp	r0, #0
 80a0e26:	dd01      	ble.n	80a0e2c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0e28:	f3af 8000 	nop.w
}
 80a0e2c:	bd08      	pop	{r3, pc}
 80a0e2e:	bf00      	nop
	...

080a0e40 <_post_loop>:
{
 80a0e40:	b508      	push	{r3, lr}
	serialEventRun();
 80a0e42:	f7ff ffcd 	bl	80a0de0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0e46:	f7ff fc3b 	bl	80a06c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0e4a:	4b01      	ldr	r3, [pc, #4]	; (80a0e50 <_post_loop+0x10>)
 80a0e4c:	6018      	str	r0, [r3, #0]
}
 80a0e4e:	bd08      	pop	{r3, pc}
 80a0e50:	20000534 	.word	0x20000534

080a0e54 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0e54:	4802      	ldr	r0, [pc, #8]	; (80a0e60 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0e56:	4a03      	ldr	r2, [pc, #12]	; (80a0e64 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0e58:	4903      	ldr	r1, [pc, #12]	; (80a0e68 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0e5a:	1a12      	subs	r2, r2, r0
 80a0e5c:	f002 b99e 	b.w	80a319c <memcpy>
 80a0e60:	40024000 	.word	0x40024000
 80a0e64:	40024004 	.word	0x40024004
 80a0e68:	080a33f8 	.word	0x080a33f8

080a0e6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e6c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0e6e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e70:	461a      	mov	r2, r3
 80a0e72:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0e76:	9300      	str	r3, [sp, #0]
 80a0e78:	f7ff fd26 	bl	80a08c8 <system_ctrl_set_result>
}
 80a0e7c:	b003      	add	sp, #12
 80a0e7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0e84 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0e84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0e86:	8843      	ldrh	r3, [r0, #2]
 80a0e88:	2b0a      	cmp	r3, #10
 80a0e8a:	d008      	beq.n	80a0e9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0e8c:	2b50      	cmp	r3, #80	; 0x50
 80a0e8e:	d10b      	bne.n	80a0ea8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0e90:	4b09      	ldr	r3, [pc, #36]	; (80a0eb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0e92:	681b      	ldr	r3, [r3, #0]
 80a0e94:	b14b      	cbz	r3, 80a0eaa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0e96:	b003      	add	sp, #12
 80a0e98:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0e9c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0e9e:	f7ff ffe5 	bl	80a0e6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0ea2:	b003      	add	sp, #12
 80a0ea4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0ea8:	2300      	movs	r3, #0
 80a0eaa:	461a      	mov	r2, r3
 80a0eac:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0eb0:	9300      	str	r3, [sp, #0]
 80a0eb2:	f7ff fd09 	bl	80a08c8 <system_ctrl_set_result>
}
 80a0eb6:	e7f4      	b.n	80a0ea2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0eb8:	200000bc 	.word	0x200000bc

080a0ebc <module_user_init_hook>:
{
 80a0ebc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0ebe:	4c12      	ldr	r4, [pc, #72]	; (80a0f08 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0ec0:	2100      	movs	r1, #0
 80a0ec2:	4812      	ldr	r0, [pc, #72]	; (80a0f0c <module_user_init_hook+0x50>)
 80a0ec4:	f7ff fda2 	bl	80a0a0c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0ec8:	4d11      	ldr	r5, [pc, #68]	; (80a0f10 <module_user_init_hook+0x54>)
 80a0eca:	6823      	ldr	r3, [r4, #0]
 80a0ecc:	42ab      	cmp	r3, r5
 80a0ece:	bf0c      	ite	eq
 80a0ed0:	2201      	moveq	r2, #1
 80a0ed2:	2200      	movne	r2, #0
 80a0ed4:	4b0f      	ldr	r3, [pc, #60]	; (80a0f14 <module_user_init_hook+0x58>)
 80a0ed6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0ed8:	d002      	beq.n	80a0ee0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a0eda:	f7ff ffbb 	bl	80a0e54 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0ede:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0ee0:	f7ff fbde 	bl	80a06a0 <HAL_RNG_GetRandomNumber>
 80a0ee4:	4604      	mov	r4, r0
    srand(seed);
 80a0ee6:	f002 f96f 	bl	80a31c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0eea:	4b0b      	ldr	r3, [pc, #44]	; (80a0f18 <module_user_init_hook+0x5c>)
 80a0eec:	b113      	cbz	r3, 80a0ef4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0ef4:	2100      	movs	r1, #0
 80a0ef6:	4808      	ldr	r0, [pc, #32]	; (80a0f18 <module_user_init_hook+0x5c>)
 80a0ef8:	f7ff fd50 	bl	80a099c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0f00:	2100      	movs	r1, #0
 80a0f02:	4806      	ldr	r0, [pc, #24]	; (80a0f1c <module_user_init_hook+0x60>)
 80a0f04:	f7ff bcd6 	b.w	80a08b4 <system_ctrl_set_app_request_handler>
 80a0f08:	40024000 	.word	0x40024000
 80a0f0c:	080a0dd5 	.word	0x080a0dd5
 80a0f10:	9a271c1e 	.word	0x9a271c1e
 80a0f14:	200000b8 	.word	0x200000b8
 80a0f18:	00000000 	.word	0x00000000
 80a0f1c:	080a0e85 	.word	0x080a0e85

080a0f20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0f20:	4770      	bx	lr

080a0f22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0f22:	2000      	movs	r0, #0
 80a0f24:	4770      	bx	lr

080a0f26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0f26:	b510      	push	{r4, lr}
 80a0f28:	4604      	mov	r4, r0
 80a0f2a:	2110      	movs	r1, #16
 80a0f2c:	f000 fe11 	bl	80a1b52 <_ZdlPvj>
 80a0f30:	4620      	mov	r0, r4
 80a0f32:	bd10      	pop	{r4, pc}

080a0f34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0f34:	b508      	push	{r3, lr}
      { delete this; }
 80a0f36:	f7ff fff6 	bl	80a0f26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0f3a:	bd08      	pop	{r3, pc}

080a0f3c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0f3c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0f3e:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0f40:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0f44:	6002      	str	r2, [r0, #0]
 80a0f46:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0f48:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f4a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0f4c:	680c      	ldr	r4, [r1, #0]
 80a0f4e:	8085      	strh	r5, [r0, #4]
 80a0f50:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f52:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0f54:	bd30      	pop	{r4, r5, pc}

080a0f56 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0f56:	b510      	push	{r4, lr}
 80a0f58:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0f5a:	6800      	ldr	r0, [r0, #0]
 80a0f5c:	f7ff fd2e 	bl	80a09bc <free>
}
 80a0f60:	4620      	mov	r0, r4
 80a0f62:	bd10      	pop	{r4, pc}

080a0f64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0f64:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0f66:	68c4      	ldr	r4, [r0, #12]
 80a0f68:	b1f4      	cbz	r4, 80a0fa8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a0f6a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0f6c:	2b02      	cmp	r3, #2
 80a0f6e:	d103      	bne.n	80a0f78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0f70:	f104 000c 	add.w	r0, r4, #12
 80a0f74:	f7ff ffef 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0f78:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0f7a:	b135      	cbz	r5, 80a0f8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a0f7c:	4628      	mov	r0, r5
 80a0f7e:	f7ff fefa 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
 80a0f82:	2110      	movs	r1, #16
 80a0f84:	4628      	mov	r0, r5
 80a0f86:	f000 fde4 	bl	80a1b52 <_ZdlPvj>
 80a0f8a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0f8c:	b135      	cbz	r5, 80a0f9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0f8e:	4628      	mov	r0, r5
 80a0f90:	f7ff fef1 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
 80a0f94:	2110      	movs	r1, #16
 80a0f96:	4628      	mov	r0, r5
 80a0f98:	f000 fddb 	bl	80a1b52 <_ZdlPvj>
 80a0f9c:	4620      	mov	r0, r4
 80a0f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0fa2:	2114      	movs	r1, #20
 80a0fa4:	f000 bdd5 	b.w	80a1b52 <_ZdlPvj>
 80a0fa8:	bd38      	pop	{r3, r4, r5, pc}

080a0faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0fac:	460e      	mov	r6, r1
 80a0fae:	4604      	mov	r4, r0
 80a0fb0:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0fb4:	460d      	mov	r5, r1
 80a0fb6:	a801      	add	r0, sp, #4
 80a0fb8:	4631      	mov	r1, r6
 80a0fba:	9300      	str	r3, [sp, #0]
 80a0fbc:	f7ff febe 	bl	80a0d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0fc0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0fc2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0fc4:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0fc6:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0fc8:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0fca:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0fcc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0fce:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0fd0:	f7ff f878 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0fd4:	4630      	mov	r0, r6
 80a0fd6:	f7ff f875 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0fda:	4628      	mov	r0, r5
 80a0fdc:	2108      	movs	r1, #8
 80a0fde:	f000 fdb8 	bl	80a1b52 <_ZdlPvj>
        return p;
    }
 80a0fe2:	4620      	mov	r0, r4
 80a0fe4:	b002      	add	sp, #8
 80a0fe6:	bd70      	pop	{r4, r5, r6, pc}

080a0fe8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0fe8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0fea:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0fec:	b90a      	cbnz	r2, 80a0ff2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0fee:	f000 fdb4 	bl	80a1b5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0ff2:	68c3      	ldr	r3, [r0, #12]
    }
 80a0ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0ff8:	4718      	bx	r3

080a0ffa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0ffa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0ffc:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0ffe:	f100 0110 	add.w	r1, r0, #16
 80a1002:	f7ff fff1 	bl	80a0fe8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a1006:	bd08      	pop	{r3, pc}

080a1008 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a1008:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a100a:	b510      	push	{r4, lr}
      if (_M_empty())
 80a100c:	b90a      	cbnz	r2, 80a1012 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a100e:	f000 fda4 	bl	80a1b5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1012:	68c3      	ldr	r3, [r0, #12]
    }
 80a1014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1018:	4718      	bx	r3

080a101a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a101a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a101c:	6800      	ldr	r0, [r0, #0]
 80a101e:	f100 0110 	add.w	r1, r0, #16
 80a1022:	f7ff fff1 	bl	80a1008 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a1026:	bd08      	pop	{r3, pc}

080a1028 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1028:	b538      	push	{r3, r4, r5, lr}
 80a102a:	2300      	movs	r3, #0
 80a102c:	4604      	mov	r4, r0
 80a102e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1030:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1032:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1034:	f7ff f831 	bl	80a009a <_Znwj>
 80a1038:	b128      	cbz	r0, 80a1046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a103a:	2301      	movs	r3, #1
 80a103c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1040:	4b02      	ldr	r3, [pc, #8]	; (80a104c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1042:	60c5      	str	r5, [r0, #12]
 80a1044:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1046:	6020      	str	r0, [r4, #0]
	}
 80a1048:	4620      	mov	r0, r4
 80a104a:	bd38      	pop	{r3, r4, r5, pc}
 80a104c:	080a32a4 	.word	0x080a32a4

080a1050 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1050:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1052:	2300      	movs	r3, #0
 80a1054:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1056:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1058:	4604      	mov	r4, r0
 80a105a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a105c:	b12b      	cbz	r3, 80a106a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a105e:	2202      	movs	r2, #2
 80a1060:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1062:	68eb      	ldr	r3, [r5, #12]
 80a1064:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1066:	68ab      	ldr	r3, [r5, #8]
 80a1068:	60a3      	str	r3, [r4, #8]
    }
 80a106a:	4620      	mov	r0, r4
 80a106c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1070:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1072:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1074:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1076:	4668      	mov	r0, sp
 80a1078:	f7ff ff60 	bl	80a0f3c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a107c:	f04f 0302 	mov.w	r3, #2
 80a1080:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1084:	2a00      	cmp	r2, #0
 80a1086:	d103      	bne.n	80a1090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1088:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a108c:	2900      	cmp	r1, #0
 80a108e:	d1f7      	bne.n	80a1080 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1090:	d125      	bne.n	80a10de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a1092:	f104 050c 	add.w	r5, r4, #12
 80a1096:	4669      	mov	r1, sp
 80a1098:	4628      	mov	r0, r5
 80a109a:	f7ff ff4f 	bl	80a0f3c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a109e:	2301      	movs	r3, #1
 80a10a0:	f3bf 8f5b 	dmb	ish
 80a10a4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a10a6:	2000      	movs	r0, #0
 80a10a8:	f3bf 8f5b 	dmb	ish
 80a10ac:	f104 0308 	add.w	r3, r4, #8
 80a10b0:	e853 6f00 	ldrex	r6, [r3]
 80a10b4:	e843 0200 	strex	r2, r0, [r3]
 80a10b8:	2a00      	cmp	r2, #0
 80a10ba:	d1f9      	bne.n	80a10b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a10bc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a10c0:	b16e      	cbz	r6, 80a10de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a10c2:	f7ff fbe7 	bl	80a0894 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a10c6:	b178      	cbz	r0, 80a10e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a10c8:	4629      	mov	r1, r5
 80a10ca:	4630      	mov	r0, r6
 80a10cc:	f7ff ff8c 	bl	80a0fe8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a10d0:	4630      	mov	r0, r6
 80a10d2:	f7ff fe50 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a10d6:	2110      	movs	r1, #16
 80a10d8:	4630      	mov	r0, r6
 80a10da:	f000 fd3a 	bl	80a1b52 <_ZdlPvj>
        p_->setError(std::move(error));
 80a10de:	4668      	mov	r0, sp
 80a10e0:	f7ff ff39 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
    }
 80a10e4:	b009      	add	sp, #36	; 0x24
 80a10e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a10e8:	4631      	mov	r1, r6
 80a10ea:	a802      	add	r0, sp, #8
 80a10ec:	f7ff ffb0 	bl	80a1050 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a10f0:	68e0      	ldr	r0, [r4, #12]
 80a10f2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a10f6:	b108      	cbz	r0, 80a10fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a10f8:	f002 f88a 	bl	80a3210 <strdup>
        type_(type) {
 80a10fc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a10fe:	2010      	movs	r0, #16
 80a1100:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1104:	f7fe ffc9 	bl	80a009a <_Znwj>
 80a1108:	4605      	mov	r5, r0
 80a110a:	b1e8      	cbz	r0, 80a1148 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a110c:	2700      	movs	r7, #0
 80a110e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1110:	2018      	movs	r0, #24
 80a1112:	f7fe ffc2 	bl	80a009a <_Znwj>
 80a1116:	4604      	mov	r4, r0
 80a1118:	b188      	cbz	r0, 80a113e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a111a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a111c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a111e:	a802      	add	r0, sp, #8
 80a1120:	f7ff fe38 	bl	80a0d94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1124:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1126:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1128:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a112a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a112c:	9204      	str	r2, [sp, #16]
 80a112e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1130:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1132:	60e3      	str	r3, [r4, #12]
 80a1134:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1138:	9205      	str	r2, [sp, #20]
 80a113a:	f7ff feff 	bl	80a0f3c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a113e:	4b08      	ldr	r3, [pc, #32]	; (80a1160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1140:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1142:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1144:	4b07      	ldr	r3, [pc, #28]	; (80a1164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1146:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1148:	a806      	add	r0, sp, #24
 80a114a:	f7ff ff04 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a114e:	a802      	add	r0, sp, #8
 80a1150:	f7ff fe11 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1154:	2200      	movs	r2, #0
 80a1156:	4629      	mov	r1, r5
 80a1158:	4803      	ldr	r0, [pc, #12]	; (80a1168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a115a:	f7ff fba3 	bl	80a08a4 <application_thread_invoke>
 80a115e:	e7b7      	b.n	80a10d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1160:	080a0ffb 	.word	0x080a0ffb
 80a1164:	080a1291 	.word	0x080a1291
 80a1168:	080a17b5 	.word	0x080a17b5

080a116c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1170:	b08a      	sub	sp, #40	; 0x28
 80a1172:	4605      	mov	r5, r0
 80a1174:	460c      	mov	r4, r1
 80a1176:	4617      	mov	r7, r2
 80a1178:	4698      	mov	r8, r3
 80a117a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a117e:	f7ff fbfd 	bl	80a097c <spark_cloud_flag_connected>
 80a1182:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a1184:	4682      	mov	sl, r0
 80a1186:	bb38      	cbnz	r0, 80a11d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1188:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a118c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a118e:	a905      	add	r1, sp, #20
 80a1190:	4630      	mov	r0, r6
 80a1192:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1196:	f7ff fed1 	bl	80a0f3c <_ZN8particle5ErrorC1EOS0_>
 80a119a:	2014      	movs	r0, #20
 80a119c:	f7fe ff7d 	bl	80a009a <_Znwj>
 80a11a0:	4604      	mov	r4, r0
 80a11a2:	b148      	cbz	r0, 80a11b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a11a4:	2302      	movs	r3, #2
 80a11a6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a11a8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a11aa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a11ae:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a11b0:	4631      	mov	r1, r6
 80a11b2:	300c      	adds	r0, #12
 80a11b4:	f7ff fec2 	bl	80a0f3c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a11b8:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a11ba:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a11bc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a11c0:	f7ff ff32 	bl	80a1028 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a11c4:	4630      	mov	r0, r6
 80a11c6:	f7ff fec6 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a11ca:	a805      	add	r0, sp, #20
 80a11cc:	f7ff fec3 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a11d0:	4628      	mov	r0, r5
 80a11d2:	b00a      	add	sp, #40	; 0x28
 80a11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a11d8:	230c      	movs	r3, #12
 80a11da:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a11de:	2014      	movs	r0, #20
 80a11e0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a11e4:	9307      	str	r3, [sp, #28]
 80a11e6:	f7fe ff58 	bl	80a009a <_Znwj>
 80a11ea:	4601      	mov	r1, r0
 80a11ec:	b128      	cbz	r0, 80a11fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a11ee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a11f2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a11f6:	f880 a001 	strb.w	sl, [r0, #1]
 80a11fa:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a11fc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a11fe:	f7ff ff13 	bl	80a1028 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a1202:	4b22      	ldr	r3, [pc, #136]	; (80a128c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1204:	2008      	movs	r0, #8
 80a1206:	9308      	str	r3, [sp, #32]
 80a1208:	f7fe ff47 	bl	80a009a <_Znwj>
 80a120c:	4682      	mov	sl, r0
 80a120e:	b128      	cbz	r0, 80a121c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1210:	9b03      	ldr	r3, [sp, #12]
 80a1212:	a904      	add	r1, sp, #16
 80a1214:	f840 3b04 	str.w	r3, [r0], #4
 80a1218:	f7ff fd90 	bl	80a0d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a121c:	4642      	mov	r2, r8
 80a121e:	4639      	mov	r1, r7
 80a1220:	4620      	mov	r0, r4
 80a1222:	9600      	str	r6, [sp, #0]
 80a1224:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1228:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a122c:	f7ff fbae 	bl	80a098c <spark_send_event>
 80a1230:	b9b8      	cbnz	r0, 80a1262 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a1232:	9b03      	ldr	r3, [sp, #12]
 80a1234:	785b      	ldrb	r3, [r3, #1]
 80a1236:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a123a:	b993      	cbnz	r3, 80a1262 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a123c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1240:	a905      	add	r1, sp, #20
 80a1242:	a803      	add	r0, sp, #12
 80a1244:	9205      	str	r2, [sp, #20]
 80a1246:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a124a:	f7ff ff11 	bl	80a1070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a124e:	a805      	add	r0, sp, #20
 80a1250:	f7ff fe81 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1254:	a805      	add	r0, sp, #20
 80a1256:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1258:	f7ff fea7 	bl	80a0faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a125c:	a806      	add	r0, sp, #24
 80a125e:	f7fe ff31 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1262:	9b03      	ldr	r3, [sp, #12]
 80a1264:	a904      	add	r1, sp, #16
 80a1266:	a806      	add	r0, sp, #24
 80a1268:	9305      	str	r3, [sp, #20]
 80a126a:	f7ff fd67 	bl	80a0d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a126e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1270:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1272:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1274:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1276:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1278:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a127a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a127c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a127e:	f7fe ff21 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1282:	a804      	add	r0, sp, #16
 80a1284:	f7fe ff1e 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1288:	e7a2      	b.n	80a11d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a128a:	bf00      	nop
 80a128c:	080a1355 	.word	0x080a1355

080a1290 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1290:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1294:	4605      	mov	r5, r0
	  switch (__op)
 80a1296:	d007      	beq.n	80a12a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1298:	2a03      	cmp	r2, #3
 80a129a:	d018      	beq.n	80a12ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a129c:	2a01      	cmp	r2, #1
 80a129e:	d101      	bne.n	80a12a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a12a0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a12a2:	6003      	str	r3, [r0, #0]
	}
 80a12a4:	2000      	movs	r0, #0
 80a12a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a12a8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a12aa:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a12ac:	f7fe fef5 	bl	80a009a <_Znwj>
 80a12b0:	4604      	mov	r4, r0
 80a12b2:	b150      	cbz	r0, 80a12ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a12b4:	4631      	mov	r1, r6
 80a12b6:	f7ff fecb 	bl	80a1050 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a12ba:	6930      	ldr	r0, [r6, #16]
 80a12bc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a12c0:	b108      	cbz	r0, 80a12c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a12c2:	f001 ffa5 	bl	80a3210 <strdup>
        type_(type) {
 80a12c6:	6120      	str	r0, [r4, #16]
 80a12c8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a12ca:	602c      	str	r4, [r5, #0]
	}
 80a12cc:	e7ea      	b.n	80a12a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a12ce:	6804      	ldr	r4, [r0, #0]
 80a12d0:	2c00      	cmp	r4, #0
 80a12d2:	d0e7      	beq.n	80a12a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a12d4:	f104 0010 	add.w	r0, r4, #16
 80a12d8:	f7ff fe3d 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a12dc:	4620      	mov	r0, r4
 80a12de:	f7ff fd4a 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a12e2:	2118      	movs	r1, #24
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	f000 fc34 	bl	80a1b52 <_ZdlPvj>
 80a12ea:	e7db      	b.n	80a12a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a12ec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a12ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a12ee:	2300      	movs	r3, #0
 80a12f0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a12f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a12f4:	4604      	mov	r4, r0
 80a12f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a12f8:	b12b      	cbz	r3, 80a1306 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a12fa:	2202      	movs	r2, #2
 80a12fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a12fe:	68eb      	ldr	r3, [r5, #12]
 80a1300:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1302:	68ab      	ldr	r3, [r5, #8]
 80a1304:	60a3      	str	r3, [r4, #8]
    }
 80a1306:	4620      	mov	r0, r4
 80a1308:	bd38      	pop	{r3, r4, r5, pc}

080a130a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a130a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a130c:	b570      	push	{r4, r5, r6, lr}
 80a130e:	4604      	mov	r4, r0
	  switch (__op)
 80a1310:	d007      	beq.n	80a1322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a1312:	2a03      	cmp	r2, #3
 80a1314:	d012      	beq.n	80a133c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a1316:	2a01      	cmp	r2, #1
 80a1318:	d101      	bne.n	80a131e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a131a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a131c:	6003      	str	r3, [r0, #0]
	}
 80a131e:	2000      	movs	r0, #0
 80a1320:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1322:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1324:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1326:	f7fe feb8 	bl	80a009a <_Znwj>
 80a132a:	4605      	mov	r5, r0
 80a132c:	b120      	cbz	r0, 80a1338 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a132e:	4631      	mov	r1, r6
 80a1330:	f7ff ffdc 	bl	80a12ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1334:	7c33      	ldrb	r3, [r6, #16]
 80a1336:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1338:	6025      	str	r5, [r4, #0]
	}
 80a133a:	e7f0      	b.n	80a131e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a133c:	6804      	ldr	r4, [r0, #0]
 80a133e:	2c00      	cmp	r4, #0
 80a1340:	d0ed      	beq.n	80a131e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a1342:	4620      	mov	r0, r4
 80a1344:	f7ff fd17 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1348:	2114      	movs	r1, #20
 80a134a:	4620      	mov	r0, r4
 80a134c:	f000 fc01 	bl	80a1b52 <_ZdlPvj>
 80a1350:	e7e5      	b.n	80a131e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a1354 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1354:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1356:	4604      	mov	r4, r0
 80a1358:	b089      	sub	sp, #36	; 0x24
 80a135a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a135c:	a801      	add	r0, sp, #4
 80a135e:	4611      	mov	r1, r2
 80a1360:	f7ff fe23 	bl	80a0faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1364:	b1a4      	cbz	r4, 80a1390 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1366:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1368:	b11d      	cbz	r5, 80a1372 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a136a:	4628      	mov	r0, r5
 80a136c:	f001 ff50 	bl	80a3210 <strdup>
 80a1370:	4605      	mov	r5, r0
 80a1372:	a801      	add	r0, sp, #4
 80a1374:	a903      	add	r1, sp, #12
        type_(type) {
 80a1376:	9503      	str	r5, [sp, #12]
 80a1378:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a137c:	f7ff fe78 	bl	80a1070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1380:	a803      	add	r0, sp, #12
 80a1382:	f7ff fde8 	bl	80a0f56 <_ZN8particle5ErrorD1Ev>
 80a1386:	a802      	add	r0, sp, #8
 80a1388:	f7fe fe9c 	bl	80a00c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a138c:	b009      	add	sp, #36	; 0x24
 80a138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1390:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1392:	9d01      	ldr	r5, [sp, #4]
 80a1394:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1398:	2a00      	cmp	r2, #0
 80a139a:	d103      	bne.n	80a13a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a139c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a13a0:	2900      	cmp	r1, #0
 80a13a2:	d1f7      	bne.n	80a1394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a13a4:	d1ef      	bne.n	80a1386 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a13a6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a13a8:	f3bf 8f5b 	dmb	ish
 80a13ac:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a13ae:	f3bf 8f5b 	dmb	ish
 80a13b2:	1d2b      	adds	r3, r5, #4
 80a13b4:	e853 6f00 	ldrex	r6, [r3]
 80a13b8:	e843 4200 	strex	r2, r4, [r3]
 80a13bc:	2a00      	cmp	r2, #0
 80a13be:	d1f9      	bne.n	80a13b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a13c0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a13c4:	2e00      	cmp	r6, #0
 80a13c6:	d0de      	beq.n	80a1386 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a13c8:	4620      	mov	r0, r4
 80a13ca:	f7ff fa63 	bl	80a0894 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a13ce:	4607      	mov	r7, r0
 80a13d0:	b160      	cbz	r0, 80a13ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a13d2:	4630      	mov	r0, r6
 80a13d4:	f105 010c 	add.w	r1, r5, #12
 80a13d8:	f7ff fe16 	bl	80a1008 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a13dc:	4630      	mov	r0, r6
 80a13de:	f7ff fcca 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a13e2:	2110      	movs	r1, #16
 80a13e4:	4630      	mov	r0, r6
 80a13e6:	f000 fbb4 	bl	80a1b52 <_ZdlPvj>
 80a13ea:	e7cc      	b.n	80a1386 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a13ec:	4631      	mov	r1, r6
 80a13ee:	a803      	add	r0, sp, #12
 80a13f0:	f7ff ff7c 	bl	80a12ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a13f4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a13f6:	2010      	movs	r0, #16
 80a13f8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a13fc:	f7fe fe4d 	bl	80a009a <_Znwj>
 80a1400:	4605      	mov	r5, r0
 80a1402:	b1d0      	cbz	r0, 80a143a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1404:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1406:	2014      	movs	r0, #20
 80a1408:	f7fe fe47 	bl	80a009a <_Znwj>
 80a140c:	4604      	mov	r4, r0
 80a140e:	b178      	cbz	r0, 80a1430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1410:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1412:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1414:	a803      	add	r0, sp, #12
 80a1416:	f7ff fcbd 	bl	80a0d94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a141a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a141c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a141e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1420:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1422:	9205      	str	r2, [sp, #20]
 80a1424:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1426:	60e3      	str	r3, [r4, #12]
 80a1428:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a142c:	9206      	str	r2, [sp, #24]
 80a142e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1430:	4b06      	ldr	r3, [pc, #24]	; (80a144c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1432:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1434:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1436:	4b06      	ldr	r3, [pc, #24]	; (80a1450 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1438:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a143a:	a803      	add	r0, sp, #12
 80a143c:	f7ff fc9b 	bl	80a0d76 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1440:	2200      	movs	r2, #0
 80a1442:	4629      	mov	r1, r5
 80a1444:	4803      	ldr	r0, [pc, #12]	; (80a1454 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1446:	f7ff fa2d 	bl	80a08a4 <application_thread_invoke>
 80a144a:	e7c7      	b.n	80a13dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a144c:	080a101b 	.word	0x080a101b
 80a1450:	080a130b 	.word	0x080a130b
 80a1454:	080a17b5 	.word	0x080a17b5

080a1458 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1458:	4770      	bx	lr

080a145a <_ZN9IPAddressD0Ev>:
 80a145a:	b510      	push	{r4, lr}
 80a145c:	4604      	mov	r4, r0
 80a145e:	2118      	movs	r1, #24
 80a1460:	f000 fb77 	bl	80a1b52 <_ZdlPvj>
 80a1464:	4620      	mov	r0, r4
 80a1466:	bd10      	pop	{r4, pc}

080a1468 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a146a:	460e      	mov	r6, r1
 80a146c:	2400      	movs	r4, #0
 80a146e:	f100 0708 	add.w	r7, r0, #8
 80a1472:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1474:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1478:	220a      	movs	r2, #10
 80a147a:	4630      	mov	r0, r6
 80a147c:	f7ff fc3b 	bl	80a0cf6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1480:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1482:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1484:	d101      	bne.n	80a148a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1486:	4620      	mov	r0, r4
 80a1488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a148a:	2c00      	cmp	r4, #0
 80a148c:	d0f2      	beq.n	80a1474 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a148e:	212e      	movs	r1, #46	; 0x2e
 80a1490:	4630      	mov	r0, r6
 80a1492:	f7ff fc2d 	bl	80a0cf0 <_ZN5Print5printEc>
 80a1496:	4404      	add	r4, r0
 80a1498:	e7ec      	b.n	80a1474 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a149c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a149c:	b510      	push	{r4, lr}
 80a149e:	4604      	mov	r4, r0
 80a14a0:	4b04      	ldr	r3, [pc, #16]	; (80a14b4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a14a2:	2211      	movs	r2, #17
 80a14a4:	2100      	movs	r1, #0
 80a14a6:	f840 3b04 	str.w	r3, [r0], #4
 80a14aa:	f001 fe85 	bl	80a31b8 <memset>
}
 80a14ae:	4620      	mov	r0, r4
 80a14b0:	bd10      	pop	{r4, pc}
 80a14b2:	bf00      	nop
 80a14b4:	080a32c0 	.word	0x080a32c0

080a14b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a14b8:	4603      	mov	r3, r0
 80a14ba:	4a07      	ldr	r2, [pc, #28]	; (80a14d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a14bc:	b510      	push	{r4, lr}
 80a14be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a14c2:	f101 0210 	add.w	r2, r1, #16
 80a14c6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a14ca:	4291      	cmp	r1, r2
 80a14cc:	f843 4b04 	str.w	r4, [r3], #4
 80a14d0:	d1f9      	bne.n	80a14c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a14d2:	780a      	ldrb	r2, [r1, #0]
 80a14d4:	701a      	strb	r2, [r3, #0]
}
 80a14d6:	bd10      	pop	{r4, pc}
 80a14d8:	080a32c0 	.word	0x080a32c0

080a14dc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a14dc:	4a02      	ldr	r2, [pc, #8]	; (80a14e8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a14de:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a14e2:	2204      	movs	r2, #4
 80a14e4:	7502      	strb	r2, [r0, #20]
}
 80a14e6:	4770      	bx	lr
 80a14e8:	080a32c0 	.word	0x080a32c0

080a14ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a14ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a14ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a14f2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a14f6:	2304      	movs	r3, #4
 80a14f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a14fc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1500:	6044      	str	r4, [r0, #4]
 80a1502:	7503      	strb	r3, [r0, #20]
}
 80a1504:	bd10      	pop	{r4, pc}
	...

080a1508 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a150a:	4d04      	ldr	r5, [pc, #16]	; (80a151c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a150c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1512:	9500      	str	r5, [sp, #0]
 80a1514:	f7ff ffea 	bl	80a14ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1518:	b003      	add	sp, #12
 80a151a:	bd30      	pop	{r4, r5, pc}
 80a151c:	080a32c0 	.word	0x080a32c0

080a1520 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1520:	7441      	strb	r1, [r0, #17]
}
 80a1522:	4770      	bx	lr

080a1524 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1524:	4770      	bx	lr

080a1526 <_ZN9USBSerial4readEv>:
{
 80a1526:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1528:	2100      	movs	r1, #0
 80a152a:	7c00      	ldrb	r0, [r0, #16]
 80a152c:	f7ff f982 	bl	80a0834 <HAL_USB_USART_Receive_Data>
}
 80a1530:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1534:	bd08      	pop	{r3, pc}

080a1536 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a1536:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1538:	2101      	movs	r1, #1
 80a153a:	7c00      	ldrb	r0, [r0, #16]
 80a153c:	f7ff f97a 	bl	80a0834 <HAL_USB_USART_Receive_Data>
}
 80a1540:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1544:	bd08      	pop	{r3, pc}

080a1546 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1546:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1548:	7c00      	ldrb	r0, [r0, #16]
 80a154a:	f7ff f96b 	bl	80a0824 <HAL_USB_USART_Available_Data_For_Write>
}
 80a154e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1552:	bd08      	pop	{r3, pc}

080a1554 <_ZN9USBSerial9availableEv>:
{
 80a1554:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1556:	7c00      	ldrb	r0, [r0, #16]
 80a1558:	f7ff f95c 	bl	80a0814 <HAL_USB_USART_Available_Data>
}
 80a155c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1560:	bd08      	pop	{r3, pc}

080a1562 <_ZN9USBSerial5writeEh>:
{
 80a1562:	b538      	push	{r3, r4, r5, lr}
 80a1564:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1566:	7c00      	ldrb	r0, [r0, #16]
{
 80a1568:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a156a:	f7ff f95b 	bl	80a0824 <HAL_USB_USART_Available_Data_For_Write>
 80a156e:	2800      	cmp	r0, #0
 80a1570:	dc01      	bgt.n	80a1576 <_ZN9USBSerial5writeEh+0x14>
 80a1572:	7c60      	ldrb	r0, [r4, #17]
 80a1574:	b128      	cbz	r0, 80a1582 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1576:	4629      	mov	r1, r5
 80a1578:	7c20      	ldrb	r0, [r4, #16]
 80a157a:	f7ff f963 	bl	80a0844 <HAL_USB_USART_Send_Data>
 80a157e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1582:	bd38      	pop	{r3, r4, r5, pc}

080a1584 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1584:	7c00      	ldrb	r0, [r0, #16]
 80a1586:	f7ff b965 	b.w	80a0854 <HAL_USB_USART_Flush_Data>

080a158a <_ZN9USBSerialD0Ev>:
 80a158a:	b510      	push	{r4, lr}
 80a158c:	4604      	mov	r4, r0
 80a158e:	2114      	movs	r1, #20
 80a1590:	f000 fadf 	bl	80a1b52 <_ZdlPvj>
 80a1594:	4620      	mov	r0, r4
 80a1596:	bd10      	pop	{r4, pc}

080a1598 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1598:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a159e:	4604      	mov	r4, r0
 80a15a0:	4608      	mov	r0, r1
 80a15a2:	2100      	movs	r1, #0
 80a15a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a15a8:	4b04      	ldr	r3, [pc, #16]	; (80a15bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a15aa:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a15ac:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a15ae:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a15b0:	4611      	mov	r1, r2
  _blocking = true;
 80a15b2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a15b4:	f7ff f926 	bl	80a0804 <HAL_USB_USART_Init>
}
 80a15b8:	4620      	mov	r0, r4
 80a15ba:	bd10      	pop	{r4, pc}
 80a15bc:	080a32d4 	.word	0x080a32d4

080a15c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a15c0:	b510      	push	{r4, lr}
 80a15c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a15c4:	2214      	movs	r2, #20
 80a15c6:	2100      	movs	r1, #0
 80a15c8:	f001 fdf6 	bl	80a31b8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a15cc:	4b05      	ldr	r3, [pc, #20]	; (80a15e4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a15ce:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a15d0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a15d2:	4b05      	ldr	r3, [pc, #20]	; (80a15e8 <_Z19acquireSerialBufferv+0x28>)
 80a15d4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a15d6:	f240 1301 	movw	r3, #257	; 0x101
 80a15da:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a15dc:	2381      	movs	r3, #129	; 0x81
 80a15de:	8223      	strh	r3, [r4, #16]
}
 80a15e0:	bd10      	pop	{r4, pc}
 80a15e2:	bf00      	nop
 80a15e4:	200000f0 	.word	0x200000f0
 80a15e8:	200001f1 	.word	0x200001f1

080a15ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a15ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a15ee:	4d0f      	ldr	r5, [pc, #60]	; (80a162c <_Z16_fetch_usbserialv+0x40>)
{
 80a15f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a15f2:	a801      	add	r0, sp, #4
 80a15f4:	f7ff ffe4 	bl	80a15c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a15f8:	7829      	ldrb	r1, [r5, #0]
 80a15fa:	f3bf 8f5b 	dmb	ish
 80a15fe:	f011 0401 	ands.w	r4, r1, #1
 80a1602:	d110      	bne.n	80a1626 <_Z16_fetch_usbserialv+0x3a>
 80a1604:	4628      	mov	r0, r5
 80a1606:	f7fe fd4e 	bl	80a00a6 <__cxa_guard_acquire>
 80a160a:	b160      	cbz	r0, 80a1626 <_Z16_fetch_usbserialv+0x3a>
 80a160c:	4621      	mov	r1, r4
 80a160e:	aa01      	add	r2, sp, #4
 80a1610:	4807      	ldr	r0, [pc, #28]	; (80a1630 <_Z16_fetch_usbserialv+0x44>)
 80a1612:	f7ff ffc1 	bl	80a1598 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1616:	4628      	mov	r0, r5
 80a1618:	f7fe fd4a 	bl	80a00b0 <__cxa_guard_release>
 80a161c:	4a05      	ldr	r2, [pc, #20]	; (80a1634 <_Z16_fetch_usbserialv+0x48>)
 80a161e:	4906      	ldr	r1, [pc, #24]	; (80a1638 <_Z16_fetch_usbserialv+0x4c>)
 80a1620:	4803      	ldr	r0, [pc, #12]	; (80a1630 <_Z16_fetch_usbserialv+0x44>)
 80a1622:	f000 fa91 	bl	80a1b48 <__aeabi_atexit>
	return _usbserial;
}
 80a1626:	4802      	ldr	r0, [pc, #8]	; (80a1630 <_Z16_fetch_usbserialv+0x44>)
 80a1628:	b007      	add	sp, #28
 80a162a:	bd30      	pop	{r4, r5, pc}
 80a162c:	200000c0 	.word	0x200000c0
 80a1630:	200000c8 	.word	0x200000c8
 80a1634:	2000006c 	.word	0x2000006c
 80a1638:	080a1525 	.word	0x080a1525

080a163c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a163c:	b510      	push	{r4, lr}
 80a163e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1640:	2214      	movs	r2, #20
 80a1642:	2100      	movs	r1, #0
 80a1644:	f001 fdb8 	bl	80a31b8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1648:	4b05      	ldr	r3, [pc, #20]	; (80a1660 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a164a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a164c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a164e:	4b05      	ldr	r3, [pc, #20]	; (80a1664 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1650:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1652:	f240 1301 	movw	r3, #257	; 0x101
 80a1656:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1658:	2381      	movs	r3, #129	; 0x81
 80a165a:	8223      	strh	r3, [r4, #16]
}
 80a165c:	bd10      	pop	{r4, pc}
 80a165e:	bf00      	nop
 80a1660:	20000272 	.word	0x20000272
 80a1664:	20000373 	.word	0x20000373

080a1668 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1668:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a166a:	4c0f      	ldr	r4, [pc, #60]	; (80a16a8 <_Z17_fetch_usbserial1v+0x40>)
{
 80a166c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a166e:	a801      	add	r0, sp, #4
 80a1670:	f7ff ffe4 	bl	80a163c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1674:	7823      	ldrb	r3, [r4, #0]
 80a1676:	f3bf 8f5b 	dmb	ish
 80a167a:	07db      	lsls	r3, r3, #31
 80a167c:	d410      	bmi.n	80a16a0 <_Z17_fetch_usbserial1v+0x38>
 80a167e:	4620      	mov	r0, r4
 80a1680:	f7fe fd11 	bl	80a00a6 <__cxa_guard_acquire>
 80a1684:	b160      	cbz	r0, 80a16a0 <_Z17_fetch_usbserial1v+0x38>
 80a1686:	2101      	movs	r1, #1
 80a1688:	aa01      	add	r2, sp, #4
 80a168a:	4808      	ldr	r0, [pc, #32]	; (80a16ac <_Z17_fetch_usbserial1v+0x44>)
 80a168c:	f7ff ff84 	bl	80a1598 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1690:	4620      	mov	r0, r4
 80a1692:	f7fe fd0d 	bl	80a00b0 <__cxa_guard_release>
 80a1696:	4a06      	ldr	r2, [pc, #24]	; (80a16b0 <_Z17_fetch_usbserial1v+0x48>)
 80a1698:	4906      	ldr	r1, [pc, #24]	; (80a16b4 <_Z17_fetch_usbserial1v+0x4c>)
 80a169a:	4804      	ldr	r0, [pc, #16]	; (80a16ac <_Z17_fetch_usbserial1v+0x44>)
 80a169c:	f000 fa54 	bl	80a1b48 <__aeabi_atexit>
  return _usbserial1;
}
 80a16a0:	4802      	ldr	r0, [pc, #8]	; (80a16ac <_Z17_fetch_usbserial1v+0x44>)
 80a16a2:	b006      	add	sp, #24
 80a16a4:	bd10      	pop	{r4, pc}
 80a16a6:	bf00      	nop
 80a16a8:	200000c4 	.word	0x200000c4
 80a16ac:	200000dc 	.word	0x200000dc
 80a16b0:	2000006c 	.word	0x2000006c
 80a16b4:	080a1525 	.word	0x080a1525

080a16b8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a16b8:	f7fe bfea 	b.w	80a0690 <HAL_Interrupts_Disable_All>

080a16bc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a16bc:	f7fe bfe0 	b.w	80a0680 <HAL_Interrupts_Enable_All>

080a16c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a16c0:	4770      	bx	lr

080a16c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a16c2:	7441      	strb	r1, [r0, #17]
}
 80a16c4:	4770      	bx	lr

080a16c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a16c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a16c8:	7c00      	ldrb	r0, [r0, #16]
 80a16ca:	f7ff f849 	bl	80a0760 <hal_usart_available_data_for_write>
}
 80a16ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16d2:	bd08      	pop	{r3, pc}

080a16d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a16d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a16d6:	7c00      	ldrb	r0, [r0, #16]
 80a16d8:	f7ff f81a 	bl	80a0710 <hal_usart_available>
}
 80a16dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16e0:	bd08      	pop	{r3, pc}

080a16e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a16e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a16e4:	7c00      	ldrb	r0, [r0, #16]
 80a16e6:	f7ff f823 	bl	80a0730 <hal_usart_peek>
}
 80a16ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a16ee:	bd08      	pop	{r3, pc}

080a16f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a16f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a16f2:	7c00      	ldrb	r0, [r0, #16]
 80a16f4:	f7ff f814 	bl	80a0720 <hal_usart_read>
}
 80a16f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a16fc:	bd08      	pop	{r3, pc}

080a16fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a16fe:	7c00      	ldrb	r0, [r0, #16]
 80a1700:	f7ff b81e 	b.w	80a0740 <hal_usart_flush>

080a1704 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1704:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1706:	7c46      	ldrb	r6, [r0, #17]
{
 80a1708:	4604      	mov	r4, r0
 80a170a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a170c:	b12e      	cbz	r6, 80a171a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a170e:	4629      	mov	r1, r5
 80a1710:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1716:	f7fe bff3 	b.w	80a0700 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a171a:	7c00      	ldrb	r0, [r0, #16]
 80a171c:	f7ff f820 	bl	80a0760 <hal_usart_available_data_for_write>
 80a1720:	2800      	cmp	r0, #0
 80a1722:	dcf4      	bgt.n	80a170e <_ZN11USARTSerial5writeEh+0xa>
}
 80a1724:	4630      	mov	r0, r6
 80a1726:	bd70      	pop	{r4, r5, r6, pc}

080a1728 <_ZN11USARTSerialD0Ev>:
 80a1728:	b510      	push	{r4, lr}
 80a172a:	4604      	mov	r4, r0
 80a172c:	2114      	movs	r1, #20
 80a172e:	f000 fa10 	bl	80a1b52 <_ZdlPvj>
 80a1732:	4620      	mov	r0, r4
 80a1734:	bd10      	pop	{r4, pc}
	...

080a1738 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1738:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a173c:	b510      	push	{r4, lr}
 80a173e:	4604      	mov	r4, r0
 80a1740:	4608      	mov	r0, r1
 80a1742:	4611      	mov	r1, r2
 80a1744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1748:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a174c:	4a04      	ldr	r2, [pc, #16]	; (80a1760 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a174e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1750:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1752:	2201      	movs	r2, #1
 80a1754:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1756:	461a      	mov	r2, r3
 80a1758:	f7fe ffca 	bl	80a06f0 <hal_usart_init>
}
 80a175c:	4620      	mov	r0, r4
 80a175e:	bd10      	pop	{r4, pc}
 80a1760:	080a3304 	.word	0x080a3304

080a1764 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1764:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1766:	4d0d      	ldr	r5, [pc, #52]	; (80a179c <_Z22__fetch_global_Serial1v+0x38>)
 80a1768:	7829      	ldrb	r1, [r5, #0]
 80a176a:	f3bf 8f5b 	dmb	ish
 80a176e:	f011 0401 	ands.w	r4, r1, #1
 80a1772:	d111      	bne.n	80a1798 <_Z22__fetch_global_Serial1v+0x34>
 80a1774:	4628      	mov	r0, r5
 80a1776:	f7fe fc96 	bl	80a00a6 <__cxa_guard_acquire>
 80a177a:	b168      	cbz	r0, 80a1798 <_Z22__fetch_global_Serial1v+0x34>
 80a177c:	4621      	mov	r1, r4
 80a177e:	4a08      	ldr	r2, [pc, #32]	; (80a17a0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1780:	4b08      	ldr	r3, [pc, #32]	; (80a17a4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1782:	4809      	ldr	r0, [pc, #36]	; (80a17a8 <_Z22__fetch_global_Serial1v+0x44>)
 80a1784:	f7ff ffd8 	bl	80a1738 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1788:	4628      	mov	r0, r5
 80a178a:	f7fe fc91 	bl	80a00b0 <__cxa_guard_release>
 80a178e:	4a07      	ldr	r2, [pc, #28]	; (80a17ac <_Z22__fetch_global_Serial1v+0x48>)
 80a1790:	4907      	ldr	r1, [pc, #28]	; (80a17b0 <_Z22__fetch_global_Serial1v+0x4c>)
 80a1792:	4805      	ldr	r0, [pc, #20]	; (80a17a8 <_Z22__fetch_global_Serial1v+0x44>)
 80a1794:	f000 f9d8 	bl	80a1b48 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1798:	4803      	ldr	r0, [pc, #12]	; (80a17a8 <_Z22__fetch_global_Serial1v+0x44>)
 80a179a:	bd38      	pop	{r3, r4, r5, pc}
 80a179c:	200003f4 	.word	0x200003f4
 80a17a0:	200003f8 	.word	0x200003f8
 80a17a4:	2000047c 	.word	0x2000047c
 80a17a8:	20000500 	.word	0x20000500
 80a17ac:	2000006c 	.word	0x2000006c
 80a17b0:	080a16c1 	.word	0x080a16c1

080a17b4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a17b4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a17b6:	6883      	ldr	r3, [r0, #8]
 80a17b8:	4604      	mov	r4, r0
 80a17ba:	b90b      	cbnz	r3, 80a17c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a17bc:	f000 f9cd 	bl	80a1b5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a17c0:	68c3      	ldr	r3, [r0, #12]
 80a17c2:	4798      	blx	r3
      if (_M_manager)
 80a17c4:	68a3      	ldr	r3, [r4, #8]
 80a17c6:	b11b      	cbz	r3, 80a17d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a17c8:	2203      	movs	r2, #3
 80a17ca:	4621      	mov	r1, r4
 80a17cc:	4620      	mov	r0, r4
 80a17ce:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a17d0:	4620      	mov	r0, r4
}
 80a17d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a17d6:	2110      	movs	r1, #16
 80a17d8:	f000 b9bb 	b.w	80a1b52 <_ZdlPvj>

080a17dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a17dc:	4770      	bx	lr

080a17de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a17de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17e0:	4606      	mov	r6, r0
 80a17e2:	4615      	mov	r5, r2
 80a17e4:	460c      	mov	r4, r1
 80a17e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a17e8:	42bc      	cmp	r4, r7
 80a17ea:	d006      	beq.n	80a17fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a17ec:	6833      	ldr	r3, [r6, #0]
 80a17ee:	4630      	mov	r0, r6
 80a17f0:	689b      	ldr	r3, [r3, #8]
 80a17f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a17f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a17f8:	e7f6      	b.n	80a17e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a17fa:	4628      	mov	r0, r5
 80a17fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a17fe:	2200      	movs	r2, #0
 80a1800:	7c00      	ldrb	r0, [r0, #16]
 80a1802:	f7fe bfb5 	b.w	80a0770 <hal_i2c_write>

080a1806 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1806:	2100      	movs	r1, #0
 80a1808:	7c00      	ldrb	r0, [r0, #16]
 80a180a:	f7fe bfb9 	b.w	80a0780 <hal_i2c_available>

080a180e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a180e:	2100      	movs	r1, #0
 80a1810:	7c00      	ldrb	r0, [r0, #16]
 80a1812:	f7fe bfbd 	b.w	80a0790 <hal_i2c_read>

080a1816 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1816:	2100      	movs	r1, #0
 80a1818:	7c00      	ldrb	r0, [r0, #16]
 80a181a:	f7fe bfc1 	b.w	80a07a0 <hal_i2c_peek>

080a181e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a181e:	2100      	movs	r1, #0
 80a1820:	7c00      	ldrb	r0, [r0, #16]
 80a1822:	f7fe bfc5 	b.w	80a07b0 <hal_i2c_flush>

080a1826 <_ZN7TwoWireD0Ev>:
 80a1826:	b510      	push	{r4, lr}
 80a1828:	4604      	mov	r4, r0
 80a182a:	2114      	movs	r1, #20
 80a182c:	f000 f991 	bl	80a1b52 <_ZdlPvj>
 80a1830:	4620      	mov	r0, r4
 80a1832:	bd10      	pop	{r4, pc}

080a1834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1834:	b510      	push	{r4, lr}
 80a1836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a183a:	4604      	mov	r4, r0
 80a183c:	4608      	mov	r0, r1
 80a183e:	2100      	movs	r1, #0
 80a1840:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1844:	4b03      	ldr	r3, [pc, #12]	; (80a1854 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1846:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1848:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a184a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a184c:	f7fe ffc0 	bl	80a07d0 <hal_i2c_init>
}
 80a1850:	4620      	mov	r0, r4
 80a1852:	bd10      	pop	{r4, pc}
 80a1854:	080a3334 	.word	0x080a3334

080a1858 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1858:	2200      	movs	r2, #0
 80a185a:	6840      	ldr	r0, [r0, #4]
 80a185c:	4611      	mov	r1, r2
 80a185e:	f7ff b855 	b.w	80a090c <network_ready>

080a1862 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1862:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1864:	4615      	mov	r5, r2
 80a1866:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1868:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a186a:	460e      	mov	r6, r1
 80a186c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a186e:	2100      	movs	r1, #0
 80a1870:	a803      	add	r0, sp, #12
 80a1872:	f001 fca1 	bl	80a31b8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1876:	4628      	mov	r0, r5
 80a1878:	f001 fce5 	bl	80a3246 <strlen>
 80a187c:	2700      	movs	r7, #0
 80a187e:	b281      	uxth	r1, r0
 80a1880:	6873      	ldr	r3, [r6, #4]
 80a1882:	4628      	mov	r0, r5
 80a1884:	9700      	str	r7, [sp, #0]
 80a1886:	aa03      	add	r2, sp, #12
 80a1888:	f7fe ffec 	bl	80a0864 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a188c:	b130      	cbz	r0, 80a189c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a188e:	4639      	mov	r1, r7
 80a1890:	4620      	mov	r0, r4
 80a1892:	f7ff fe23 	bl	80a14dc <_ZN9IPAddressC1Em>
    }
 80a1896:	4620      	mov	r0, r4
 80a1898:	b009      	add	sp, #36	; 0x24
 80a189a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a189c:	4620      	mov	r0, r4
 80a189e:	a903      	add	r1, sp, #12
 80a18a0:	f7ff fe0a 	bl	80a14b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a18a4:	e7f7      	b.n	80a1896 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a18a6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a18a6:	2200      	movs	r2, #0
 80a18a8:	6840      	ldr	r0, [r0, #4]
 80a18aa:	4611      	mov	r1, r2
 80a18ac:	f7ff b84e 	b.w	80a094c <network_listening>

080a18b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a18b0:	2200      	movs	r2, #0
 80a18b2:	6840      	ldr	r0, [r0, #4]
 80a18b4:	4611      	mov	r1, r2
 80a18b6:	f7ff b859 	b.w	80a096c <network_get_listen_timeout>

080a18ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a18ba:	2200      	movs	r2, #0
 80a18bc:	6840      	ldr	r0, [r0, #4]
 80a18be:	f7ff b84d 	b.w	80a095c <network_set_listen_timeout>

080a18c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a18c2:	2200      	movs	r2, #0
 80a18c4:	6840      	ldr	r0, [r0, #4]
 80a18c6:	f081 0101 	eor.w	r1, r1, #1
 80a18ca:	f7ff b837 	b.w	80a093c <network_listen>

080a18ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a18ce:	2300      	movs	r3, #0
 80a18d0:	6840      	ldr	r0, [r0, #4]
 80a18d2:	461a      	mov	r2, r3
 80a18d4:	4619      	mov	r1, r3
 80a18d6:	f7ff b829 	b.w	80a092c <network_off>

080a18da <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a18da:	2200      	movs	r2, #0
 80a18dc:	6840      	ldr	r0, [r0, #4]
 80a18de:	4611      	mov	r1, r2
 80a18e0:	f7ff b804 	b.w	80a08ec <network_connecting>

080a18e4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a18e4:	2200      	movs	r2, #0
 80a18e6:	2102      	movs	r1, #2
 80a18e8:	6840      	ldr	r0, [r0, #4]
 80a18ea:	f7ff b807 	b.w	80a08fc <network_disconnect>

080a18ee <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a18ee:	2300      	movs	r3, #0
 80a18f0:	6840      	ldr	r0, [r0, #4]
 80a18f2:	461a      	mov	r2, r3
 80a18f4:	f7fe bff2 	b.w	80a08dc <network_connect>

080a18f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a18f8:	2204      	movs	r2, #4
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a18fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a18fe:	4a02      	ldr	r2, [pc, #8]	; (80a1908 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1900:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1902:	4770      	bx	lr
 80a1904:	20000514 	.word	0x20000514
 80a1908:	080a335c 	.word	0x080a335c

080a190c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a190c:	2300      	movs	r3, #0
 80a190e:	6840      	ldr	r0, [r0, #4]
 80a1910:	461a      	mov	r2, r3
 80a1912:	f7fe bfe3 	b.w	80a08dc <network_connect>

080a1916 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1916:	2200      	movs	r2, #0
 80a1918:	2102      	movs	r1, #2
 80a191a:	6840      	ldr	r0, [r0, #4]
 80a191c:	f7fe bfee 	b.w	80a08fc <network_disconnect>

080a1920 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1920:	2200      	movs	r2, #0
 80a1922:	6840      	ldr	r0, [r0, #4]
 80a1924:	4611      	mov	r1, r2
 80a1926:	f7fe bfe1 	b.w	80a08ec <network_connecting>

080a192a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a192a:	2200      	movs	r2, #0
 80a192c:	6840      	ldr	r0, [r0, #4]
 80a192e:	4611      	mov	r1, r2
 80a1930:	f7fe bfec 	b.w	80a090c <network_ready>

080a1934 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1934:	2300      	movs	r3, #0
 80a1936:	6840      	ldr	r0, [r0, #4]
 80a1938:	461a      	mov	r2, r3
 80a193a:	4619      	mov	r1, r3
 80a193c:	f7fe bfee 	b.w	80a091c <network_on>

080a1940 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1940:	2300      	movs	r3, #0
 80a1942:	6840      	ldr	r0, [r0, #4]
 80a1944:	461a      	mov	r2, r3
 80a1946:	4619      	mov	r1, r3
 80a1948:	f7fe bff0 	b.w	80a092c <network_off>

080a194c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a194c:	2200      	movs	r2, #0
 80a194e:	6840      	ldr	r0, [r0, #4]
 80a1950:	f081 0101 	eor.w	r1, r1, #1
 80a1954:	f7fe bff2 	b.w	80a093c <network_listen>

080a1958 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1958:	2200      	movs	r2, #0
 80a195a:	6840      	ldr	r0, [r0, #4]
 80a195c:	f7fe bffe 	b.w	80a095c <network_set_listen_timeout>

080a1960 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1960:	2200      	movs	r2, #0
 80a1962:	6840      	ldr	r0, [r0, #4]
 80a1964:	4611      	mov	r1, r2
 80a1966:	f7ff b801 	b.w	80a096c <network_get_listen_timeout>

080a196a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a196a:	2200      	movs	r2, #0
 80a196c:	6840      	ldr	r0, [r0, #4]
 80a196e:	4611      	mov	r1, r2
 80a1970:	f7fe bfec 	b.w	80a094c <network_listening>

080a1974 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1974:	b570      	push	{r4, r5, r6, lr}
 80a1976:	4615      	mov	r5, r2
 80a1978:	b08e      	sub	sp, #56	; 0x38
 80a197a:	4604      	mov	r4, r0
    IPAddress addr;
 80a197c:	a808      	add	r0, sp, #32
 80a197e:	f7ff fd8d 	bl	80a149c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a1982:	2211      	movs	r2, #17
 80a1984:	2100      	movs	r1, #0
 80a1986:	a803      	add	r0, sp, #12
 80a1988:	f001 fc16 	bl	80a31b8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a198c:	2600      	movs	r6, #0
 80a198e:	4628      	mov	r0, r5
 80a1990:	f001 fc59 	bl	80a3246 <strlen>
 80a1994:	4b0a      	ldr	r3, [pc, #40]	; (80a19c0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1996:	9600      	str	r6, [sp, #0]
 80a1998:	b281      	uxth	r1, r0
 80a199a:	685b      	ldr	r3, [r3, #4]
 80a199c:	4628      	mov	r0, r5
 80a199e:	aa03      	add	r2, sp, #12
 80a19a0:	f7fe ff60 	bl	80a0864 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a19a4:	b130      	cbz	r0, 80a19b4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a19a6:	4631      	mov	r1, r6
 80a19a8:	4620      	mov	r0, r4
 80a19aa:	f7ff fd97 	bl	80a14dc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a19ae:	4620      	mov	r0, r4
 80a19b0:	b00e      	add	sp, #56	; 0x38
 80a19b2:	bd70      	pop	{r4, r5, r6, pc}
 80a19b4:	4620      	mov	r0, r4
 80a19b6:	a903      	add	r1, sp, #12
 80a19b8:	f7ff fd7e 	bl	80a14b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a19bc:	e7f7      	b.n	80a19ae <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a19be:	bf00      	nop
 80a19c0:	20000514 	.word	0x20000514

080a19c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a19c4:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a19c6:	4a03      	ldr	r2, [pc, #12]	; (80a19d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a19c8:	601a      	str	r2, [r3, #0]
 80a19ca:	2200      	movs	r2, #0
 80a19cc:	605a      	str	r2, [r3, #4]

} // spark
 80a19ce:	4770      	bx	lr
 80a19d0:	2000051c 	.word	0x2000051c
 80a19d4:	080a3390 	.word	0x080a3390

080a19d8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a19d8:	b510      	push	{r4, lr}
 80a19da:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a19dc:	6880      	ldr	r0, [r0, #8]
 80a19de:	b108      	cbz	r0, 80a19e4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a19e0:	f7fe fe7e 	bl	80a06e0 <os_mutex_recursive_destroy>
 80a19e4:	4620      	mov	r0, r4
 80a19e6:	bd10      	pop	{r4, pc}

080a19e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a19e8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a19ea:	b570      	push	{r4, r5, r6, lr}
 80a19ec:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a19ee:	d901      	bls.n	80a19f4 <pinAvailable+0xc>
    return false;
 80a19f0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a19f2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a19f4:	f1a0 030d 	sub.w	r3, r0, #13
 80a19f8:	2b02      	cmp	r3, #2
 80a19fa:	d90b      	bls.n	80a1a14 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a19fc:	2801      	cmp	r0, #1
 80a19fe:	d826      	bhi.n	80a1a4e <pinAvailable+0x66>
 80a1a00:	f000 f87a 	bl	80a1af8 <_Z19__fetch_global_Wirev>
 80a1a04:	2100      	movs	r1, #0
 80a1a06:	7c00      	ldrb	r0, [r0, #16]
 80a1a08:	f7fe feda 	bl	80a07c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1a0c:	f080 0001 	eor.w	r0, r0, #1
 80a1a10:	b2c0      	uxtb	r0, r0
 80a1a12:	e7ee      	b.n	80a19f2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1a14:	4e13      	ldr	r6, [pc, #76]	; (80a1a64 <pinAvailable+0x7c>)
 80a1a16:	7831      	ldrb	r1, [r6, #0]
 80a1a18:	f3bf 8f5b 	dmb	ish
 80a1a1c:	f011 0501 	ands.w	r5, r1, #1
 80a1a20:	d10f      	bne.n	80a1a42 <pinAvailable+0x5a>
 80a1a22:	4630      	mov	r0, r6
 80a1a24:	f7fe fb3f 	bl	80a00a6 <__cxa_guard_acquire>
 80a1a28:	b158      	cbz	r0, 80a1a42 <pinAvailable+0x5a>
 80a1a2a:	4629      	mov	r1, r5
 80a1a2c:	480e      	ldr	r0, [pc, #56]	; (80a1a68 <pinAvailable+0x80>)
 80a1a2e:	f7fe fff5 	bl	80a0a1c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1a32:	4630      	mov	r0, r6
 80a1a34:	f7fe fb3c 	bl	80a00b0 <__cxa_guard_release>
 80a1a38:	4a0c      	ldr	r2, [pc, #48]	; (80a1a6c <pinAvailable+0x84>)
 80a1a3a:	490d      	ldr	r1, [pc, #52]	; (80a1a70 <pinAvailable+0x88>)
 80a1a3c:	480a      	ldr	r0, [pc, #40]	; (80a1a68 <pinAvailable+0x80>)
 80a1a3e:	f000 f883 	bl	80a1b48 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1a42:	4b09      	ldr	r3, [pc, #36]	; (80a1a68 <pinAvailable+0x80>)
 80a1a44:	7818      	ldrb	r0, [r3, #0]
 80a1a46:	f7fe fed5 	bl	80a07f4 <hal_spi_is_enabled>
 80a1a4a:	2800      	cmp	r0, #0
 80a1a4c:	d1d0      	bne.n	80a19f0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1a4e:	3c12      	subs	r4, #18
 80a1a50:	2c01      	cmp	r4, #1
 80a1a52:	d805      	bhi.n	80a1a60 <pinAvailable+0x78>
 80a1a54:	f7ff fe86 	bl	80a1764 <_Z22__fetch_global_Serial1v>
 80a1a58:	7c00      	ldrb	r0, [r0, #16]
 80a1a5a:	f7fe fe79 	bl	80a0750 <hal_usart_is_enabled>
 80a1a5e:	e7d5      	b.n	80a1a0c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1a60:	2001      	movs	r0, #1
 80a1a62:	e7c6      	b.n	80a19f2 <pinAvailable+0xa>
 80a1a64:	20000524 	.word	0x20000524
 80a1a68:	20000528 	.word	0x20000528
 80a1a6c:	2000006c 	.word	0x2000006c
 80a1a70:	080a19d9 	.word	0x080a19d9

080a1a74 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1a74:	2817      	cmp	r0, #23
{
 80a1a76:	b538      	push	{r3, r4, r5, lr}
 80a1a78:	4604      	mov	r4, r0
 80a1a7a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1a7c:	d80a      	bhi.n	80a1a94 <pinMode+0x20>
 80a1a7e:	29ff      	cmp	r1, #255	; 0xff
 80a1a80:	d008      	beq.n	80a1a94 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a1a82:	f7ff ffb1 	bl	80a19e8 <pinAvailable>
 80a1a86:	b128      	cbz	r0, 80a1a94 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1a88:	4629      	mov	r1, r5
 80a1a8a:	4620      	mov	r0, r4
}
 80a1a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1a90:	f7fe bdee 	b.w	80a0670 <HAL_Pin_Mode>
}
 80a1a94:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1a98 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1a98:	2300      	movs	r3, #0
 80a1a9a:	b513      	push	{r0, r1, r4, lr}
 80a1a9c:	4c07      	ldr	r4, [pc, #28]	; (80a1abc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1a9e:	461a      	mov	r2, r3
 80a1aa0:	4619      	mov	r1, r3
 80a1aa2:	4620      	mov	r0, r4
 80a1aa4:	9300      	str	r3, [sp, #0]
 80a1aa6:	f7ff fd2f 	bl	80a1508 <_ZN9IPAddressC1Ehhhh>
 80a1aaa:	4620      	mov	r0, r4
 80a1aac:	4a04      	ldr	r2, [pc, #16]	; (80a1ac0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1aae:	4905      	ldr	r1, [pc, #20]	; (80a1ac4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1ab0:	b002      	add	sp, #8
 80a1ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1ab6:	f000 b847 	b.w	80a1b48 <__aeabi_atexit>
 80a1aba:	bf00      	nop
 80a1abc:	20000538 	.word	0x20000538
 80a1ac0:	2000006c 	.word	0x2000006c
 80a1ac4:	080a1459 	.word	0x080a1459

080a1ac8 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1ac8:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a1aca:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1acc:	2520      	movs	r5, #32
 80a1ace:	8043      	strh	r3, [r0, #2]
 80a1ad0:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ad2:	4e08      	ldr	r6, [pc, #32]	; (80a1af4 <_Z17acquireWireBufferv+0x2c>)
{
 80a1ad4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1ad6:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ad8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1ada:	6085      	str	r5, [r0, #8]
 80a1adc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ade:	4628      	mov	r0, r5
 80a1ae0:	f000 f839 	bl	80a1b56 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ae4:	4631      	mov	r1, r6
	};
 80a1ae6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ae8:	4628      	mov	r0, r5
 80a1aea:	f000 f834 	bl	80a1b56 <_ZnajRKSt9nothrow_t>
	};
 80a1aee:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a1af0:	4620      	mov	r0, r4
 80a1af2:	bd70      	pop	{r4, r5, r6, pc}
 80a1af4:	080a33bc 	.word	0x080a33bc

080a1af8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1af8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1afa:	4d0f      	ldr	r5, [pc, #60]	; (80a1b38 <_Z19__fetch_global_Wirev+0x40>)
{
 80a1afc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1afe:	7829      	ldrb	r1, [r5, #0]
 80a1b00:	f3bf 8f5b 	dmb	ish
 80a1b04:	f011 0401 	ands.w	r4, r1, #1
 80a1b08:	d113      	bne.n	80a1b32 <_Z19__fetch_global_Wirev+0x3a>
 80a1b0a:	4628      	mov	r0, r5
 80a1b0c:	f7fe facb 	bl	80a00a6 <__cxa_guard_acquire>
 80a1b10:	b178      	cbz	r0, 80a1b32 <_Z19__fetch_global_Wirev+0x3a>
 80a1b12:	a801      	add	r0, sp, #4
 80a1b14:	f7ff ffd8 	bl	80a1ac8 <_Z17acquireWireBufferv>
 80a1b18:	4621      	mov	r1, r4
 80a1b1a:	aa01      	add	r2, sp, #4
 80a1b1c:	4807      	ldr	r0, [pc, #28]	; (80a1b3c <_Z19__fetch_global_Wirev+0x44>)
 80a1b1e:	f7ff fe89 	bl	80a1834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1b22:	4628      	mov	r0, r5
 80a1b24:	f7fe fac4 	bl	80a00b0 <__cxa_guard_release>
 80a1b28:	4a05      	ldr	r2, [pc, #20]	; (80a1b40 <_Z19__fetch_global_Wirev+0x48>)
 80a1b2a:	4906      	ldr	r1, [pc, #24]	; (80a1b44 <_Z19__fetch_global_Wirev+0x4c>)
 80a1b2c:	4803      	ldr	r0, [pc, #12]	; (80a1b3c <_Z19__fetch_global_Wirev+0x44>)
 80a1b2e:	f000 f80b 	bl	80a1b48 <__aeabi_atexit>
	return wire;
}
 80a1b32:	4802      	ldr	r0, [pc, #8]	; (80a1b3c <_Z19__fetch_global_Wirev+0x44>)
 80a1b34:	b007      	add	sp, #28
 80a1b36:	bd30      	pop	{r4, r5, pc}
 80a1b38:	20000550 	.word	0x20000550
 80a1b3c:	20000554 	.word	0x20000554
 80a1b40:	2000006c 	.word	0x2000006c
 80a1b44:	080a17dd 	.word	0x080a17dd

080a1b48 <__aeabi_atexit>:
 80a1b48:	460b      	mov	r3, r1
 80a1b4a:	4601      	mov	r1, r0
 80a1b4c:	4618      	mov	r0, r3
 80a1b4e:	f001 bb17 	b.w	80a3180 <__cxa_atexit>

080a1b52 <_ZdlPvj>:
 80a1b52:	f7fe baa6 	b.w	80a00a2 <_ZdlPv>

080a1b56 <_ZnajRKSt9nothrow_t>:
 80a1b56:	f7fe baa2 	b.w	80a009e <_Znaj>

080a1b5a <_ZSt25__throw_bad_function_callv>:
 80a1b5a:	b508      	push	{r3, lr}
 80a1b5c:	f7fe ff3e 	bl	80a09dc <abort>

080a1b60 <logf>:
 80a1b60:	b570      	push	{r4, r5, r6, lr}
 80a1b62:	b08a      	sub	sp, #40	; 0x28
 80a1b64:	4604      	mov	r4, r0
 80a1b66:	f000 f879 	bl	80a1c5c <__ieee754_logf>
 80a1b6a:	4b37      	ldr	r3, [pc, #220]	; (80a1c48 <logf+0xe8>)
 80a1b6c:	4605      	mov	r5, r0
 80a1b6e:	f993 6000 	ldrsb.w	r6, [r3]
 80a1b72:	1c73      	adds	r3, r6, #1
 80a1b74:	d033      	beq.n	80a1bde <logf+0x7e>
 80a1b76:	4621      	mov	r1, r4
 80a1b78:	4620      	mov	r0, r4
 80a1b7a:	f001 f951 	bl	80a2e20 <__aeabi_fcmpun>
 80a1b7e:	2800      	cmp	r0, #0
 80a1b80:	d12d      	bne.n	80a1bde <logf+0x7e>
 80a1b82:	2100      	movs	r1, #0
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	f001 f941 	bl	80a2e0c <__aeabi_fcmpgt>
 80a1b8a:	4603      	mov	r3, r0
 80a1b8c:	bb38      	cbnz	r0, 80a1bde <logf+0x7e>
 80a1b8e:	4a2f      	ldr	r2, [pc, #188]	; (80a1c4c <logf+0xec>)
 80a1b90:	4620      	mov	r0, r4
 80a1b92:	9308      	str	r3, [sp, #32]
 80a1b94:	9201      	str	r2, [sp, #4]
 80a1b96:	f000 fb0d 	bl	80a21b4 <__aeabi_f2d>
 80a1b9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a1b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a1ba2:	b1fe      	cbz	r6, 80a1be4 <logf+0x84>
 80a1ba4:	2200      	movs	r2, #0
 80a1ba6:	4b2a      	ldr	r3, [pc, #168]	; (80a1c50 <logf+0xf0>)
 80a1ba8:	4620      	mov	r0, r4
 80a1baa:	2100      	movs	r1, #0
 80a1bac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a1bb0:	f001 f904 	bl	80a2dbc <__aeabi_fcmpeq>
 80a1bb4:	2800      	cmp	r0, #0
 80a1bb6:	d03d      	beq.n	80a1c34 <logf+0xd4>
 80a1bb8:	2302      	movs	r3, #2
 80a1bba:	429e      	cmp	r6, r3
 80a1bbc:	9300      	str	r3, [sp, #0]
 80a1bbe:	d133      	bne.n	80a1c28 <logf+0xc8>
 80a1bc0:	f7fe ff1c 	bl	80a09fc <__errno>
 80a1bc4:	2322      	movs	r3, #34	; 0x22
 80a1bc6:	6003      	str	r3, [r0, #0]
 80a1bc8:	9b08      	ldr	r3, [sp, #32]
 80a1bca:	b31b      	cbz	r3, 80a1c14 <logf+0xb4>
 80a1bcc:	f7fe ff16 	bl	80a09fc <__errno>
 80a1bd0:	9b08      	ldr	r3, [sp, #32]
 80a1bd2:	6003      	str	r3, [r0, #0]
 80a1bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1bd8:	f000 fdfe 	bl	80a27d8 <__aeabi_d2f>
 80a1bdc:	4605      	mov	r5, r0
 80a1bde:	4628      	mov	r0, r5
 80a1be0:	b00a      	add	sp, #40	; 0x28
 80a1be2:	bd70      	pop	{r4, r5, r6, pc}
 80a1be4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1be8:	4b1a      	ldr	r3, [pc, #104]	; (80a1c54 <logf+0xf4>)
 80a1bea:	4620      	mov	r0, r4
 80a1bec:	2100      	movs	r1, #0
 80a1bee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a1bf2:	f001 f8e3 	bl	80a2dbc <__aeabi_fcmpeq>
 80a1bf6:	b9a8      	cbnz	r0, 80a1c24 <logf+0xc4>
 80a1bf8:	2301      	movs	r3, #1
 80a1bfa:	9300      	str	r3, [sp, #0]
 80a1bfc:	4668      	mov	r0, sp
 80a1bfe:	f000 f96d 	bl	80a1edc <matherr>
 80a1c02:	b1d8      	cbz	r0, 80a1c3c <logf+0xdc>
 80a1c04:	4814      	ldr	r0, [pc, #80]	; (80a1c58 <logf+0xf8>)
 80a1c06:	f000 f96b 	bl	80a1ee0 <nan>
 80a1c0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1c0e:	9b08      	ldr	r3, [sp, #32]
 80a1c10:	2b00      	cmp	r3, #0
 80a1c12:	d1db      	bne.n	80a1bcc <logf+0x6c>
 80a1c14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1c18:	f000 fdde 	bl	80a27d8 <__aeabi_d2f>
 80a1c1c:	4605      	mov	r5, r0
 80a1c1e:	4628      	mov	r0, r5
 80a1c20:	b00a      	add	sp, #40	; 0x28
 80a1c22:	bd70      	pop	{r4, r5, r6, pc}
 80a1c24:	2302      	movs	r3, #2
 80a1c26:	9300      	str	r3, [sp, #0]
 80a1c28:	4668      	mov	r0, sp
 80a1c2a:	f000 f957 	bl	80a1edc <matherr>
 80a1c2e:	2800      	cmp	r0, #0
 80a1c30:	d1ed      	bne.n	80a1c0e <logf+0xae>
 80a1c32:	e7c5      	b.n	80a1bc0 <logf+0x60>
 80a1c34:	2301      	movs	r3, #1
 80a1c36:	2e02      	cmp	r6, #2
 80a1c38:	9300      	str	r3, [sp, #0]
 80a1c3a:	d1df      	bne.n	80a1bfc <logf+0x9c>
 80a1c3c:	f7fe fede 	bl	80a09fc <__errno>
 80a1c40:	2321      	movs	r3, #33	; 0x21
 80a1c42:	6003      	str	r3, [r0, #0]
 80a1c44:	e7de      	b.n	80a1c04 <logf+0xa4>
 80a1c46:	bf00      	nop
 80a1c48:	20000004 	.word	0x20000004
 80a1c4c:	080a33c0 	.word	0x080a33c0
 80a1c50:	fff00000 	.word	0xfff00000
 80a1c54:	c7efffff 	.word	0xc7efffff
 80a1c58:	080a33c4 	.word	0x080a33c4

080a1c5c <__ieee754_logf>:
 80a1c5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a1c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1c64:	d02b      	beq.n	80a1cbe <__ieee754_logf+0x62>
 80a1c66:	2800      	cmp	r0, #0
 80a1c68:	4601      	mov	r1, r0
 80a1c6a:	4603      	mov	r3, r0
 80a1c6c:	db40      	blt.n	80a1cf0 <__ieee754_logf+0x94>
 80a1c6e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80a1c72:	da39      	bge.n	80a1ce8 <__ieee754_logf+0x8c>
 80a1c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1c78:	db41      	blt.n	80a1cfe <__ieee754_logf+0xa2>
 80a1c7a:	2100      	movs	r1, #0
 80a1c7c:	4a8a      	ldr	r2, [pc, #552]	; (80a1ea8 <__ieee754_logf+0x24c>)
 80a1c7e:	f3c3 0616 	ubfx	r6, r3, #0, #23
 80a1c82:	4432      	add	r2, r6
 80a1c84:	15dc      	asrs	r4, r3, #23
 80a1c86:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
 80a1c8a:	3c7f      	subs	r4, #127	; 0x7f
 80a1c8c:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 80a1c90:	440c      	add	r4, r1
 80a1c92:	4330      	orrs	r0, r6
 80a1c94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1c98:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
 80a1c9c:	f000 fdf0 	bl	80a2880 <__aeabi_fsub>
 80a1ca0:	4b82      	ldr	r3, [pc, #520]	; (80a1eac <__ieee754_logf+0x250>)
 80a1ca2:	f106 020f 	add.w	r2, r6, #15
 80a1ca6:	4013      	ands	r3, r2
 80a1ca8:	4605      	mov	r5, r0
 80a1caa:	bb83      	cbnz	r3, 80a1d0e <__ieee754_logf+0xb2>
 80a1cac:	2100      	movs	r1, #0
 80a1cae:	f001 f885 	bl	80a2dbc <__aeabi_fcmpeq>
 80a1cb2:	2800      	cmp	r0, #0
 80a1cb4:	f000 80a2 	beq.w	80a1dfc <__ieee754_logf+0x1a0>
 80a1cb8:	b944      	cbnz	r4, 80a1ccc <__ieee754_logf+0x70>
 80a1cba:	2000      	movs	r0, #0
 80a1cbc:	e004      	b.n	80a1cc8 <__ieee754_logf+0x6c>
 80a1cbe:	2100      	movs	r1, #0
 80a1cc0:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80a1cc4:	f000 ff9a 	bl	80a2bfc <__aeabi_fdiv>
 80a1cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	f000 fe8d 	bl	80a29ec <__aeabi_i2f>
 80a1cd2:	4977      	ldr	r1, [pc, #476]	; (80a1eb0 <__ieee754_logf+0x254>)
 80a1cd4:	4605      	mov	r5, r0
 80a1cd6:	f000 fedd 	bl	80a2a94 <__aeabi_fmul>
 80a1cda:	4976      	ldr	r1, [pc, #472]	; (80a1eb4 <__ieee754_logf+0x258>)
 80a1cdc:	4604      	mov	r4, r0
 80a1cde:	4628      	mov	r0, r5
 80a1ce0:	f000 fed8 	bl	80a2a94 <__aeabi_fmul>
 80a1ce4:	4601      	mov	r1, r0
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f000 fdcc 	bl	80a2884 <__addsf3>
 80a1cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1cf0:	f000 fdc6 	bl	80a2880 <__aeabi_fsub>
 80a1cf4:	2100      	movs	r1, #0
 80a1cf6:	f000 ff81 	bl	80a2bfc <__aeabi_fdiv>
 80a1cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1cfe:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a1d02:	f000 fec7 	bl	80a2a94 <__aeabi_fmul>
 80a1d06:	f06f 0118 	mvn.w	r1, #24
 80a1d0a:	4603      	mov	r3, r0
 80a1d0c:	e7b6      	b.n	80a1c7c <__ieee754_logf+0x20>
 80a1d0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a1d12:	f000 fdb7 	bl	80a2884 <__addsf3>
 80a1d16:	4601      	mov	r1, r0
 80a1d18:	4628      	mov	r0, r5
 80a1d1a:	f000 ff6f 	bl	80a2bfc <__aeabi_fdiv>
 80a1d1e:	4680      	mov	r8, r0
 80a1d20:	4620      	mov	r0, r4
 80a1d22:	f000 fe63 	bl	80a29ec <__aeabi_i2f>
 80a1d26:	4641      	mov	r1, r8
 80a1d28:	4681      	mov	r9, r0
 80a1d2a:	4640      	mov	r0, r8
 80a1d2c:	f000 feb2 	bl	80a2a94 <__aeabi_fmul>
 80a1d30:	4601      	mov	r1, r0
 80a1d32:	4682      	mov	sl, r0
 80a1d34:	f000 feae 	bl	80a2a94 <__aeabi_fmul>
 80a1d38:	4607      	mov	r7, r0
 80a1d3a:	495f      	ldr	r1, [pc, #380]	; (80a1eb8 <__ieee754_logf+0x25c>)
 80a1d3c:	f000 feaa 	bl	80a2a94 <__aeabi_fmul>
 80a1d40:	495e      	ldr	r1, [pc, #376]	; (80a1ebc <__ieee754_logf+0x260>)
 80a1d42:	f000 fd9f 	bl	80a2884 <__addsf3>
 80a1d46:	4639      	mov	r1, r7
 80a1d48:	f000 fea4 	bl	80a2a94 <__aeabi_fmul>
 80a1d4c:	495c      	ldr	r1, [pc, #368]	; (80a1ec0 <__ieee754_logf+0x264>)
 80a1d4e:	f000 fd99 	bl	80a2884 <__addsf3>
 80a1d52:	4639      	mov	r1, r7
 80a1d54:	f000 fe9e 	bl	80a2a94 <__aeabi_fmul>
 80a1d58:	495a      	ldr	r1, [pc, #360]	; (80a1ec4 <__ieee754_logf+0x268>)
 80a1d5a:	f000 fd93 	bl	80a2884 <__addsf3>
 80a1d5e:	4651      	mov	r1, sl
 80a1d60:	f000 fe98 	bl	80a2a94 <__aeabi_fmul>
 80a1d64:	4958      	ldr	r1, [pc, #352]	; (80a1ec8 <__ieee754_logf+0x26c>)
 80a1d66:	4682      	mov	sl, r0
 80a1d68:	4638      	mov	r0, r7
 80a1d6a:	f000 fe93 	bl	80a2a94 <__aeabi_fmul>
 80a1d6e:	4957      	ldr	r1, [pc, #348]	; (80a1ecc <__ieee754_logf+0x270>)
 80a1d70:	f000 fd88 	bl	80a2884 <__addsf3>
 80a1d74:	4639      	mov	r1, r7
 80a1d76:	f000 fe8d 	bl	80a2a94 <__aeabi_fmul>
 80a1d7a:	4955      	ldr	r1, [pc, #340]	; (80a1ed0 <__ieee754_logf+0x274>)
 80a1d7c:	f000 fd82 	bl	80a2884 <__addsf3>
 80a1d80:	4639      	mov	r1, r7
 80a1d82:	f000 fe87 	bl	80a2a94 <__aeabi_fmul>
 80a1d86:	4601      	mov	r1, r0
 80a1d88:	4650      	mov	r0, sl
 80a1d8a:	f000 fd7b 	bl	80a2884 <__addsf3>
 80a1d8e:	4a51      	ldr	r2, [pc, #324]	; (80a1ed4 <__ieee754_logf+0x278>)
 80a1d90:	f5c6 1357 	rsb	r3, r6, #3522560	; 0x35c000
 80a1d94:	4432      	add	r2, r6
 80a1d96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80a1d9a:	4313      	orrs	r3, r2
 80a1d9c:	2b00      	cmp	r3, #0
 80a1d9e:	4606      	mov	r6, r0
 80a1da0:	dd4f      	ble.n	80a1e42 <__ieee754_logf+0x1e6>
 80a1da2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a1da6:	4628      	mov	r0, r5
 80a1da8:	f000 fe74 	bl	80a2a94 <__aeabi_fmul>
 80a1dac:	4629      	mov	r1, r5
 80a1dae:	f000 fe71 	bl	80a2a94 <__aeabi_fmul>
 80a1db2:	4607      	mov	r7, r0
 80a1db4:	2c00      	cmp	r4, #0
 80a1db6:	d051      	beq.n	80a1e5c <__ieee754_logf+0x200>
 80a1db8:	493d      	ldr	r1, [pc, #244]	; (80a1eb0 <__ieee754_logf+0x254>)
 80a1dba:	4648      	mov	r0, r9
 80a1dbc:	f000 fe6a 	bl	80a2a94 <__aeabi_fmul>
 80a1dc0:	4639      	mov	r1, r7
 80a1dc2:	4604      	mov	r4, r0
 80a1dc4:	4630      	mov	r0, r6
 80a1dc6:	f000 fd5d 	bl	80a2884 <__addsf3>
 80a1dca:	4641      	mov	r1, r8
 80a1dcc:	f000 fe62 	bl	80a2a94 <__aeabi_fmul>
 80a1dd0:	4938      	ldr	r1, [pc, #224]	; (80a1eb4 <__ieee754_logf+0x258>)
 80a1dd2:	4606      	mov	r6, r0
 80a1dd4:	4648      	mov	r0, r9
 80a1dd6:	f000 fe5d 	bl	80a2a94 <__aeabi_fmul>
 80a1dda:	4601      	mov	r1, r0
 80a1ddc:	4630      	mov	r0, r6
 80a1dde:	f000 fd51 	bl	80a2884 <__addsf3>
 80a1de2:	4601      	mov	r1, r0
 80a1de4:	4638      	mov	r0, r7
 80a1de6:	f000 fd4b 	bl	80a2880 <__aeabi_fsub>
 80a1dea:	4629      	mov	r1, r5
 80a1dec:	f000 fd48 	bl	80a2880 <__aeabi_fsub>
 80a1df0:	4601      	mov	r1, r0
 80a1df2:	4620      	mov	r0, r4
 80a1df4:	f000 fd44 	bl	80a2880 <__aeabi_fsub>
 80a1df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1dfc:	4936      	ldr	r1, [pc, #216]	; (80a1ed8 <__ieee754_logf+0x27c>)
 80a1dfe:	4628      	mov	r0, r5
 80a1e00:	f000 fe48 	bl	80a2a94 <__aeabi_fmul>
 80a1e04:	4601      	mov	r1, r0
 80a1e06:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80a1e0a:	f000 fd39 	bl	80a2880 <__aeabi_fsub>
 80a1e0e:	4629      	mov	r1, r5
 80a1e10:	4606      	mov	r6, r0
 80a1e12:	4628      	mov	r0, r5
 80a1e14:	f000 fe3e 	bl	80a2a94 <__aeabi_fmul>
 80a1e18:	4601      	mov	r1, r0
 80a1e1a:	4630      	mov	r0, r6
 80a1e1c:	f000 fe3a 	bl	80a2a94 <__aeabi_fmul>
 80a1e20:	4606      	mov	r6, r0
 80a1e22:	b35c      	cbz	r4, 80a1e7c <__ieee754_logf+0x220>
 80a1e24:	4620      	mov	r0, r4
 80a1e26:	f000 fde1 	bl	80a29ec <__aeabi_i2f>
 80a1e2a:	4921      	ldr	r1, [pc, #132]	; (80a1eb0 <__ieee754_logf+0x254>)
 80a1e2c:	4607      	mov	r7, r0
 80a1e2e:	f000 fe31 	bl	80a2a94 <__aeabi_fmul>
 80a1e32:	4604      	mov	r4, r0
 80a1e34:	4638      	mov	r0, r7
 80a1e36:	491f      	ldr	r1, [pc, #124]	; (80a1eb4 <__ieee754_logf+0x258>)
 80a1e38:	f000 fe2c 	bl	80a2a94 <__aeabi_fmul>
 80a1e3c:	4601      	mov	r1, r0
 80a1e3e:	4630      	mov	r0, r6
 80a1e40:	e7d1      	b.n	80a1de6 <__ieee754_logf+0x18a>
 80a1e42:	bb04      	cbnz	r4, 80a1e86 <__ieee754_logf+0x22a>
 80a1e44:	4601      	mov	r1, r0
 80a1e46:	4628      	mov	r0, r5
 80a1e48:	f000 fd1a 	bl	80a2880 <__aeabi_fsub>
 80a1e4c:	4641      	mov	r1, r8
 80a1e4e:	f000 fe21 	bl	80a2a94 <__aeabi_fmul>
 80a1e52:	4601      	mov	r1, r0
 80a1e54:	4628      	mov	r0, r5
 80a1e56:	f000 fd13 	bl	80a2880 <__aeabi_fsub>
 80a1e5a:	e735      	b.n	80a1cc8 <__ieee754_logf+0x6c>
 80a1e5c:	4639      	mov	r1, r7
 80a1e5e:	4630      	mov	r0, r6
 80a1e60:	f000 fd10 	bl	80a2884 <__addsf3>
 80a1e64:	4641      	mov	r1, r8
 80a1e66:	f000 fe15 	bl	80a2a94 <__aeabi_fmul>
 80a1e6a:	4601      	mov	r1, r0
 80a1e6c:	4638      	mov	r0, r7
 80a1e6e:	f000 fd07 	bl	80a2880 <__aeabi_fsub>
 80a1e72:	4601      	mov	r1, r0
 80a1e74:	4628      	mov	r0, r5
 80a1e76:	f000 fd03 	bl	80a2880 <__aeabi_fsub>
 80a1e7a:	e725      	b.n	80a1cc8 <__ieee754_logf+0x6c>
 80a1e7c:	4601      	mov	r1, r0
 80a1e7e:	4628      	mov	r0, r5
 80a1e80:	f000 fcfe 	bl	80a2880 <__aeabi_fsub>
 80a1e84:	e720      	b.n	80a1cc8 <__ieee754_logf+0x6c>
 80a1e86:	490a      	ldr	r1, [pc, #40]	; (80a1eb0 <__ieee754_logf+0x254>)
 80a1e88:	4648      	mov	r0, r9
 80a1e8a:	f000 fe03 	bl	80a2a94 <__aeabi_fmul>
 80a1e8e:	4631      	mov	r1, r6
 80a1e90:	4604      	mov	r4, r0
 80a1e92:	4628      	mov	r0, r5
 80a1e94:	f000 fcf4 	bl	80a2880 <__aeabi_fsub>
 80a1e98:	4641      	mov	r1, r8
 80a1e9a:	f000 fdfb 	bl	80a2a94 <__aeabi_fmul>
 80a1e9e:	4905      	ldr	r1, [pc, #20]	; (80a1eb4 <__ieee754_logf+0x258>)
 80a1ea0:	4606      	mov	r6, r0
 80a1ea2:	4648      	mov	r0, r9
 80a1ea4:	e7c8      	b.n	80a1e38 <__ieee754_logf+0x1dc>
 80a1ea6:	bf00      	nop
 80a1ea8:	004afb20 	.word	0x004afb20
 80a1eac:	007ffff0 	.word	0x007ffff0
 80a1eb0:	3f317180 	.word	0x3f317180
 80a1eb4:	3717f7d1 	.word	0x3717f7d1
 80a1eb8:	3e178897 	.word	0x3e178897
 80a1ebc:	3e3a3325 	.word	0x3e3a3325
 80a1ec0:	3e924925 	.word	0x3e924925
 80a1ec4:	3f2aaaab 	.word	0x3f2aaaab
 80a1ec8:	3e1cd04f 	.word	0x3e1cd04f
 80a1ecc:	3e638e29 	.word	0x3e638e29
 80a1ed0:	3ecccccd 	.word	0x3ecccccd
 80a1ed4:	ffcf5c30 	.word	0xffcf5c30
 80a1ed8:	3eaaaaab 	.word	0x3eaaaaab

080a1edc <matherr>:
 80a1edc:	2000      	movs	r0, #0
 80a1ede:	4770      	bx	lr

080a1ee0 <nan>:
 80a1ee0:	2000      	movs	r0, #0
 80a1ee2:	4901      	ldr	r1, [pc, #4]	; (80a1ee8 <nan+0x8>)
 80a1ee4:	4770      	bx	lr
 80a1ee6:	bf00      	nop
 80a1ee8:	7ff80000 	.word	0x7ff80000

080a1eec <__aeabi_drsub>:
 80a1eec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1ef0:	e002      	b.n	80a1ef8 <__adddf3>
 80a1ef2:	bf00      	nop

080a1ef4 <__aeabi_dsub>:
 80a1ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1ef8 <__adddf3>:
 80a1ef8:	b530      	push	{r4, r5, lr}
 80a1efa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1efe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1f02:	ea94 0f05 	teq	r4, r5
 80a1f06:	bf08      	it	eq
 80a1f08:	ea90 0f02 	teqeq	r0, r2
 80a1f0c:	bf1f      	itttt	ne
 80a1f0e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1f12:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1f16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1f1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1f1e:	f000 80e2 	beq.w	80a20e6 <__adddf3+0x1ee>
 80a1f22:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1f26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1f2a:	bfb8      	it	lt
 80a1f2c:	426d      	neglt	r5, r5
 80a1f2e:	dd0c      	ble.n	80a1f4a <__adddf3+0x52>
 80a1f30:	442c      	add	r4, r5
 80a1f32:	ea80 0202 	eor.w	r2, r0, r2
 80a1f36:	ea81 0303 	eor.w	r3, r1, r3
 80a1f3a:	ea82 0000 	eor.w	r0, r2, r0
 80a1f3e:	ea83 0101 	eor.w	r1, r3, r1
 80a1f42:	ea80 0202 	eor.w	r2, r0, r2
 80a1f46:	ea81 0303 	eor.w	r3, r1, r3
 80a1f4a:	2d36      	cmp	r5, #54	; 0x36
 80a1f4c:	bf88      	it	hi
 80a1f4e:	bd30      	pophi	{r4, r5, pc}
 80a1f50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1f58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1f5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1f60:	d002      	beq.n	80a1f68 <__adddf3+0x70>
 80a1f62:	4240      	negs	r0, r0
 80a1f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1f68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1f70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1f74:	d002      	beq.n	80a1f7c <__adddf3+0x84>
 80a1f76:	4252      	negs	r2, r2
 80a1f78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1f7c:	ea94 0f05 	teq	r4, r5
 80a1f80:	f000 80a7 	beq.w	80a20d2 <__adddf3+0x1da>
 80a1f84:	f1a4 0401 	sub.w	r4, r4, #1
 80a1f88:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1f8c:	db0d      	blt.n	80a1faa <__adddf3+0xb2>
 80a1f8e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1f92:	fa22 f205 	lsr.w	r2, r2, r5
 80a1f96:	1880      	adds	r0, r0, r2
 80a1f98:	f141 0100 	adc.w	r1, r1, #0
 80a1f9c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1fa0:	1880      	adds	r0, r0, r2
 80a1fa2:	fa43 f305 	asr.w	r3, r3, r5
 80a1fa6:	4159      	adcs	r1, r3
 80a1fa8:	e00e      	b.n	80a1fc8 <__adddf3+0xd0>
 80a1faa:	f1a5 0520 	sub.w	r5, r5, #32
 80a1fae:	f10e 0e20 	add.w	lr, lr, #32
 80a1fb2:	2a01      	cmp	r2, #1
 80a1fb4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1fb8:	bf28      	it	cs
 80a1fba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1fbe:	fa43 f305 	asr.w	r3, r3, r5
 80a1fc2:	18c0      	adds	r0, r0, r3
 80a1fc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1fc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1fcc:	d507      	bpl.n	80a1fde <__adddf3+0xe6>
 80a1fce:	f04f 0e00 	mov.w	lr, #0
 80a1fd2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1fd6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1fda:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1fde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1fe2:	d31b      	bcc.n	80a201c <__adddf3+0x124>
 80a1fe4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1fe8:	d30c      	bcc.n	80a2004 <__adddf3+0x10c>
 80a1fea:	0849      	lsrs	r1, r1, #1
 80a1fec:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1ff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1ff4:	f104 0401 	add.w	r4, r4, #1
 80a1ff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1ffc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2000:	f080 809a 	bcs.w	80a2138 <__adddf3+0x240>
 80a2004:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2008:	bf08      	it	eq
 80a200a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a200e:	f150 0000 	adcs.w	r0, r0, #0
 80a2012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2016:	ea41 0105 	orr.w	r1, r1, r5
 80a201a:	bd30      	pop	{r4, r5, pc}
 80a201c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2020:	4140      	adcs	r0, r0
 80a2022:	eb41 0101 	adc.w	r1, r1, r1
 80a2026:	3c01      	subs	r4, #1
 80a2028:	bf28      	it	cs
 80a202a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a202e:	d2e9      	bcs.n	80a2004 <__adddf3+0x10c>
 80a2030:	f091 0f00 	teq	r1, #0
 80a2034:	bf04      	itt	eq
 80a2036:	4601      	moveq	r1, r0
 80a2038:	2000      	moveq	r0, #0
 80a203a:	fab1 f381 	clz	r3, r1
 80a203e:	bf08      	it	eq
 80a2040:	3320      	addeq	r3, #32
 80a2042:	f1a3 030b 	sub.w	r3, r3, #11
 80a2046:	f1b3 0220 	subs.w	r2, r3, #32
 80a204a:	da0c      	bge.n	80a2066 <__adddf3+0x16e>
 80a204c:	320c      	adds	r2, #12
 80a204e:	dd08      	ble.n	80a2062 <__adddf3+0x16a>
 80a2050:	f102 0c14 	add.w	ip, r2, #20
 80a2054:	f1c2 020c 	rsb	r2, r2, #12
 80a2058:	fa01 f00c 	lsl.w	r0, r1, ip
 80a205c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2060:	e00c      	b.n	80a207c <__adddf3+0x184>
 80a2062:	f102 0214 	add.w	r2, r2, #20
 80a2066:	bfd8      	it	le
 80a2068:	f1c2 0c20 	rsble	ip, r2, #32
 80a206c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2070:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2074:	bfdc      	itt	le
 80a2076:	ea41 010c 	orrle.w	r1, r1, ip
 80a207a:	4090      	lslle	r0, r2
 80a207c:	1ae4      	subs	r4, r4, r3
 80a207e:	bfa2      	ittt	ge
 80a2080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2084:	4329      	orrge	r1, r5
 80a2086:	bd30      	popge	{r4, r5, pc}
 80a2088:	ea6f 0404 	mvn.w	r4, r4
 80a208c:	3c1f      	subs	r4, #31
 80a208e:	da1c      	bge.n	80a20ca <__adddf3+0x1d2>
 80a2090:	340c      	adds	r4, #12
 80a2092:	dc0e      	bgt.n	80a20b2 <__adddf3+0x1ba>
 80a2094:	f104 0414 	add.w	r4, r4, #20
 80a2098:	f1c4 0220 	rsb	r2, r4, #32
 80a209c:	fa20 f004 	lsr.w	r0, r0, r4
 80a20a0:	fa01 f302 	lsl.w	r3, r1, r2
 80a20a4:	ea40 0003 	orr.w	r0, r0, r3
 80a20a8:	fa21 f304 	lsr.w	r3, r1, r4
 80a20ac:	ea45 0103 	orr.w	r1, r5, r3
 80a20b0:	bd30      	pop	{r4, r5, pc}
 80a20b2:	f1c4 040c 	rsb	r4, r4, #12
 80a20b6:	f1c4 0220 	rsb	r2, r4, #32
 80a20ba:	fa20 f002 	lsr.w	r0, r0, r2
 80a20be:	fa01 f304 	lsl.w	r3, r1, r4
 80a20c2:	ea40 0003 	orr.w	r0, r0, r3
 80a20c6:	4629      	mov	r1, r5
 80a20c8:	bd30      	pop	{r4, r5, pc}
 80a20ca:	fa21 f004 	lsr.w	r0, r1, r4
 80a20ce:	4629      	mov	r1, r5
 80a20d0:	bd30      	pop	{r4, r5, pc}
 80a20d2:	f094 0f00 	teq	r4, #0
 80a20d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a20da:	bf06      	itte	eq
 80a20dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a20e0:	3401      	addeq	r4, #1
 80a20e2:	3d01      	subne	r5, #1
 80a20e4:	e74e      	b.n	80a1f84 <__adddf3+0x8c>
 80a20e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a20ea:	bf18      	it	ne
 80a20ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a20f0:	d029      	beq.n	80a2146 <__adddf3+0x24e>
 80a20f2:	ea94 0f05 	teq	r4, r5
 80a20f6:	bf08      	it	eq
 80a20f8:	ea90 0f02 	teqeq	r0, r2
 80a20fc:	d005      	beq.n	80a210a <__adddf3+0x212>
 80a20fe:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2102:	bf04      	itt	eq
 80a2104:	4619      	moveq	r1, r3
 80a2106:	4610      	moveq	r0, r2
 80a2108:	bd30      	pop	{r4, r5, pc}
 80a210a:	ea91 0f03 	teq	r1, r3
 80a210e:	bf1e      	ittt	ne
 80a2110:	2100      	movne	r1, #0
 80a2112:	2000      	movne	r0, #0
 80a2114:	bd30      	popne	{r4, r5, pc}
 80a2116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a211a:	d105      	bne.n	80a2128 <__adddf3+0x230>
 80a211c:	0040      	lsls	r0, r0, #1
 80a211e:	4149      	adcs	r1, r1
 80a2120:	bf28      	it	cs
 80a2122:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2126:	bd30      	pop	{r4, r5, pc}
 80a2128:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a212c:	bf3c      	itt	cc
 80a212e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2132:	bd30      	popcc	{r4, r5, pc}
 80a2134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2138:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a213c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2140:	f04f 0000 	mov.w	r0, #0
 80a2144:	bd30      	pop	{r4, r5, pc}
 80a2146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a214a:	bf1a      	itte	ne
 80a214c:	4619      	movne	r1, r3
 80a214e:	4610      	movne	r0, r2
 80a2150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2154:	bf1c      	itt	ne
 80a2156:	460b      	movne	r3, r1
 80a2158:	4602      	movne	r2, r0
 80a215a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a215e:	bf06      	itte	eq
 80a2160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2164:	ea91 0f03 	teqeq	r1, r3
 80a2168:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a216c:	bd30      	pop	{r4, r5, pc}
 80a216e:	bf00      	nop

080a2170 <__aeabi_ui2d>:
 80a2170:	f090 0f00 	teq	r0, #0
 80a2174:	bf04      	itt	eq
 80a2176:	2100      	moveq	r1, #0
 80a2178:	4770      	bxeq	lr
 80a217a:	b530      	push	{r4, r5, lr}
 80a217c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2180:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2184:	f04f 0500 	mov.w	r5, #0
 80a2188:	f04f 0100 	mov.w	r1, #0
 80a218c:	e750      	b.n	80a2030 <__adddf3+0x138>
 80a218e:	bf00      	nop

080a2190 <__aeabi_i2d>:
 80a2190:	f090 0f00 	teq	r0, #0
 80a2194:	bf04      	itt	eq
 80a2196:	2100      	moveq	r1, #0
 80a2198:	4770      	bxeq	lr
 80a219a:	b530      	push	{r4, r5, lr}
 80a219c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a21a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a21a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a21a8:	bf48      	it	mi
 80a21aa:	4240      	negmi	r0, r0
 80a21ac:	f04f 0100 	mov.w	r1, #0
 80a21b0:	e73e      	b.n	80a2030 <__adddf3+0x138>
 80a21b2:	bf00      	nop

080a21b4 <__aeabi_f2d>:
 80a21b4:	0042      	lsls	r2, r0, #1
 80a21b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a21ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80a21be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a21c2:	bf1f      	itttt	ne
 80a21c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a21c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a21cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a21d0:	4770      	bxne	lr
 80a21d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a21d6:	bf08      	it	eq
 80a21d8:	4770      	bxeq	lr
 80a21da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a21de:	bf04      	itt	eq
 80a21e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a21e4:	4770      	bxeq	lr
 80a21e6:	b530      	push	{r4, r5, lr}
 80a21e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a21ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a21f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a21f4:	e71c      	b.n	80a2030 <__adddf3+0x138>
 80a21f6:	bf00      	nop

080a21f8 <__aeabi_ul2d>:
 80a21f8:	ea50 0201 	orrs.w	r2, r0, r1
 80a21fc:	bf08      	it	eq
 80a21fe:	4770      	bxeq	lr
 80a2200:	b530      	push	{r4, r5, lr}
 80a2202:	f04f 0500 	mov.w	r5, #0
 80a2206:	e00a      	b.n	80a221e <__aeabi_l2d+0x16>

080a2208 <__aeabi_l2d>:
 80a2208:	ea50 0201 	orrs.w	r2, r0, r1
 80a220c:	bf08      	it	eq
 80a220e:	4770      	bxeq	lr
 80a2210:	b530      	push	{r4, r5, lr}
 80a2212:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2216:	d502      	bpl.n	80a221e <__aeabi_l2d+0x16>
 80a2218:	4240      	negs	r0, r0
 80a221a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a221e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2222:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a222a:	f43f aed8 	beq.w	80a1fde <__adddf3+0xe6>
 80a222e:	f04f 0203 	mov.w	r2, #3
 80a2232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2236:	bf18      	it	ne
 80a2238:	3203      	addne	r2, #3
 80a223a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a223e:	bf18      	it	ne
 80a2240:	3203      	addne	r2, #3
 80a2242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2246:	f1c2 0320 	rsb	r3, r2, #32
 80a224a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a224e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2252:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2256:	ea40 000e 	orr.w	r0, r0, lr
 80a225a:	fa21 f102 	lsr.w	r1, r1, r2
 80a225e:	4414      	add	r4, r2
 80a2260:	e6bd      	b.n	80a1fde <__adddf3+0xe6>
 80a2262:	bf00      	nop

080a2264 <__aeabi_dmul>:
 80a2264:	b570      	push	{r4, r5, r6, lr}
 80a2266:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a226a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a226e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2272:	bf1d      	ittte	ne
 80a2274:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2278:	ea94 0f0c 	teqne	r4, ip
 80a227c:	ea95 0f0c 	teqne	r5, ip
 80a2280:	f000 f8de 	bleq	80a2440 <__aeabi_dmul+0x1dc>
 80a2284:	442c      	add	r4, r5
 80a2286:	ea81 0603 	eor.w	r6, r1, r3
 80a228a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a228e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2292:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2296:	bf18      	it	ne
 80a2298:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a229c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a22a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a22a4:	d038      	beq.n	80a2318 <__aeabi_dmul+0xb4>
 80a22a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a22aa:	f04f 0500 	mov.w	r5, #0
 80a22ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a22b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a22b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a22ba:	f04f 0600 	mov.w	r6, #0
 80a22be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a22c2:	f09c 0f00 	teq	ip, #0
 80a22c6:	bf18      	it	ne
 80a22c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a22cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a22d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a22d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a22d8:	d204      	bcs.n	80a22e4 <__aeabi_dmul+0x80>
 80a22da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a22de:	416d      	adcs	r5, r5
 80a22e0:	eb46 0606 	adc.w	r6, r6, r6
 80a22e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a22e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a22ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a22f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a22f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a22f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a22fc:	bf88      	it	hi
 80a22fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2302:	d81e      	bhi.n	80a2342 <__aeabi_dmul+0xde>
 80a2304:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2308:	bf08      	it	eq
 80a230a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a230e:	f150 0000 	adcs.w	r0, r0, #0
 80a2312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2316:	bd70      	pop	{r4, r5, r6, pc}
 80a2318:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a231c:	ea46 0101 	orr.w	r1, r6, r1
 80a2320:	ea40 0002 	orr.w	r0, r0, r2
 80a2324:	ea81 0103 	eor.w	r1, r1, r3
 80a2328:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a232c:	bfc2      	ittt	gt
 80a232e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2336:	bd70      	popgt	{r4, r5, r6, pc}
 80a2338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a233c:	f04f 0e00 	mov.w	lr, #0
 80a2340:	3c01      	subs	r4, #1
 80a2342:	f300 80ab 	bgt.w	80a249c <__aeabi_dmul+0x238>
 80a2346:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a234a:	bfde      	ittt	le
 80a234c:	2000      	movle	r0, #0
 80a234e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2352:	bd70      	pople	{r4, r5, r6, pc}
 80a2354:	f1c4 0400 	rsb	r4, r4, #0
 80a2358:	3c20      	subs	r4, #32
 80a235a:	da35      	bge.n	80a23c8 <__aeabi_dmul+0x164>
 80a235c:	340c      	adds	r4, #12
 80a235e:	dc1b      	bgt.n	80a2398 <__aeabi_dmul+0x134>
 80a2360:	f104 0414 	add.w	r4, r4, #20
 80a2364:	f1c4 0520 	rsb	r5, r4, #32
 80a2368:	fa00 f305 	lsl.w	r3, r0, r5
 80a236c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2370:	fa01 f205 	lsl.w	r2, r1, r5
 80a2374:	ea40 0002 	orr.w	r0, r0, r2
 80a2378:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a237c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2384:	fa21 f604 	lsr.w	r6, r1, r4
 80a2388:	eb42 0106 	adc.w	r1, r2, r6
 80a238c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2390:	bf08      	it	eq
 80a2392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2396:	bd70      	pop	{r4, r5, r6, pc}
 80a2398:	f1c4 040c 	rsb	r4, r4, #12
 80a239c:	f1c4 0520 	rsb	r5, r4, #32
 80a23a0:	fa00 f304 	lsl.w	r3, r0, r4
 80a23a4:	fa20 f005 	lsr.w	r0, r0, r5
 80a23a8:	fa01 f204 	lsl.w	r2, r1, r4
 80a23ac:	ea40 0002 	orr.w	r0, r0, r2
 80a23b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a23b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a23b8:	f141 0100 	adc.w	r1, r1, #0
 80a23bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a23c0:	bf08      	it	eq
 80a23c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a23c6:	bd70      	pop	{r4, r5, r6, pc}
 80a23c8:	f1c4 0520 	rsb	r5, r4, #32
 80a23cc:	fa00 f205 	lsl.w	r2, r0, r5
 80a23d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a23d4:	fa20 f304 	lsr.w	r3, r0, r4
 80a23d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a23dc:	ea43 0302 	orr.w	r3, r3, r2
 80a23e0:	fa21 f004 	lsr.w	r0, r1, r4
 80a23e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a23e8:	fa21 f204 	lsr.w	r2, r1, r4
 80a23ec:	ea20 0002 	bic.w	r0, r0, r2
 80a23f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a23f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a23f8:	bf08      	it	eq
 80a23fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a23fe:	bd70      	pop	{r4, r5, r6, pc}
 80a2400:	f094 0f00 	teq	r4, #0
 80a2404:	d10f      	bne.n	80a2426 <__aeabi_dmul+0x1c2>
 80a2406:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a240a:	0040      	lsls	r0, r0, #1
 80a240c:	eb41 0101 	adc.w	r1, r1, r1
 80a2410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2414:	bf08      	it	eq
 80a2416:	3c01      	subeq	r4, #1
 80a2418:	d0f7      	beq.n	80a240a <__aeabi_dmul+0x1a6>
 80a241a:	ea41 0106 	orr.w	r1, r1, r6
 80a241e:	f095 0f00 	teq	r5, #0
 80a2422:	bf18      	it	ne
 80a2424:	4770      	bxne	lr
 80a2426:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a242a:	0052      	lsls	r2, r2, #1
 80a242c:	eb43 0303 	adc.w	r3, r3, r3
 80a2430:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2434:	bf08      	it	eq
 80a2436:	3d01      	subeq	r5, #1
 80a2438:	d0f7      	beq.n	80a242a <__aeabi_dmul+0x1c6>
 80a243a:	ea43 0306 	orr.w	r3, r3, r6
 80a243e:	4770      	bx	lr
 80a2440:	ea94 0f0c 	teq	r4, ip
 80a2444:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2448:	bf18      	it	ne
 80a244a:	ea95 0f0c 	teqne	r5, ip
 80a244e:	d00c      	beq.n	80a246a <__aeabi_dmul+0x206>
 80a2450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2454:	bf18      	it	ne
 80a2456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a245a:	d1d1      	bne.n	80a2400 <__aeabi_dmul+0x19c>
 80a245c:	ea81 0103 	eor.w	r1, r1, r3
 80a2460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2464:	f04f 0000 	mov.w	r0, #0
 80a2468:	bd70      	pop	{r4, r5, r6, pc}
 80a246a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a246e:	bf06      	itte	eq
 80a2470:	4610      	moveq	r0, r2
 80a2472:	4619      	moveq	r1, r3
 80a2474:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2478:	d019      	beq.n	80a24ae <__aeabi_dmul+0x24a>
 80a247a:	ea94 0f0c 	teq	r4, ip
 80a247e:	d102      	bne.n	80a2486 <__aeabi_dmul+0x222>
 80a2480:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2484:	d113      	bne.n	80a24ae <__aeabi_dmul+0x24a>
 80a2486:	ea95 0f0c 	teq	r5, ip
 80a248a:	d105      	bne.n	80a2498 <__aeabi_dmul+0x234>
 80a248c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2490:	bf1c      	itt	ne
 80a2492:	4610      	movne	r0, r2
 80a2494:	4619      	movne	r1, r3
 80a2496:	d10a      	bne.n	80a24ae <__aeabi_dmul+0x24a>
 80a2498:	ea81 0103 	eor.w	r1, r1, r3
 80a249c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a24a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a24a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a24a8:	f04f 0000 	mov.w	r0, #0
 80a24ac:	bd70      	pop	{r4, r5, r6, pc}
 80a24ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a24b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a24b6:	bd70      	pop	{r4, r5, r6, pc}

080a24b8 <__aeabi_ddiv>:
 80a24b8:	b570      	push	{r4, r5, r6, lr}
 80a24ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a24be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a24c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a24c6:	bf1d      	ittte	ne
 80a24c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a24cc:	ea94 0f0c 	teqne	r4, ip
 80a24d0:	ea95 0f0c 	teqne	r5, ip
 80a24d4:	f000 f8a7 	bleq	80a2626 <__aeabi_ddiv+0x16e>
 80a24d8:	eba4 0405 	sub.w	r4, r4, r5
 80a24dc:	ea81 0e03 	eor.w	lr, r1, r3
 80a24e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a24e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a24e8:	f000 8088 	beq.w	80a25fc <__aeabi_ddiv+0x144>
 80a24ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a24f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a24f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a24f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a24fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2500:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2504:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2508:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a250c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2510:	429d      	cmp	r5, r3
 80a2512:	bf08      	it	eq
 80a2514:	4296      	cmpeq	r6, r2
 80a2516:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a251a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a251e:	d202      	bcs.n	80a2526 <__aeabi_ddiv+0x6e>
 80a2520:	085b      	lsrs	r3, r3, #1
 80a2522:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2526:	1ab6      	subs	r6, r6, r2
 80a2528:	eb65 0503 	sbc.w	r5, r5, r3
 80a252c:	085b      	lsrs	r3, r3, #1
 80a252e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2536:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a253a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a253e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2542:	bf22      	ittt	cs
 80a2544:	1ab6      	subcs	r6, r6, r2
 80a2546:	4675      	movcs	r5, lr
 80a2548:	ea40 000c 	orrcs.w	r0, r0, ip
 80a254c:	085b      	lsrs	r3, r3, #1
 80a254e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2552:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2556:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a255a:	bf22      	ittt	cs
 80a255c:	1ab6      	subcs	r6, r6, r2
 80a255e:	4675      	movcs	r5, lr
 80a2560:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2564:	085b      	lsrs	r3, r3, #1
 80a2566:	ea4f 0232 	mov.w	r2, r2, rrx
 80a256a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a256e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2572:	bf22      	ittt	cs
 80a2574:	1ab6      	subcs	r6, r6, r2
 80a2576:	4675      	movcs	r5, lr
 80a2578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a257c:	085b      	lsrs	r3, r3, #1
 80a257e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2582:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2586:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a258a:	bf22      	ittt	cs
 80a258c:	1ab6      	subcs	r6, r6, r2
 80a258e:	4675      	movcs	r5, lr
 80a2590:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2594:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2598:	d018      	beq.n	80a25cc <__aeabi_ddiv+0x114>
 80a259a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a259e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a25a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a25a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a25aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a25ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a25b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a25b6:	d1c0      	bne.n	80a253a <__aeabi_ddiv+0x82>
 80a25b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a25bc:	d10b      	bne.n	80a25d6 <__aeabi_ddiv+0x11e>
 80a25be:	ea41 0100 	orr.w	r1, r1, r0
 80a25c2:	f04f 0000 	mov.w	r0, #0
 80a25c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a25ca:	e7b6      	b.n	80a253a <__aeabi_ddiv+0x82>
 80a25cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a25d0:	bf04      	itt	eq
 80a25d2:	4301      	orreq	r1, r0
 80a25d4:	2000      	moveq	r0, #0
 80a25d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a25da:	bf88      	it	hi
 80a25dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a25e0:	f63f aeaf 	bhi.w	80a2342 <__aeabi_dmul+0xde>
 80a25e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a25e8:	bf04      	itt	eq
 80a25ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a25ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a25f2:	f150 0000 	adcs.w	r0, r0, #0
 80a25f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a25fa:	bd70      	pop	{r4, r5, r6, pc}
 80a25fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2600:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2604:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2608:	bfc2      	ittt	gt
 80a260a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a260e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2612:	bd70      	popgt	{r4, r5, r6, pc}
 80a2614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2618:	f04f 0e00 	mov.w	lr, #0
 80a261c:	3c01      	subs	r4, #1
 80a261e:	e690      	b.n	80a2342 <__aeabi_dmul+0xde>
 80a2620:	ea45 0e06 	orr.w	lr, r5, r6
 80a2624:	e68d      	b.n	80a2342 <__aeabi_dmul+0xde>
 80a2626:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a262a:	ea94 0f0c 	teq	r4, ip
 80a262e:	bf08      	it	eq
 80a2630:	ea95 0f0c 	teqeq	r5, ip
 80a2634:	f43f af3b 	beq.w	80a24ae <__aeabi_dmul+0x24a>
 80a2638:	ea94 0f0c 	teq	r4, ip
 80a263c:	d10a      	bne.n	80a2654 <__aeabi_ddiv+0x19c>
 80a263e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2642:	f47f af34 	bne.w	80a24ae <__aeabi_dmul+0x24a>
 80a2646:	ea95 0f0c 	teq	r5, ip
 80a264a:	f47f af25 	bne.w	80a2498 <__aeabi_dmul+0x234>
 80a264e:	4610      	mov	r0, r2
 80a2650:	4619      	mov	r1, r3
 80a2652:	e72c      	b.n	80a24ae <__aeabi_dmul+0x24a>
 80a2654:	ea95 0f0c 	teq	r5, ip
 80a2658:	d106      	bne.n	80a2668 <__aeabi_ddiv+0x1b0>
 80a265a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a265e:	f43f aefd 	beq.w	80a245c <__aeabi_dmul+0x1f8>
 80a2662:	4610      	mov	r0, r2
 80a2664:	4619      	mov	r1, r3
 80a2666:	e722      	b.n	80a24ae <__aeabi_dmul+0x24a>
 80a2668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a266c:	bf18      	it	ne
 80a266e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2672:	f47f aec5 	bne.w	80a2400 <__aeabi_dmul+0x19c>
 80a2676:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a267a:	f47f af0d 	bne.w	80a2498 <__aeabi_dmul+0x234>
 80a267e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2682:	f47f aeeb 	bne.w	80a245c <__aeabi_dmul+0x1f8>
 80a2686:	e712      	b.n	80a24ae <__aeabi_dmul+0x24a>

080a2688 <__gedf2>:
 80a2688:	f04f 3cff 	mov.w	ip, #4294967295
 80a268c:	e006      	b.n	80a269c <__cmpdf2+0x4>
 80a268e:	bf00      	nop

080a2690 <__ledf2>:
 80a2690:	f04f 0c01 	mov.w	ip, #1
 80a2694:	e002      	b.n	80a269c <__cmpdf2+0x4>
 80a2696:	bf00      	nop

080a2698 <__cmpdf2>:
 80a2698:	f04f 0c01 	mov.w	ip, #1
 80a269c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a26a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a26a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a26a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a26ac:	bf18      	it	ne
 80a26ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a26b2:	d01b      	beq.n	80a26ec <__cmpdf2+0x54>
 80a26b4:	b001      	add	sp, #4
 80a26b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a26ba:	bf0c      	ite	eq
 80a26bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a26c0:	ea91 0f03 	teqne	r1, r3
 80a26c4:	bf02      	ittt	eq
 80a26c6:	ea90 0f02 	teqeq	r0, r2
 80a26ca:	2000      	moveq	r0, #0
 80a26cc:	4770      	bxeq	lr
 80a26ce:	f110 0f00 	cmn.w	r0, #0
 80a26d2:	ea91 0f03 	teq	r1, r3
 80a26d6:	bf58      	it	pl
 80a26d8:	4299      	cmppl	r1, r3
 80a26da:	bf08      	it	eq
 80a26dc:	4290      	cmpeq	r0, r2
 80a26de:	bf2c      	ite	cs
 80a26e0:	17d8      	asrcs	r0, r3, #31
 80a26e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a26e6:	f040 0001 	orr.w	r0, r0, #1
 80a26ea:	4770      	bx	lr
 80a26ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a26f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a26f4:	d102      	bne.n	80a26fc <__cmpdf2+0x64>
 80a26f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a26fa:	d107      	bne.n	80a270c <__cmpdf2+0x74>
 80a26fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2704:	d1d6      	bne.n	80a26b4 <__cmpdf2+0x1c>
 80a2706:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a270a:	d0d3      	beq.n	80a26b4 <__cmpdf2+0x1c>
 80a270c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2710:	4770      	bx	lr
 80a2712:	bf00      	nop

080a2714 <__aeabi_cdrcmple>:
 80a2714:	4684      	mov	ip, r0
 80a2716:	4610      	mov	r0, r2
 80a2718:	4662      	mov	r2, ip
 80a271a:	468c      	mov	ip, r1
 80a271c:	4619      	mov	r1, r3
 80a271e:	4663      	mov	r3, ip
 80a2720:	e000      	b.n	80a2724 <__aeabi_cdcmpeq>
 80a2722:	bf00      	nop

080a2724 <__aeabi_cdcmpeq>:
 80a2724:	b501      	push	{r0, lr}
 80a2726:	f7ff ffb7 	bl	80a2698 <__cmpdf2>
 80a272a:	2800      	cmp	r0, #0
 80a272c:	bf48      	it	mi
 80a272e:	f110 0f00 	cmnmi.w	r0, #0
 80a2732:	bd01      	pop	{r0, pc}

080a2734 <__aeabi_dcmpeq>:
 80a2734:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2738:	f7ff fff4 	bl	80a2724 <__aeabi_cdcmpeq>
 80a273c:	bf0c      	ite	eq
 80a273e:	2001      	moveq	r0, #1
 80a2740:	2000      	movne	r0, #0
 80a2742:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2746:	bf00      	nop

080a2748 <__aeabi_dcmplt>:
 80a2748:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a274c:	f7ff ffea 	bl	80a2724 <__aeabi_cdcmpeq>
 80a2750:	bf34      	ite	cc
 80a2752:	2001      	movcc	r0, #1
 80a2754:	2000      	movcs	r0, #0
 80a2756:	f85d fb08 	ldr.w	pc, [sp], #8
 80a275a:	bf00      	nop

080a275c <__aeabi_dcmple>:
 80a275c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2760:	f7ff ffe0 	bl	80a2724 <__aeabi_cdcmpeq>
 80a2764:	bf94      	ite	ls
 80a2766:	2001      	movls	r0, #1
 80a2768:	2000      	movhi	r0, #0
 80a276a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a276e:	bf00      	nop

080a2770 <__aeabi_dcmpge>:
 80a2770:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2774:	f7ff ffce 	bl	80a2714 <__aeabi_cdrcmple>
 80a2778:	bf94      	ite	ls
 80a277a:	2001      	movls	r0, #1
 80a277c:	2000      	movhi	r0, #0
 80a277e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2782:	bf00      	nop

080a2784 <__aeabi_dcmpgt>:
 80a2784:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2788:	f7ff ffc4 	bl	80a2714 <__aeabi_cdrcmple>
 80a278c:	bf34      	ite	cc
 80a278e:	2001      	movcc	r0, #1
 80a2790:	2000      	movcs	r0, #0
 80a2792:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2796:	bf00      	nop

080a2798 <__aeabi_d2uiz>:
 80a2798:	004a      	lsls	r2, r1, #1
 80a279a:	d211      	bcs.n	80a27c0 <__aeabi_d2uiz+0x28>
 80a279c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a27a0:	d211      	bcs.n	80a27c6 <__aeabi_d2uiz+0x2e>
 80a27a2:	d50d      	bpl.n	80a27c0 <__aeabi_d2uiz+0x28>
 80a27a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a27a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a27ac:	d40e      	bmi.n	80a27cc <__aeabi_d2uiz+0x34>
 80a27ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a27b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a27b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a27ba:	fa23 f002 	lsr.w	r0, r3, r2
 80a27be:	4770      	bx	lr
 80a27c0:	f04f 0000 	mov.w	r0, #0
 80a27c4:	4770      	bx	lr
 80a27c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a27ca:	d102      	bne.n	80a27d2 <__aeabi_d2uiz+0x3a>
 80a27cc:	f04f 30ff 	mov.w	r0, #4294967295
 80a27d0:	4770      	bx	lr
 80a27d2:	f04f 0000 	mov.w	r0, #0
 80a27d6:	4770      	bx	lr

080a27d8 <__aeabi_d2f>:
 80a27d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a27dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a27e0:	bf24      	itt	cs
 80a27e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a27e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a27ea:	d90d      	bls.n	80a2808 <__aeabi_d2f+0x30>
 80a27ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a27f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a27f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a27f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a27fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2800:	bf08      	it	eq
 80a2802:	f020 0001 	biceq.w	r0, r0, #1
 80a2806:	4770      	bx	lr
 80a2808:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a280c:	d121      	bne.n	80a2852 <__aeabi_d2f+0x7a>
 80a280e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2812:	bfbc      	itt	lt
 80a2814:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2818:	4770      	bxlt	lr
 80a281a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a281e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2822:	f1c2 0218 	rsb	r2, r2, #24
 80a2826:	f1c2 0c20 	rsb	ip, r2, #32
 80a282a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a282e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2832:	bf18      	it	ne
 80a2834:	f040 0001 	orrne.w	r0, r0, #1
 80a2838:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a283c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2840:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2844:	ea40 000c 	orr.w	r0, r0, ip
 80a2848:	fa23 f302 	lsr.w	r3, r3, r2
 80a284c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2850:	e7cc      	b.n	80a27ec <__aeabi_d2f+0x14>
 80a2852:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2856:	d107      	bne.n	80a2868 <__aeabi_d2f+0x90>
 80a2858:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a285c:	bf1e      	ittt	ne
 80a285e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2862:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2866:	4770      	bxne	lr
 80a2868:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a286c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2870:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2874:	4770      	bx	lr
 80a2876:	bf00      	nop

080a2878 <__aeabi_frsub>:
 80a2878:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a287c:	e002      	b.n	80a2884 <__addsf3>
 80a287e:	bf00      	nop

080a2880 <__aeabi_fsub>:
 80a2880:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2884 <__addsf3>:
 80a2884:	0042      	lsls	r2, r0, #1
 80a2886:	bf1f      	itttt	ne
 80a2888:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a288c:	ea92 0f03 	teqne	r2, r3
 80a2890:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2894:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2898:	d06a      	beq.n	80a2970 <__addsf3+0xec>
 80a289a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a289e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a28a2:	bfc1      	itttt	gt
 80a28a4:	18d2      	addgt	r2, r2, r3
 80a28a6:	4041      	eorgt	r1, r0
 80a28a8:	4048      	eorgt	r0, r1
 80a28aa:	4041      	eorgt	r1, r0
 80a28ac:	bfb8      	it	lt
 80a28ae:	425b      	neglt	r3, r3
 80a28b0:	2b19      	cmp	r3, #25
 80a28b2:	bf88      	it	hi
 80a28b4:	4770      	bxhi	lr
 80a28b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a28ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a28be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a28c2:	bf18      	it	ne
 80a28c4:	4240      	negne	r0, r0
 80a28c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a28ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a28ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a28d2:	bf18      	it	ne
 80a28d4:	4249      	negne	r1, r1
 80a28d6:	ea92 0f03 	teq	r2, r3
 80a28da:	d03f      	beq.n	80a295c <__addsf3+0xd8>
 80a28dc:	f1a2 0201 	sub.w	r2, r2, #1
 80a28e0:	fa41 fc03 	asr.w	ip, r1, r3
 80a28e4:	eb10 000c 	adds.w	r0, r0, ip
 80a28e8:	f1c3 0320 	rsb	r3, r3, #32
 80a28ec:	fa01 f103 	lsl.w	r1, r1, r3
 80a28f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a28f4:	d502      	bpl.n	80a28fc <__addsf3+0x78>
 80a28f6:	4249      	negs	r1, r1
 80a28f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a28fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2900:	d313      	bcc.n	80a292a <__addsf3+0xa6>
 80a2902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2906:	d306      	bcc.n	80a2916 <__addsf3+0x92>
 80a2908:	0840      	lsrs	r0, r0, #1
 80a290a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a290e:	f102 0201 	add.w	r2, r2, #1
 80a2912:	2afe      	cmp	r2, #254	; 0xfe
 80a2914:	d251      	bcs.n	80a29ba <__addsf3+0x136>
 80a2916:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a291a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a291e:	bf08      	it	eq
 80a2920:	f020 0001 	biceq.w	r0, r0, #1
 80a2924:	ea40 0003 	orr.w	r0, r0, r3
 80a2928:	4770      	bx	lr
 80a292a:	0049      	lsls	r1, r1, #1
 80a292c:	eb40 0000 	adc.w	r0, r0, r0
 80a2930:	3a01      	subs	r2, #1
 80a2932:	bf28      	it	cs
 80a2934:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a2938:	d2ed      	bcs.n	80a2916 <__addsf3+0x92>
 80a293a:	fab0 fc80 	clz	ip, r0
 80a293e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2942:	ebb2 020c 	subs.w	r2, r2, ip
 80a2946:	fa00 f00c 	lsl.w	r0, r0, ip
 80a294a:	bfaa      	itet	ge
 80a294c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2950:	4252      	neglt	r2, r2
 80a2952:	4318      	orrge	r0, r3
 80a2954:	bfbc      	itt	lt
 80a2956:	40d0      	lsrlt	r0, r2
 80a2958:	4318      	orrlt	r0, r3
 80a295a:	4770      	bx	lr
 80a295c:	f092 0f00 	teq	r2, #0
 80a2960:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2964:	bf06      	itte	eq
 80a2966:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a296a:	3201      	addeq	r2, #1
 80a296c:	3b01      	subne	r3, #1
 80a296e:	e7b5      	b.n	80a28dc <__addsf3+0x58>
 80a2970:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2974:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2978:	bf18      	it	ne
 80a297a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a297e:	d021      	beq.n	80a29c4 <__addsf3+0x140>
 80a2980:	ea92 0f03 	teq	r2, r3
 80a2984:	d004      	beq.n	80a2990 <__addsf3+0x10c>
 80a2986:	f092 0f00 	teq	r2, #0
 80a298a:	bf08      	it	eq
 80a298c:	4608      	moveq	r0, r1
 80a298e:	4770      	bx	lr
 80a2990:	ea90 0f01 	teq	r0, r1
 80a2994:	bf1c      	itt	ne
 80a2996:	2000      	movne	r0, #0
 80a2998:	4770      	bxne	lr
 80a299a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a299e:	d104      	bne.n	80a29aa <__addsf3+0x126>
 80a29a0:	0040      	lsls	r0, r0, #1
 80a29a2:	bf28      	it	cs
 80a29a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a29a8:	4770      	bx	lr
 80a29aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a29ae:	bf3c      	itt	cc
 80a29b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a29b4:	4770      	bxcc	lr
 80a29b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a29ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a29be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a29c2:	4770      	bx	lr
 80a29c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a29c8:	bf16      	itet	ne
 80a29ca:	4608      	movne	r0, r1
 80a29cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a29d0:	4601      	movne	r1, r0
 80a29d2:	0242      	lsls	r2, r0, #9
 80a29d4:	bf06      	itte	eq
 80a29d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a29da:	ea90 0f01 	teqeq	r0, r1
 80a29de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a29e2:	4770      	bx	lr

080a29e4 <__aeabi_ui2f>:
 80a29e4:	f04f 0300 	mov.w	r3, #0
 80a29e8:	e004      	b.n	80a29f4 <__aeabi_i2f+0x8>
 80a29ea:	bf00      	nop

080a29ec <__aeabi_i2f>:
 80a29ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a29f0:	bf48      	it	mi
 80a29f2:	4240      	negmi	r0, r0
 80a29f4:	ea5f 0c00 	movs.w	ip, r0
 80a29f8:	bf08      	it	eq
 80a29fa:	4770      	bxeq	lr
 80a29fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2a00:	4601      	mov	r1, r0
 80a2a02:	f04f 0000 	mov.w	r0, #0
 80a2a06:	e01c      	b.n	80a2a42 <__aeabi_l2f+0x2a>

080a2a08 <__aeabi_ul2f>:
 80a2a08:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a0c:	bf08      	it	eq
 80a2a0e:	4770      	bxeq	lr
 80a2a10:	f04f 0300 	mov.w	r3, #0
 80a2a14:	e00a      	b.n	80a2a2c <__aeabi_l2f+0x14>
 80a2a16:	bf00      	nop

080a2a18 <__aeabi_l2f>:
 80a2a18:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a1c:	bf08      	it	eq
 80a2a1e:	4770      	bxeq	lr
 80a2a20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2a24:	d502      	bpl.n	80a2a2c <__aeabi_l2f+0x14>
 80a2a26:	4240      	negs	r0, r0
 80a2a28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a2c:	ea5f 0c01 	movs.w	ip, r1
 80a2a30:	bf02      	ittt	eq
 80a2a32:	4684      	moveq	ip, r0
 80a2a34:	4601      	moveq	r1, r0
 80a2a36:	2000      	moveq	r0, #0
 80a2a38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2a3c:	bf08      	it	eq
 80a2a3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2a42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2a46:	fabc f28c 	clz	r2, ip
 80a2a4a:	3a08      	subs	r2, #8
 80a2a4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2a50:	db10      	blt.n	80a2a74 <__aeabi_l2f+0x5c>
 80a2a52:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2a56:	4463      	add	r3, ip
 80a2a58:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2a5c:	f1c2 0220 	rsb	r2, r2, #32
 80a2a60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2a64:	fa20 f202 	lsr.w	r2, r0, r2
 80a2a68:	eb43 0002 	adc.w	r0, r3, r2
 80a2a6c:	bf08      	it	eq
 80a2a6e:	f020 0001 	biceq.w	r0, r0, #1
 80a2a72:	4770      	bx	lr
 80a2a74:	f102 0220 	add.w	r2, r2, #32
 80a2a78:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2a7c:	f1c2 0220 	rsb	r2, r2, #32
 80a2a80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2a84:	fa21 f202 	lsr.w	r2, r1, r2
 80a2a88:	eb43 0002 	adc.w	r0, r3, r2
 80a2a8c:	bf08      	it	eq
 80a2a8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2a92:	4770      	bx	lr

080a2a94 <__aeabi_fmul>:
 80a2a94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2a9c:	bf1e      	ittt	ne
 80a2a9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2aa2:	ea92 0f0c 	teqne	r2, ip
 80a2aa6:	ea93 0f0c 	teqne	r3, ip
 80a2aaa:	d06f      	beq.n	80a2b8c <__aeabi_fmul+0xf8>
 80a2aac:	441a      	add	r2, r3
 80a2aae:	ea80 0c01 	eor.w	ip, r0, r1
 80a2ab2:	0240      	lsls	r0, r0, #9
 80a2ab4:	bf18      	it	ne
 80a2ab6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2aba:	d01e      	beq.n	80a2afa <__aeabi_fmul+0x66>
 80a2abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2ac0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2ac4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2ac8:	fba0 3101 	umull	r3, r1, r0, r1
 80a2acc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2ad0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2ad4:	bf3e      	ittt	cc
 80a2ad6:	0049      	lslcc	r1, r1, #1
 80a2ad8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2adc:	005b      	lslcc	r3, r3, #1
 80a2ade:	ea40 0001 	orr.w	r0, r0, r1
 80a2ae2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2ae6:	2afd      	cmp	r2, #253	; 0xfd
 80a2ae8:	d81d      	bhi.n	80a2b26 <__aeabi_fmul+0x92>
 80a2aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2af2:	bf08      	it	eq
 80a2af4:	f020 0001 	biceq.w	r0, r0, #1
 80a2af8:	4770      	bx	lr
 80a2afa:	f090 0f00 	teq	r0, #0
 80a2afe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2b02:	bf08      	it	eq
 80a2b04:	0249      	lsleq	r1, r1, #9
 80a2b06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2b0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2b0e:	3a7f      	subs	r2, #127	; 0x7f
 80a2b10:	bfc2      	ittt	gt
 80a2b12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2b16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2b1a:	4770      	bxgt	lr
 80a2b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b20:	f04f 0300 	mov.w	r3, #0
 80a2b24:	3a01      	subs	r2, #1
 80a2b26:	dc5d      	bgt.n	80a2be4 <__aeabi_fmul+0x150>
 80a2b28:	f112 0f19 	cmn.w	r2, #25
 80a2b2c:	bfdc      	itt	le
 80a2b2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2b32:	4770      	bxle	lr
 80a2b34:	f1c2 0200 	rsb	r2, r2, #0
 80a2b38:	0041      	lsls	r1, r0, #1
 80a2b3a:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b3e:	f1c2 0220 	rsb	r2, r2, #32
 80a2b42:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2b46:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2b4a:	f140 0000 	adc.w	r0, r0, #0
 80a2b4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2b52:	bf08      	it	eq
 80a2b54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2b58:	4770      	bx	lr
 80a2b5a:	f092 0f00 	teq	r2, #0
 80a2b5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2b62:	bf02      	ittt	eq
 80a2b64:	0040      	lsleq	r0, r0, #1
 80a2b66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2b6a:	3a01      	subeq	r2, #1
 80a2b6c:	d0f9      	beq.n	80a2b62 <__aeabi_fmul+0xce>
 80a2b6e:	ea40 000c 	orr.w	r0, r0, ip
 80a2b72:	f093 0f00 	teq	r3, #0
 80a2b76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2b7a:	bf02      	ittt	eq
 80a2b7c:	0049      	lsleq	r1, r1, #1
 80a2b7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2b82:	3b01      	subeq	r3, #1
 80a2b84:	d0f9      	beq.n	80a2b7a <__aeabi_fmul+0xe6>
 80a2b86:	ea41 010c 	orr.w	r1, r1, ip
 80a2b8a:	e78f      	b.n	80a2aac <__aeabi_fmul+0x18>
 80a2b8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2b90:	ea92 0f0c 	teq	r2, ip
 80a2b94:	bf18      	it	ne
 80a2b96:	ea93 0f0c 	teqne	r3, ip
 80a2b9a:	d00a      	beq.n	80a2bb2 <__aeabi_fmul+0x11e>
 80a2b9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2ba0:	bf18      	it	ne
 80a2ba2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2ba6:	d1d8      	bne.n	80a2b5a <__aeabi_fmul+0xc6>
 80a2ba8:	ea80 0001 	eor.w	r0, r0, r1
 80a2bac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2bb0:	4770      	bx	lr
 80a2bb2:	f090 0f00 	teq	r0, #0
 80a2bb6:	bf17      	itett	ne
 80a2bb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2bbc:	4608      	moveq	r0, r1
 80a2bbe:	f091 0f00 	teqne	r1, #0
 80a2bc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2bc6:	d014      	beq.n	80a2bf2 <__aeabi_fmul+0x15e>
 80a2bc8:	ea92 0f0c 	teq	r2, ip
 80a2bcc:	d101      	bne.n	80a2bd2 <__aeabi_fmul+0x13e>
 80a2bce:	0242      	lsls	r2, r0, #9
 80a2bd0:	d10f      	bne.n	80a2bf2 <__aeabi_fmul+0x15e>
 80a2bd2:	ea93 0f0c 	teq	r3, ip
 80a2bd6:	d103      	bne.n	80a2be0 <__aeabi_fmul+0x14c>
 80a2bd8:	024b      	lsls	r3, r1, #9
 80a2bda:	bf18      	it	ne
 80a2bdc:	4608      	movne	r0, r1
 80a2bde:	d108      	bne.n	80a2bf2 <__aeabi_fmul+0x15e>
 80a2be0:	ea80 0001 	eor.w	r0, r0, r1
 80a2be4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2bf0:	4770      	bx	lr
 80a2bf2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2bf6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2bfa:	4770      	bx	lr

080a2bfc <__aeabi_fdiv>:
 80a2bfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2c00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2c04:	bf1e      	ittt	ne
 80a2c06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2c0a:	ea92 0f0c 	teqne	r2, ip
 80a2c0e:	ea93 0f0c 	teqne	r3, ip
 80a2c12:	d069      	beq.n	80a2ce8 <__aeabi_fdiv+0xec>
 80a2c14:	eba2 0203 	sub.w	r2, r2, r3
 80a2c18:	ea80 0c01 	eor.w	ip, r0, r1
 80a2c1c:	0249      	lsls	r1, r1, #9
 80a2c1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2c22:	d037      	beq.n	80a2c94 <__aeabi_fdiv+0x98>
 80a2c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2c28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2c2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2c34:	428b      	cmp	r3, r1
 80a2c36:	bf38      	it	cc
 80a2c38:	005b      	lslcc	r3, r3, #1
 80a2c3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2c3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2c42:	428b      	cmp	r3, r1
 80a2c44:	bf24      	itt	cs
 80a2c46:	1a5b      	subcs	r3, r3, r1
 80a2c48:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2c4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2c50:	bf24      	itt	cs
 80a2c52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2c56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2c5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2c5e:	bf24      	itt	cs
 80a2c60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2c64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2c68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2c6c:	bf24      	itt	cs
 80a2c6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2c72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2c76:	011b      	lsls	r3, r3, #4
 80a2c78:	bf18      	it	ne
 80a2c7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2c7e:	d1e0      	bne.n	80a2c42 <__aeabi_fdiv+0x46>
 80a2c80:	2afd      	cmp	r2, #253	; 0xfd
 80a2c82:	f63f af50 	bhi.w	80a2b26 <__aeabi_fmul+0x92>
 80a2c86:	428b      	cmp	r3, r1
 80a2c88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2c8c:	bf08      	it	eq
 80a2c8e:	f020 0001 	biceq.w	r0, r0, #1
 80a2c92:	4770      	bx	lr
 80a2c94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2c98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2c9c:	327f      	adds	r2, #127	; 0x7f
 80a2c9e:	bfc2      	ittt	gt
 80a2ca0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2ca4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2ca8:	4770      	bxgt	lr
 80a2caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2cae:	f04f 0300 	mov.w	r3, #0
 80a2cb2:	3a01      	subs	r2, #1
 80a2cb4:	e737      	b.n	80a2b26 <__aeabi_fmul+0x92>
 80a2cb6:	f092 0f00 	teq	r2, #0
 80a2cba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2cbe:	bf02      	ittt	eq
 80a2cc0:	0040      	lsleq	r0, r0, #1
 80a2cc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2cc6:	3a01      	subeq	r2, #1
 80a2cc8:	d0f9      	beq.n	80a2cbe <__aeabi_fdiv+0xc2>
 80a2cca:	ea40 000c 	orr.w	r0, r0, ip
 80a2cce:	f093 0f00 	teq	r3, #0
 80a2cd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2cd6:	bf02      	ittt	eq
 80a2cd8:	0049      	lsleq	r1, r1, #1
 80a2cda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2cde:	3b01      	subeq	r3, #1
 80a2ce0:	d0f9      	beq.n	80a2cd6 <__aeabi_fdiv+0xda>
 80a2ce2:	ea41 010c 	orr.w	r1, r1, ip
 80a2ce6:	e795      	b.n	80a2c14 <__aeabi_fdiv+0x18>
 80a2ce8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2cec:	ea92 0f0c 	teq	r2, ip
 80a2cf0:	d108      	bne.n	80a2d04 <__aeabi_fdiv+0x108>
 80a2cf2:	0242      	lsls	r2, r0, #9
 80a2cf4:	f47f af7d 	bne.w	80a2bf2 <__aeabi_fmul+0x15e>
 80a2cf8:	ea93 0f0c 	teq	r3, ip
 80a2cfc:	f47f af70 	bne.w	80a2be0 <__aeabi_fmul+0x14c>
 80a2d00:	4608      	mov	r0, r1
 80a2d02:	e776      	b.n	80a2bf2 <__aeabi_fmul+0x15e>
 80a2d04:	ea93 0f0c 	teq	r3, ip
 80a2d08:	d104      	bne.n	80a2d14 <__aeabi_fdiv+0x118>
 80a2d0a:	024b      	lsls	r3, r1, #9
 80a2d0c:	f43f af4c 	beq.w	80a2ba8 <__aeabi_fmul+0x114>
 80a2d10:	4608      	mov	r0, r1
 80a2d12:	e76e      	b.n	80a2bf2 <__aeabi_fmul+0x15e>
 80a2d14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2d18:	bf18      	it	ne
 80a2d1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2d1e:	d1ca      	bne.n	80a2cb6 <__aeabi_fdiv+0xba>
 80a2d20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2d24:	f47f af5c 	bne.w	80a2be0 <__aeabi_fmul+0x14c>
 80a2d28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2d2c:	f47f af3c 	bne.w	80a2ba8 <__aeabi_fmul+0x114>
 80a2d30:	e75f      	b.n	80a2bf2 <__aeabi_fmul+0x15e>
 80a2d32:	bf00      	nop

080a2d34 <__gesf2>:
 80a2d34:	f04f 3cff 	mov.w	ip, #4294967295
 80a2d38:	e006      	b.n	80a2d48 <__cmpsf2+0x4>
 80a2d3a:	bf00      	nop

080a2d3c <__lesf2>:
 80a2d3c:	f04f 0c01 	mov.w	ip, #1
 80a2d40:	e002      	b.n	80a2d48 <__cmpsf2+0x4>
 80a2d42:	bf00      	nop

080a2d44 <__cmpsf2>:
 80a2d44:	f04f 0c01 	mov.w	ip, #1
 80a2d48:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2d4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2d58:	bf18      	it	ne
 80a2d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2d5e:	d011      	beq.n	80a2d84 <__cmpsf2+0x40>
 80a2d60:	b001      	add	sp, #4
 80a2d62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2d66:	bf18      	it	ne
 80a2d68:	ea90 0f01 	teqne	r0, r1
 80a2d6c:	bf58      	it	pl
 80a2d6e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2d72:	bf88      	it	hi
 80a2d74:	17c8      	asrhi	r0, r1, #31
 80a2d76:	bf38      	it	cc
 80a2d78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2d7c:	bf18      	it	ne
 80a2d7e:	f040 0001 	orrne.w	r0, r0, #1
 80a2d82:	4770      	bx	lr
 80a2d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2d88:	d102      	bne.n	80a2d90 <__cmpsf2+0x4c>
 80a2d8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2d8e:	d105      	bne.n	80a2d9c <__cmpsf2+0x58>
 80a2d90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2d94:	d1e4      	bne.n	80a2d60 <__cmpsf2+0x1c>
 80a2d96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2d9a:	d0e1      	beq.n	80a2d60 <__cmpsf2+0x1c>
 80a2d9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2da0:	4770      	bx	lr
 80a2da2:	bf00      	nop

080a2da4 <__aeabi_cfrcmple>:
 80a2da4:	4684      	mov	ip, r0
 80a2da6:	4608      	mov	r0, r1
 80a2da8:	4661      	mov	r1, ip
 80a2daa:	e7ff      	b.n	80a2dac <__aeabi_cfcmpeq>

080a2dac <__aeabi_cfcmpeq>:
 80a2dac:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2dae:	f7ff ffc9 	bl	80a2d44 <__cmpsf2>
 80a2db2:	2800      	cmp	r0, #0
 80a2db4:	bf48      	it	mi
 80a2db6:	f110 0f00 	cmnmi.w	r0, #0
 80a2dba:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2dbc <__aeabi_fcmpeq>:
 80a2dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2dc0:	f7ff fff4 	bl	80a2dac <__aeabi_cfcmpeq>
 80a2dc4:	bf0c      	ite	eq
 80a2dc6:	2001      	moveq	r0, #1
 80a2dc8:	2000      	movne	r0, #0
 80a2dca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2dce:	bf00      	nop

080a2dd0 <__aeabi_fcmplt>:
 80a2dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2dd4:	f7ff ffea 	bl	80a2dac <__aeabi_cfcmpeq>
 80a2dd8:	bf34      	ite	cc
 80a2dda:	2001      	movcc	r0, #1
 80a2ddc:	2000      	movcs	r0, #0
 80a2dde:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2de2:	bf00      	nop

080a2de4 <__aeabi_fcmple>:
 80a2de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2de8:	f7ff ffe0 	bl	80a2dac <__aeabi_cfcmpeq>
 80a2dec:	bf94      	ite	ls
 80a2dee:	2001      	movls	r0, #1
 80a2df0:	2000      	movhi	r0, #0
 80a2df2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2df6:	bf00      	nop

080a2df8 <__aeabi_fcmpge>:
 80a2df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2dfc:	f7ff ffd2 	bl	80a2da4 <__aeabi_cfrcmple>
 80a2e00:	bf94      	ite	ls
 80a2e02:	2001      	movls	r0, #1
 80a2e04:	2000      	movhi	r0, #0
 80a2e06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e0a:	bf00      	nop

080a2e0c <__aeabi_fcmpgt>:
 80a2e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e10:	f7ff ffc8 	bl	80a2da4 <__aeabi_cfrcmple>
 80a2e14:	bf34      	ite	cc
 80a2e16:	2001      	movcc	r0, #1
 80a2e18:	2000      	movcs	r0, #0
 80a2e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e1e:	bf00      	nop

080a2e20 <__aeabi_fcmpun>:
 80a2e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e2c:	d102      	bne.n	80a2e34 <__aeabi_fcmpun+0x14>
 80a2e2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2e32:	d108      	bne.n	80a2e46 <__aeabi_fcmpun+0x26>
 80a2e34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2e38:	d102      	bne.n	80a2e40 <__aeabi_fcmpun+0x20>
 80a2e3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2e3e:	d102      	bne.n	80a2e46 <__aeabi_fcmpun+0x26>
 80a2e40:	f04f 0000 	mov.w	r0, #0
 80a2e44:	4770      	bx	lr
 80a2e46:	f04f 0001 	mov.w	r0, #1
 80a2e4a:	4770      	bx	lr

080a2e4c <__aeabi_uldivmod>:
 80a2e4c:	b953      	cbnz	r3, 80a2e64 <__aeabi_uldivmod+0x18>
 80a2e4e:	b94a      	cbnz	r2, 80a2e64 <__aeabi_uldivmod+0x18>
 80a2e50:	2900      	cmp	r1, #0
 80a2e52:	bf08      	it	eq
 80a2e54:	2800      	cmpeq	r0, #0
 80a2e56:	bf1c      	itt	ne
 80a2e58:	f04f 31ff 	movne.w	r1, #4294967295
 80a2e5c:	f04f 30ff 	movne.w	r0, #4294967295
 80a2e60:	f000 b98c 	b.w	80a317c <__aeabi_idiv0>
 80a2e64:	f1ad 0c08 	sub.w	ip, sp, #8
 80a2e68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a2e6c:	f000 f824 	bl	80a2eb8 <__udivmoddi4>
 80a2e70:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a2e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2e78:	b004      	add	sp, #16
 80a2e7a:	4770      	bx	lr

080a2e7c <__aeabi_d2ulz>:
 80a2e7c:	b5d0      	push	{r4, r6, r7, lr}
 80a2e7e:	2200      	movs	r2, #0
 80a2e80:	4b0b      	ldr	r3, [pc, #44]	; (80a2eb0 <__aeabi_d2ulz+0x34>)
 80a2e82:	4606      	mov	r6, r0
 80a2e84:	460f      	mov	r7, r1
 80a2e86:	f7ff f9ed 	bl	80a2264 <__aeabi_dmul>
 80a2e8a:	f7ff fc85 	bl	80a2798 <__aeabi_d2uiz>
 80a2e8e:	4604      	mov	r4, r0
 80a2e90:	f7ff f96e 	bl	80a2170 <__aeabi_ui2d>
 80a2e94:	2200      	movs	r2, #0
 80a2e96:	4b07      	ldr	r3, [pc, #28]	; (80a2eb4 <__aeabi_d2ulz+0x38>)
 80a2e98:	f7ff f9e4 	bl	80a2264 <__aeabi_dmul>
 80a2e9c:	4602      	mov	r2, r0
 80a2e9e:	460b      	mov	r3, r1
 80a2ea0:	4630      	mov	r0, r6
 80a2ea2:	4639      	mov	r1, r7
 80a2ea4:	f7ff f826 	bl	80a1ef4 <__aeabi_dsub>
 80a2ea8:	f7ff fc76 	bl	80a2798 <__aeabi_d2uiz>
 80a2eac:	4621      	mov	r1, r4
 80a2eae:	bdd0      	pop	{r4, r6, r7, pc}
 80a2eb0:	3df00000 	.word	0x3df00000
 80a2eb4:	41f00000 	.word	0x41f00000

080a2eb8 <__udivmoddi4>:
 80a2eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2ebc:	9e08      	ldr	r6, [sp, #32]
 80a2ebe:	460d      	mov	r5, r1
 80a2ec0:	4604      	mov	r4, r0
 80a2ec2:	468e      	mov	lr, r1
 80a2ec4:	2b00      	cmp	r3, #0
 80a2ec6:	f040 8083 	bne.w	80a2fd0 <__udivmoddi4+0x118>
 80a2eca:	428a      	cmp	r2, r1
 80a2ecc:	4617      	mov	r7, r2
 80a2ece:	d947      	bls.n	80a2f60 <__udivmoddi4+0xa8>
 80a2ed0:	fab2 f382 	clz	r3, r2
 80a2ed4:	b14b      	cbz	r3, 80a2eea <__udivmoddi4+0x32>
 80a2ed6:	f1c3 0120 	rsb	r1, r3, #32
 80a2eda:	fa05 fe03 	lsl.w	lr, r5, r3
 80a2ede:	fa20 f101 	lsr.w	r1, r0, r1
 80a2ee2:	409f      	lsls	r7, r3
 80a2ee4:	ea41 0e0e 	orr.w	lr, r1, lr
 80a2ee8:	409c      	lsls	r4, r3
 80a2eea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a2eee:	fbbe fcf8 	udiv	ip, lr, r8
 80a2ef2:	fa1f f987 	uxth.w	r9, r7
 80a2ef6:	fb08 e21c 	mls	r2, r8, ip, lr
 80a2efa:	fb0c f009 	mul.w	r0, ip, r9
 80a2efe:	0c21      	lsrs	r1, r4, #16
 80a2f00:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a2f04:	4290      	cmp	r0, r2
 80a2f06:	d90a      	bls.n	80a2f1e <__udivmoddi4+0x66>
 80a2f08:	18ba      	adds	r2, r7, r2
 80a2f0a:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a2f0e:	f080 8118 	bcs.w	80a3142 <__udivmoddi4+0x28a>
 80a2f12:	4290      	cmp	r0, r2
 80a2f14:	f240 8115 	bls.w	80a3142 <__udivmoddi4+0x28a>
 80a2f18:	f1ac 0c02 	sub.w	ip, ip, #2
 80a2f1c:	443a      	add	r2, r7
 80a2f1e:	1a12      	subs	r2, r2, r0
 80a2f20:	fbb2 f0f8 	udiv	r0, r2, r8
 80a2f24:	fb08 2210 	mls	r2, r8, r0, r2
 80a2f28:	fb00 f109 	mul.w	r1, r0, r9
 80a2f2c:	b2a4      	uxth	r4, r4
 80a2f2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2f32:	42a1      	cmp	r1, r4
 80a2f34:	d909      	bls.n	80a2f4a <__udivmoddi4+0x92>
 80a2f36:	193c      	adds	r4, r7, r4
 80a2f38:	f100 32ff 	add.w	r2, r0, #4294967295
 80a2f3c:	f080 8103 	bcs.w	80a3146 <__udivmoddi4+0x28e>
 80a2f40:	42a1      	cmp	r1, r4
 80a2f42:	f240 8100 	bls.w	80a3146 <__udivmoddi4+0x28e>
 80a2f46:	3802      	subs	r0, #2
 80a2f48:	443c      	add	r4, r7
 80a2f4a:	1a64      	subs	r4, r4, r1
 80a2f4c:	2100      	movs	r1, #0
 80a2f4e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a2f52:	b11e      	cbz	r6, 80a2f5c <__udivmoddi4+0xa4>
 80a2f54:	2200      	movs	r2, #0
 80a2f56:	40dc      	lsrs	r4, r3
 80a2f58:	e9c6 4200 	strd	r4, r2, [r6]
 80a2f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2f60:	b902      	cbnz	r2, 80a2f64 <__udivmoddi4+0xac>
 80a2f62:	deff      	udf	#255	; 0xff
 80a2f64:	fab2 f382 	clz	r3, r2
 80a2f68:	2b00      	cmp	r3, #0
 80a2f6a:	d14f      	bne.n	80a300c <__udivmoddi4+0x154>
 80a2f6c:	1a8d      	subs	r5, r1, r2
 80a2f6e:	2101      	movs	r1, #1
 80a2f70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a2f74:	fa1f f882 	uxth.w	r8, r2
 80a2f78:	fbb5 fcfe 	udiv	ip, r5, lr
 80a2f7c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a2f80:	fb08 f00c 	mul.w	r0, r8, ip
 80a2f84:	0c22      	lsrs	r2, r4, #16
 80a2f86:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a2f8a:	42a8      	cmp	r0, r5
 80a2f8c:	d907      	bls.n	80a2f9e <__udivmoddi4+0xe6>
 80a2f8e:	197d      	adds	r5, r7, r5
 80a2f90:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a2f94:	d202      	bcs.n	80a2f9c <__udivmoddi4+0xe4>
 80a2f96:	42a8      	cmp	r0, r5
 80a2f98:	f200 80e9 	bhi.w	80a316e <__udivmoddi4+0x2b6>
 80a2f9c:	4694      	mov	ip, r2
 80a2f9e:	1a2d      	subs	r5, r5, r0
 80a2fa0:	fbb5 f0fe 	udiv	r0, r5, lr
 80a2fa4:	fb0e 5510 	mls	r5, lr, r0, r5
 80a2fa8:	fb08 f800 	mul.w	r8, r8, r0
 80a2fac:	b2a4      	uxth	r4, r4
 80a2fae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a2fb2:	45a0      	cmp	r8, r4
 80a2fb4:	d907      	bls.n	80a2fc6 <__udivmoddi4+0x10e>
 80a2fb6:	193c      	adds	r4, r7, r4
 80a2fb8:	f100 32ff 	add.w	r2, r0, #4294967295
 80a2fbc:	d202      	bcs.n	80a2fc4 <__udivmoddi4+0x10c>
 80a2fbe:	45a0      	cmp	r8, r4
 80a2fc0:	f200 80d9 	bhi.w	80a3176 <__udivmoddi4+0x2be>
 80a2fc4:	4610      	mov	r0, r2
 80a2fc6:	eba4 0408 	sub.w	r4, r4, r8
 80a2fca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a2fce:	e7c0      	b.n	80a2f52 <__udivmoddi4+0x9a>
 80a2fd0:	428b      	cmp	r3, r1
 80a2fd2:	d908      	bls.n	80a2fe6 <__udivmoddi4+0x12e>
 80a2fd4:	2e00      	cmp	r6, #0
 80a2fd6:	f000 80b1 	beq.w	80a313c <__udivmoddi4+0x284>
 80a2fda:	2100      	movs	r1, #0
 80a2fdc:	e9c6 0500 	strd	r0, r5, [r6]
 80a2fe0:	4608      	mov	r0, r1
 80a2fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2fe6:	fab3 f183 	clz	r1, r3
 80a2fea:	2900      	cmp	r1, #0
 80a2fec:	d14b      	bne.n	80a3086 <__udivmoddi4+0x1ce>
 80a2fee:	42ab      	cmp	r3, r5
 80a2ff0:	d302      	bcc.n	80a2ff8 <__udivmoddi4+0x140>
 80a2ff2:	4282      	cmp	r2, r0
 80a2ff4:	f200 80b9 	bhi.w	80a316a <__udivmoddi4+0x2b2>
 80a2ff8:	1a84      	subs	r4, r0, r2
 80a2ffa:	eb65 0303 	sbc.w	r3, r5, r3
 80a2ffe:	2001      	movs	r0, #1
 80a3000:	469e      	mov	lr, r3
 80a3002:	2e00      	cmp	r6, #0
 80a3004:	d0aa      	beq.n	80a2f5c <__udivmoddi4+0xa4>
 80a3006:	e9c6 4e00 	strd	r4, lr, [r6]
 80a300a:	e7a7      	b.n	80a2f5c <__udivmoddi4+0xa4>
 80a300c:	409f      	lsls	r7, r3
 80a300e:	f1c3 0220 	rsb	r2, r3, #32
 80a3012:	40d1      	lsrs	r1, r2
 80a3014:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a3018:	fbb1 f0fe 	udiv	r0, r1, lr
 80a301c:	fa1f f887 	uxth.w	r8, r7
 80a3020:	fb0e 1110 	mls	r1, lr, r0, r1
 80a3024:	fa24 f202 	lsr.w	r2, r4, r2
 80a3028:	409d      	lsls	r5, r3
 80a302a:	fb00 fc08 	mul.w	ip, r0, r8
 80a302e:	432a      	orrs	r2, r5
 80a3030:	0c15      	lsrs	r5, r2, #16
 80a3032:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a3036:	45ac      	cmp	ip, r5
 80a3038:	fa04 f403 	lsl.w	r4, r4, r3
 80a303c:	d909      	bls.n	80a3052 <__udivmoddi4+0x19a>
 80a303e:	197d      	adds	r5, r7, r5
 80a3040:	f100 31ff 	add.w	r1, r0, #4294967295
 80a3044:	f080 808f 	bcs.w	80a3166 <__udivmoddi4+0x2ae>
 80a3048:	45ac      	cmp	ip, r5
 80a304a:	f240 808c 	bls.w	80a3166 <__udivmoddi4+0x2ae>
 80a304e:	3802      	subs	r0, #2
 80a3050:	443d      	add	r5, r7
 80a3052:	eba5 050c 	sub.w	r5, r5, ip
 80a3056:	fbb5 f1fe 	udiv	r1, r5, lr
 80a305a:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a305e:	fb01 f908 	mul.w	r9, r1, r8
 80a3062:	b295      	uxth	r5, r2
 80a3064:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a3068:	45a9      	cmp	r9, r5
 80a306a:	d907      	bls.n	80a307c <__udivmoddi4+0x1c4>
 80a306c:	197d      	adds	r5, r7, r5
 80a306e:	f101 32ff 	add.w	r2, r1, #4294967295
 80a3072:	d274      	bcs.n	80a315e <__udivmoddi4+0x2a6>
 80a3074:	45a9      	cmp	r9, r5
 80a3076:	d972      	bls.n	80a315e <__udivmoddi4+0x2a6>
 80a3078:	3902      	subs	r1, #2
 80a307a:	443d      	add	r5, r7
 80a307c:	eba5 0509 	sub.w	r5, r5, r9
 80a3080:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a3084:	e778      	b.n	80a2f78 <__udivmoddi4+0xc0>
 80a3086:	f1c1 0720 	rsb	r7, r1, #32
 80a308a:	408b      	lsls	r3, r1
 80a308c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a3090:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3094:	fa25 f407 	lsr.w	r4, r5, r7
 80a3098:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a309c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a30a0:	fa1f f88c 	uxth.w	r8, ip
 80a30a4:	fb0e 4419 	mls	r4, lr, r9, r4
 80a30a8:	fa20 f307 	lsr.w	r3, r0, r7
 80a30ac:	fb09 fa08 	mul.w	sl, r9, r8
 80a30b0:	408d      	lsls	r5, r1
 80a30b2:	431d      	orrs	r5, r3
 80a30b4:	0c2b      	lsrs	r3, r5, #16
 80a30b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a30ba:	45a2      	cmp	sl, r4
 80a30bc:	fa02 f201 	lsl.w	r2, r2, r1
 80a30c0:	fa00 f301 	lsl.w	r3, r0, r1
 80a30c4:	d909      	bls.n	80a30da <__udivmoddi4+0x222>
 80a30c6:	eb1c 0404 	adds.w	r4, ip, r4
 80a30ca:	f109 30ff 	add.w	r0, r9, #4294967295
 80a30ce:	d248      	bcs.n	80a3162 <__udivmoddi4+0x2aa>
 80a30d0:	45a2      	cmp	sl, r4
 80a30d2:	d946      	bls.n	80a3162 <__udivmoddi4+0x2aa>
 80a30d4:	f1a9 0902 	sub.w	r9, r9, #2
 80a30d8:	4464      	add	r4, ip
 80a30da:	eba4 040a 	sub.w	r4, r4, sl
 80a30de:	fbb4 f0fe 	udiv	r0, r4, lr
 80a30e2:	fb0e 4410 	mls	r4, lr, r0, r4
 80a30e6:	fb00 fa08 	mul.w	sl, r0, r8
 80a30ea:	b2ad      	uxth	r5, r5
 80a30ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a30f0:	45a2      	cmp	sl, r4
 80a30f2:	d908      	bls.n	80a3106 <__udivmoddi4+0x24e>
 80a30f4:	eb1c 0404 	adds.w	r4, ip, r4
 80a30f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80a30fc:	d22d      	bcs.n	80a315a <__udivmoddi4+0x2a2>
 80a30fe:	45a2      	cmp	sl, r4
 80a3100:	d92b      	bls.n	80a315a <__udivmoddi4+0x2a2>
 80a3102:	3802      	subs	r0, #2
 80a3104:	4464      	add	r4, ip
 80a3106:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a310a:	fba0 8902 	umull	r8, r9, r0, r2
 80a310e:	eba4 040a 	sub.w	r4, r4, sl
 80a3112:	454c      	cmp	r4, r9
 80a3114:	46c6      	mov	lr, r8
 80a3116:	464d      	mov	r5, r9
 80a3118:	d319      	bcc.n	80a314e <__udivmoddi4+0x296>
 80a311a:	d016      	beq.n	80a314a <__udivmoddi4+0x292>
 80a311c:	b15e      	cbz	r6, 80a3136 <__udivmoddi4+0x27e>
 80a311e:	ebb3 020e 	subs.w	r2, r3, lr
 80a3122:	eb64 0405 	sbc.w	r4, r4, r5
 80a3126:	fa04 f707 	lsl.w	r7, r4, r7
 80a312a:	fa22 f301 	lsr.w	r3, r2, r1
 80a312e:	431f      	orrs	r7, r3
 80a3130:	40cc      	lsrs	r4, r1
 80a3132:	e9c6 7400 	strd	r7, r4, [r6]
 80a3136:	2100      	movs	r1, #0
 80a3138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a313c:	4631      	mov	r1, r6
 80a313e:	4630      	mov	r0, r6
 80a3140:	e70c      	b.n	80a2f5c <__udivmoddi4+0xa4>
 80a3142:	468c      	mov	ip, r1
 80a3144:	e6eb      	b.n	80a2f1e <__udivmoddi4+0x66>
 80a3146:	4610      	mov	r0, r2
 80a3148:	e6ff      	b.n	80a2f4a <__udivmoddi4+0x92>
 80a314a:	4543      	cmp	r3, r8
 80a314c:	d2e6      	bcs.n	80a311c <__udivmoddi4+0x264>
 80a314e:	ebb8 0e02 	subs.w	lr, r8, r2
 80a3152:	eb69 050c 	sbc.w	r5, r9, ip
 80a3156:	3801      	subs	r0, #1
 80a3158:	e7e0      	b.n	80a311c <__udivmoddi4+0x264>
 80a315a:	4628      	mov	r0, r5
 80a315c:	e7d3      	b.n	80a3106 <__udivmoddi4+0x24e>
 80a315e:	4611      	mov	r1, r2
 80a3160:	e78c      	b.n	80a307c <__udivmoddi4+0x1c4>
 80a3162:	4681      	mov	r9, r0
 80a3164:	e7b9      	b.n	80a30da <__udivmoddi4+0x222>
 80a3166:	4608      	mov	r0, r1
 80a3168:	e773      	b.n	80a3052 <__udivmoddi4+0x19a>
 80a316a:	4608      	mov	r0, r1
 80a316c:	e749      	b.n	80a3002 <__udivmoddi4+0x14a>
 80a316e:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3172:	443d      	add	r5, r7
 80a3174:	e713      	b.n	80a2f9e <__udivmoddi4+0xe6>
 80a3176:	3802      	subs	r0, #2
 80a3178:	443c      	add	r4, r7
 80a317a:	e724      	b.n	80a2fc6 <__udivmoddi4+0x10e>

080a317c <__aeabi_idiv0>:
 80a317c:	4770      	bx	lr
 80a317e:	bf00      	nop

080a3180 <__cxa_atexit>:
 80a3180:	b510      	push	{r4, lr}
 80a3182:	4604      	mov	r4, r0
 80a3184:	4804      	ldr	r0, [pc, #16]	; (80a3198 <__cxa_atexit+0x18>)
 80a3186:	4613      	mov	r3, r2
 80a3188:	b120      	cbz	r0, 80a3194 <__cxa_atexit+0x14>
 80a318a:	460a      	mov	r2, r1
 80a318c:	2002      	movs	r0, #2
 80a318e:	4621      	mov	r1, r4
 80a3190:	f3af 8000 	nop.w
 80a3194:	bd10      	pop	{r4, pc}
 80a3196:	bf00      	nop
 80a3198:	00000000 	.word	0x00000000

080a319c <memcpy>:
 80a319c:	440a      	add	r2, r1
 80a319e:	4291      	cmp	r1, r2
 80a31a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80a31a4:	d100      	bne.n	80a31a8 <memcpy+0xc>
 80a31a6:	4770      	bx	lr
 80a31a8:	b510      	push	{r4, lr}
 80a31aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a31ae:	4291      	cmp	r1, r2
 80a31b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a31b4:	d1f9      	bne.n	80a31aa <memcpy+0xe>
 80a31b6:	bd10      	pop	{r4, pc}

080a31b8 <memset>:
 80a31b8:	4603      	mov	r3, r0
 80a31ba:	4402      	add	r2, r0
 80a31bc:	4293      	cmp	r3, r2
 80a31be:	d100      	bne.n	80a31c2 <memset+0xa>
 80a31c0:	4770      	bx	lr
 80a31c2:	f803 1b01 	strb.w	r1, [r3], #1
 80a31c6:	e7f9      	b.n	80a31bc <memset+0x4>

080a31c8 <srand>:
 80a31c8:	b538      	push	{r3, r4, r5, lr}
 80a31ca:	4b0d      	ldr	r3, [pc, #52]	; (80a3200 <srand+0x38>)
 80a31cc:	4604      	mov	r4, r0
 80a31ce:	681d      	ldr	r5, [r3, #0]
 80a31d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a31d2:	b97b      	cbnz	r3, 80a31f4 <srand+0x2c>
 80a31d4:	2018      	movs	r0, #24
 80a31d6:	f7fd fbe9 	bl	80a09ac <malloc>
 80a31da:	4a0a      	ldr	r2, [pc, #40]	; (80a3204 <srand+0x3c>)
 80a31dc:	4b0a      	ldr	r3, [pc, #40]	; (80a3208 <srand+0x40>)
 80a31de:	63a8      	str	r0, [r5, #56]	; 0x38
 80a31e0:	e9c0 2300 	strd	r2, r3, [r0]
 80a31e4:	4b09      	ldr	r3, [pc, #36]	; (80a320c <srand+0x44>)
 80a31e6:	2201      	movs	r2, #1
 80a31e8:	6083      	str	r3, [r0, #8]
 80a31ea:	230b      	movs	r3, #11
 80a31ec:	8183      	strh	r3, [r0, #12]
 80a31ee:	2300      	movs	r3, #0
 80a31f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a31f4:	2200      	movs	r2, #0
 80a31f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a31f8:	611c      	str	r4, [r3, #16]
 80a31fa:	615a      	str	r2, [r3, #20]
 80a31fc:	bd38      	pop	{r3, r4, r5, pc}
 80a31fe:	bf00      	nop
 80a3200:	20000008 	.word	0x20000008
 80a3204:	abcd330e 	.word	0xabcd330e
 80a3208:	e66d1234 	.word	0xe66d1234
 80a320c:	0005deec 	.word	0x0005deec

080a3210 <strdup>:
 80a3210:	4b02      	ldr	r3, [pc, #8]	; (80a321c <strdup+0xc>)
 80a3212:	4601      	mov	r1, r0
 80a3214:	6818      	ldr	r0, [r3, #0]
 80a3216:	f000 b803 	b.w	80a3220 <_strdup_r>
 80a321a:	bf00      	nop
 80a321c:	20000008 	.word	0x20000008

080a3220 <_strdup_r>:
 80a3220:	b570      	push	{r4, r5, r6, lr}
 80a3222:	4604      	mov	r4, r0
 80a3224:	4608      	mov	r0, r1
 80a3226:	460d      	mov	r5, r1
 80a3228:	f000 f80d 	bl	80a3246 <strlen>
 80a322c:	1c46      	adds	r6, r0, #1
 80a322e:	4631      	mov	r1, r6
 80a3230:	4620      	mov	r0, r4
 80a3232:	f7fd fbdb 	bl	80a09ec <_malloc_r>
 80a3236:	4604      	mov	r4, r0
 80a3238:	b118      	cbz	r0, 80a3242 <_strdup_r+0x22>
 80a323a:	4632      	mov	r2, r6
 80a323c:	4629      	mov	r1, r5
 80a323e:	f7ff ffad 	bl	80a319c <memcpy>
 80a3242:	4620      	mov	r0, r4
 80a3244:	bd70      	pop	{r4, r5, r6, pc}

080a3246 <strlen>:
 80a3246:	4603      	mov	r3, r0
 80a3248:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a324c:	2a00      	cmp	r2, #0
 80a324e:	d1fb      	bne.n	80a3248 <strlen+0x2>
 80a3250:	1a18      	subs	r0, r3, r0
 80a3252:	3801      	subs	r0, #1
 80a3254:	4770      	bx	lr

080a3256 <link_code_end>:
	...

080a3258 <dynalib_user>:
 80a3258:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a3268:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
 80a3278:	0079 7061 0070 5925 252d 2d6d 6425 2554     y.app.%Y-%m-%dT%
 80a3288:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a3298:	0065 0000                                   e...

080a329c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a32a4:	0f21 080a 0f27 080a 0f65 080a 0f35 080a     !...'...e...5...
 80a32b4:	0f23 080a                                   #...

080a32b8 <_ZTV9IPAddress>:
	...
 80a32c0:	1469 080a 1459 080a 145b 080a               i...Y...[...

080a32cc <_ZTV9USBSerial>:
	...
 80a32d4:	1525 080a 158b 080a 1563 080a 0ca5 080a     %.......c.......
 80a32e4:	1555 080a 1527 080a 1537 080a 1585 080a     U...'...7.......
 80a32f4:	1547 080a 1521 080a                         G...!...

080a32fc <_ZTV11USARTSerial>:
	...
 80a3304:	16c1 080a 1729 080a 1705 080a 0ca5 080a     ....)...........
 80a3314:	16d5 080a 16f1 080a 16e3 080a 16ff 080a     ................
 80a3324:	16c3 080a 16c7 080a                         ........

080a332c <_ZTV7TwoWire>:
	...
 80a3334:	17dd 080a 1827 080a 17ff 080a 17df 080a     ....'...........
 80a3344:	1807 080a 180f 080a 1817 080a 181f 080a     ................

080a3354 <_ZTVN5spark9WiFiClassE>:
	...
 80a335c:	18ef 080a 18e5 080a 18db 080a 1859 080a     ............Y...
 80a336c:	0d31 080a 18cf 080a 18c3 080a 18bb 080a     1...............
 80a337c:	18b1 080a 18a7 080a 1863 080a               ........c...

080a3388 <_ZTVN5spark12NetworkClassE>:
	...
 80a3390:	190d 080a 1917 080a 1921 080a 192b 080a     ........!...+...
 80a33a0:	1935 080a 1941 080a 194d 080a 1959 080a     5...A...M...Y...
 80a33b0:	1961 080a 196b 080a 1975 080a               a...k...u...

080a33bc <_ZSt7nothrow>:
 80a33bc:	0000 0000 6f6c 6667                          ....logf.

080a33c5 <link_const_variable_data_end>:
 80a33c5:	00          	.byte	0x00
	...

080a33c8 <link_constructors_location>:
 80a33c8:	080a0189 	.word	0x080a0189
 80a33cc:	080a0a59 	.word	0x080a0a59
 80a33d0:	080a0d4d 	.word	0x080a0d4d
 80a33d4:	080a0d5d 	.word	0x080a0d5d
 80a33d8:	080a0db9 	.word	0x080a0db9
 80a33dc:	080a18f9 	.word	0x080a18f9
 80a33e0:	080a19c5 	.word	0x080a19c5
 80a33e4:	080a1a99 	.word	0x080a1a99

080a33e8 <link_constructors_end>:
	...
